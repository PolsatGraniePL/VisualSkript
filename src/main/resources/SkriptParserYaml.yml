
StructAliases:
    name: "Aliases"
    type: Structure
    pattern:
        - "aliases"
    description: "Used for registering custom aliases for a script."

StructCommand:
    name: "Command"
    type: Structure
    pattern:
        - "command <.+>"
    description: "Used for registering custom commands."

StructFunction:
    name: "Function"
    type: Structure
    pattern:
        - "[local] function <.+>"
    description: "Functions are structures that can be executed with arguments/parameters to run
code. They can also return a value to the trigger that is executing the
function. Note that local functions come before global functions execution"

StructOptions:
    name: "Options"
    type: Structure
    pattern:
        - "options"
    description: "Options are used for replacing parts of a script with something else. For
example, an option may represent a message that appears in multiple locations.
Take a look at the example below that showcases this."

StructVariables:
    name: "Variables"
    type: Structure
    pattern:
        - "variables"
    description: "Used for defining variables present within a script. This section is not
required, but it ensures that a variable has a value if it doesn`t exist when
the script is loaded."

ExprAbsorbedBlocks:
    name: "Absorbed blocks"
    type: Expression
    pattern:
        - "[the] absorbed blocks"
    description: "The blocks absorbed by a sponge block."

ExprActiveItem:
    name: "Active Item"
    type: Expression
    pattern:
        - "[the] (raised|active) (tool|item|weapon) of %living entities%"
        - "%living entities%'[s] (raised|active) (tool|item|weapon)"
    description: "Returns the item the entities are currently using (ie: the food they`re
eating, the bow they`re drawing back, etc.). This cannot be changed. If an
entity is not using any item, this will return null."

ExprEntityItemUseTime:
    name: "Active Item Use Time"
    type: Expression
    pattern:
        - "[the] [elapsed|remaining] (item|tool) us[ag]e time of %living entities%"
        - "%living entities%'[s] [elapsed|remaining] (item|tool) us[ag]e time"
    description: "Returns the time that the entities have either spent using an item, or the
time left for them to finish using an item. If an entity is not using any
item, this will return 0 seconds."

ExprAffectedEntities:
    name: "Affected Entities"
    type: Expression
    pattern:
        - "[the] affected entities"
    description: "The affected entities in the area cloud effect event."

ExprAge:
    name: "Age of Block/Entity"
    type: Expression
    pattern:
        - "[the] [max[imum]] age of %blocks/entities%"
        - "%blocks/entities%'[s] [max[imum]] age"
    description: "Returns the age or maximum age of blocks and age for entities (there in no
maximum age for entities). For blocks, `Age` represents the different growth
stages that a crop‐like block can go through. A value of 0 indicates that the
crop was freshly planted, whilst a value equal to `maximum age` indicates that
the crop is ripe and ready to be harvested. For entities, `Age` represents the
time left for them to become adults and it`s in minus increasing to be 0 which
means they`re adults, e.g. A baby cow needs 20 minutes to become an adult
which equals to 24,000 ticks so their age will be ‐24000 once spawned."

ExprAllBannedEntries:
    name: "All Banned Players/IPs"
    type: Expression
    pattern:
        - "[all [[of] the]|the] banned (players|(ips|ip addresses))"
    description: "Obtains the list of all banned players or IP addresses."

ExprAllGroups:
    name: "All Groups"
    type: Expression
    pattern:
        - "all groups"
    description: "All the groups a player can have. This expression requires Vault and a
compatible permissions plugin to be installed."

ExprOps:
    name: "All Operators"
    type: Expression
    pattern:
        - "[all [[of] the]|the] [server] [non(-| )]op[erator]s"
    description: "The list of operators on the server."

ExprPermissions:
    name: "All Permissions"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] permissions (from|of) %players%"
        - "[(all [[of] the]|the)] %players%'[s] permissions"
    description: "Returns all permissions of the defined player(s). Note that the modifications
to resulting list do not actually change permissions."

ExprScripts:
    name: "All Scripts"
    type: Expression
    pattern:
        - "[all [of the]] scripts [(without ([subdirectory] paths|parents))]"
        - "[all [of the]] (enabled|loaded) scripts [(without ([subdirectory]
paths|parents))]"
        - "[all [of the]] (disabled|unloaded) scripts [(without ([subdirectory]
paths|parents))]"
    description: "Returns all of the scripts, or just the enabled or disabled ones."

ExprAllCommands:
    name: "All commands"
    type: Expression
    pattern:
        - "[(all|the|all [of] the)] [registered] [script] commands"
    description: "Returns all registered commands or all script commands."

ExprAlphabetList:
    name: "Alphabetical Sort"
    type: Expression
    pattern:
        - "alphabetically sorted %texts%"
    description: "Sorts given strings in alphabetical order."

ExprAltitude:
    name: "Altitude"
    type: Expression
    pattern:
        - "[the] altitude[s] of %locations%"
        - "%locations%'[s] altitude[s]"
    description: "Effectively an alias of `y‐coordinate of …`, it represents the height of some
object above bedrock."

ExprAmount:
    name: "Amount"
    type: Expression
    pattern:
        - "[the] (amount|number|size) of %objects%"
        - "[the] recursive (amount|number|size) of %objects%"
    description: "The amount of something. Please note that `amount of %items%` will not return
the number of items, but the number of stacks, e.g. 1 for a stack of 64
torches. To get the amount of items in a stack, see the item amount
expression.

Also, you can get the recursive size of a list, which will return the
recursive size of the list with sublists included, e.g.

    
    
     {list::*} Structure  
     ├──── {list::1}: 1  
     ├──── {list::2}: 2  
     │ ├──── {list::2::1}: 3  
     │ │ └──── {list::2::1::1}: 4  
     │ └──── {list::2::2}: 5  
     └──── {list::3}: 6 

Where using %size of {list::*}% will only return 3 (the first layer of indices
only), while %recursive size of {list::*}% will return 6 (the entire list)
Please note that getting a list`s recursive size can cause lag if the list is
large, so only use this expression if you need to!"

ExprAmountOfItems:
    name: "Amount of Items"
    type: Expression
    pattern:
        - "[the] (amount|number) of %item types% (in|of) %inventories%"
    description: "Counts how many of a particular item type are in a given inventory."

ExprAnvilRepairCost:
    name: "Anvil Repair Cost"
    type: Expression
    pattern:
        - "[the] [anvil] [item] [max[imum]] repair cost [of %inventories%]"
        - "%inventories%'[s] [anvil] [item] [max[imum]] repair cost"
    description: "Returns the experience cost (in levels) to complete the current repair or the
maximum experience cost (in levels) to be allowed by the current repair. The
default value of max cost set by vanilla Minecraft is 40."

ExprAnvilText:
    name: "Anvil Text Input"
    type: Expression
    pattern:
        - "[the] anvil [inventory] (rename|text) input of %inventories%"
        - "%inventories%'[s] anvil [inventory] (rename|text) input"
    description: "An expression to get the name to be applied to an item in an anvil inventory."

ExprAppliedEnchantments:
    name: "Applied Enchantments"
    type: Expression
    pattern:
        - "[the] applied enchant[ment]s"
    description: "The applied enchantments in an enchant event. Deleting or removing the applied
enchantments will prevent the item`s enchantment."

ExprArgument:
    name: "Argument"
    type: Expression
    pattern:
        - "[the] last arg[ument]"
        - "[the] arg[ument](-| )<(\\d+)>"
        - "[the] <(\\d*1)st|(\\d*2)nd|(\\d*3)rd|(\\d*[4-90])th> arg[ument][s]"
        - "[(all [[of] the]|the)] arg[ument][s]"
        - "[the] %*type%( |-)arg[ument][( |-)<\\d+>]"
        - "[the] arg[ument]( |-)%*type%[( |-)<\\d+>]"
    description: "Usable in script commands and command events. Holds the value of an argument
given to the command, e.g. if the command '/tell <player> <text>' is used like
'/tell Njol Hello Njol!' argument 1 is the player named 'Njol' and argument 2
is 'Hello Njol!'. One can also use the type of the argument instead of its
index to address the argument, e.g. in the above example `player‐argument` is
the same as `argument 1`. Please note that specifying the argument type is
only supported in script commands."

ExprArithmetic:
    name: "Arithmetic"
    type: Expression
    pattern:
        - "\\\\(%object%\\\\)[ ]+[ ]\\\\(%object%\\\\)"
        - "\\\\(%object%\\\\)[ ]+[ ]%object%"
        - "%object%[ ]+[ ]\\\\(%object%\\\\)"
        - "%object%[ ]+[ ]%object%"
        - "\\\\(%object%\\\\)[ ]-[ ]\\\\(%object%\\\\)"
        - "\\\\(%object%\\\\)[ ]-[ ]%object%"
        - "%object%[ ]-[ ]\\\\(%object%\\\\)"
        - "%object%[ ]-[ ]%object%"
        - "\\\\(%object%\\\\)[ ]*[ ]\\\\(%object%\\\\)"
        - "\\\\(%object%\\\\)[ ]*[ ]%object%"
        - "%object%[ ]*[ ]\\\\(%object%\\\\)"
        - "%object%[ ]*[ ]%object%"
        - "\\\\(%object%\\\\)[ ]/[ ]\\\\(%object%\\\\)"
        - "\\\\(%object%\\\\)[ ]/[ ]%object%"
        - "%object%[ ]/[ ]\\\\(%object%\\\\)"
        - "%object%[ ]/[ ]%object%"
        - "\\\\(%object%\\\\)[ ]^[ ]\\\\(%object%\\\\)"
        - "\\\\(%object%\\\\)[ ]^[ ]%object%"
        - "%object%[ ]^[ ]\\\\(%object%\\\\)"
        - "%object%[ ]^[ ]%object%"
    description: "Arithmetic expressions, e.g. 1 + 2, (health of player ‐ 2) / 3, etc."

ExprArmorSlot:
    name: "Armour Slot"
    type: Expression
    pattern:
        - "[the] ((boots|shoes|leg[ging]s|chestplate[s]|helmet[s])
[(item|slot)]|armo[u]r[s]) of %living entities%"
        - "%living entities%'[s] ((boots|shoes|leg[ging]s|chestplate[s]|helmet[s])
[(item|slot)]|armo[u]r[s])"
    description: "Equipment of living entities, i.e. the boots, leggings, chestplate or helmet."

ExprAttachedBlock:
    name: "Arrow Attached Block"
    type: Expression
    pattern:
        - "[the] (attached|hit) block of %projectiles%"
        - "%projectiles%'[s] (attached|hit) block"
    description: "Returns the attached block of an arrow."

ExprArrowKnockbackStrength:
    name: "Arrow Knockback Strength"
    type: Expression
    pattern:
        - "[the] arrow knockback strength of %projectiles%"
        - "%projectiles%'[s] arrow knockback strength"
    description: "An arrow`s knockback strength."

ExprArrowsStuck:
    name: "Arrows Stuck"
    type: Expression
    pattern:
        - "[number of] arrow[s] stuck in %living entities%"
    description: "The number of arrows stuck in a living entity."

ExprAttackCooldown:
    name: "Attack Cooldown"
    type: Expression
    pattern:
        - "[the] attack cooldown of %players%"
        - "%players%'[s] attack cooldown"
    description: "Returns the current cooldown for a player`s attack. This is used to calculate
damage, with 1.0 representing a fully charged attack and 0.0 representing a
non‐charged attack. NOTE: Currently this can not be set to anything."

ExprAttacked:
    name: "Attacked"
    type: Expression
    pattern:
        - "[the] (attacked|damaged|victim) [<(.+)>]"
    description: "The victim of a damage event, e.g. when a player attacks a zombie this
expression represents the zombie. When using Minecraft 1.11+, this also covers
the hit entity in a projectile hit event."

ExprAttacker:
    name: "Attacker"
    type: Expression
    pattern:
        - "[the] (attacker|damager)"
    description: "The attacker of a damage event, e.g. when a player attacks a zombie this
expression represents the player. Please note that the attacker can also be a
block, e.g. a cactus or lava, but this expression will not be set in these
cases."

ExprBed:
    name: "Bed"
    type: Expression
    pattern:
        - "[the] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offline
players%"
        - "%offline players%'[s] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]]"
    description: "Returns the bed location of a player, i.e. the spawn point of a player if they
ever slept in a bed and the bed still exists and is unobstructed however, you
can set the unsafe bed location of players and they will respawn there even if
it has been obstructed or doesn`t exist anymore and that`s the default
behavior of this expression otherwise you will need to be specific i.e. `safe
bed location`.

NOTE: Offline players can not have their bed location changed, only online
players."

ExprBiome:
    name: "Biome"
    type: Expression
    pattern:
        - "[the] biome [(of|%direction%) %locations%]"
        - "%locations%'[s] biome"
    description: "The biome at a certain location. Please note that biomes are only defined for
x/z‐columns (i.e. the altitude (y‐coordinate) doesn`t matter), up until
Minecraft 1.15.x. As of Minecraft 1.16, biomes are now 3D (per block vs
column)."

ExprBlock:
    name: "Block"
    type: Expression
    pattern:
        - "[the] [event-]block"
    description: "The block involved in the event, e.g. the clicked block or the placed block.
Can optionally include a direction as well, e.g. `block above` or `block in
front of the player`."

ExprBlock-2:
    name: "Block"
    type: Expression
    pattern:
        - "[the] block %direction% [%location%]"
    description: "The block involved in the event, e.g. the clicked block or the placed block.
Can optionally include a direction as well, e.g. `block above` or `block in
front of the player`."

ExprBreakSpeed:
    name: "Block Break Speed"
    type: Expression
    pattern:
        - "[the] break speed[s] [of %blocks%] [for %players%]"
        - "%block%'[s] break speed[s] [for %players%]"
    description: "Gets the speed at which the given player would break this block, taking into
account tools, potion effects, whether or not the player is in water,
enchantments, etc. The returned value is the amount of progress made in
breaking the block each tick. When the total breaking progress reaches 1.0,
the block is broken. Note that the break speed can change in the course of
breaking a block, e.g. if a potion effect is applied or expires, or the player
jumps/enters water."

ExprBlockData:
    name: "Block Data"
    type: Expression
    pattern:
        - "[the] block[ ]data of %blocks%"
        - "%blocks%'[s] block[ ]data"
    description: "Get the block data associated with a block. This data can also be used to set
blocks."

ExprBlockHardness:
    name: "Block Hardness"
    type: Expression
    pattern:
        - "[the] [block] hardness of %item types%"
        - "%item types%'[s] [block] hardness"
    description: "Obtains the block`s hardness level (also known as 'strength'). This number is
used to calculate the time required to break each block."

ExprBlockSphere:
    name: "Block Sphere"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]"
        - "[(all [[of] the]|the)] blocks around %location% in radius %number%"
    description: "All blocks in a sphere around a center, mostly useful for looping."

ExprBlocks:
    name: "Blocks"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] blocks %direction% [%locations%]"
        - "[(all [[of] the]|the)] blocks from %location% [on] %direction%"
        - "[(all [[of] the]|the)] blocks from %location% to %location%"
        - "[(all [[of] the]|the)] blocks between %location% and %location%"
        - "[(all [[of] the]|the)] blocks within %location% and %location%"
        - "[(all [[of] the]|the)] blocks (in|within) %chunk%"
    description: "Blocks relative to other blocks or between other blocks. Can be used to get
blocks relative to other blocks or for looping. Blocks from/to and between
will return a straight line whereas blocks within will return a cuboid."

ExprBlocksInRegion:
    name: "Blocks in Region"
    type: Expression
    pattern:
        - "[(all|the)] blocks (in|of) [[the] region[s]] %regions%"
    description: "All blocks in a region. This expression requires a supported regions plugin to
be installed."

ExprBookAuthor:
    name: "Book Author"
    type: Expression
    pattern:
        - "[the] [book] (author|writer|publisher) of %item types%"
        - "%item types%'[s] [book] (author|writer|publisher)"
    description: "The author of a book."

ExprBookPages:
    name: "Book Pages"
    type: Expression
    pattern:
        - "[all [[of] the]|the] [book] (pages|content) of %item types/item stacks%"
        - "%item types/item stacks%'[s] [book] (pages|content)"
        - "[book] page %number% of %item types/item stacks%"
        - "%item types/item stacks%'[s] [book] page %number%"
    description: "The pages of a book (Supports Skript`s chat format) Note: In order to modify
the pages of a new written book, you must have the title and author of the
book set. Skript will do this for you, but if you want your own, please set
those values."

ExprBookTitle:
    name: "Book Title"
    type: Expression
    pattern:
        - "[the] book (name|title) of %item types%"
        - "%item types%'[s] book (name|title)"
    description: "The title of a book."

ExprBurnCookTime:
    name: "Burn/Cook Time"
    type: Expression
    pattern:
        - "[the] burn[ing] time"
        - "[the] (burn|cook)[ing] time of %blocks%"
        - "%blocks%'[s] (burn|cook)[ing] time"
    description: "The time a furnace takes to burn an item in a fuel burn event. Can also be
used to change the burn/cook time of a placed furnace."

ExprStringCase:
    name: "Case Text"
    type: Expression
    pattern:
        - "%texts% in (upper|lower)[ ]case"
        - "(upper|lower)[ ]case %texts%"
        - "capitali(s|z)ed %texts%"
        - "%texts% in [(lenient|strict) ](proper|title)[ ]case"
        - "[(lenient|strict) ](proper|title)[ ]case %texts%"
        - "%texts% in [(lenient|strict) ]camel[ ]case"
        - "[(lenient|strict) ]camel[ ]case %texts%"
        - "%texts% in [(lenient|strict) ]pascal[ ]case"
        - "[(lenient|strict) ]pascal[ ]case %texts%"
        - "%texts% in [(lower|upper|capital|screaming)[ ]]snake[ ]case"
        - "[(lower|upper|capital|screaming)[ ]]snake[ ]case %texts%"
        - "%texts% in [(lower|upper|capital)[ ]]kebab[ ]case"
        - "[(lower|upper|capital)[ ]]kebab[ ]case %texts%"
    description: "Copy of given text in Lowercase, Uppercase, Proper Case, camelCase,
PascalCase, Snake_Case, and Kebab‐Case"

ExprCharacters:
    name: "Characters Between"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] [alphanumeric] characters (between|from) %text%
(and|to) %text%"
    description: "All characters between two given characters, useful for generating random
strings. This expression uses the Unicode numerical code of a character to
determine which characters are between the two given characters. The ASCII
table linked here shows this ordering for the first 256 characters. If you
would like only alphanumeric characters you can use the `alphanumeric` option
in the expression. If strings of more than one character are given, only the
first character of each is used."

ExprChatFormat:
    name: "Chat Format"
    type: Expression
    pattern:
        - "[the] (message|chat) format[ting]"
    description: "Can be used to get/retrieve the chat format. The sender of a message is
represented by [player] or [sender], and the message by [message] or [msg]."

ExprChatRecipients:
    name: "Chat Recipients"
    type: Expression
    pattern:
        - "[chat][( |-)]recipients"
    description: "Recipients of chat events where this is called."

ExprChunk:
    name: "Chunk"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] chunk[s] (of|%directions%) %locations%"
        - "%locations%'[s] chunk[s]"
        - "[(all [[of] the]|the)] loaded chunks (of|in) %worlds%"
    description: "Returns the chunk of a block, location or entity is in, or a list of the
loaded chunks of a world."

ExprClicked:
    name: "Clicked Block/Entity/Inventory/Slot"
    type: Expression
    pattern:
        - "[the] (clicked [enchant[ment]] (button|option)|clicked (block|%*item
type/entity type%)|clicked slot|clicked inventory|click
(type|action)|inventory action)"
    description: "The clicked block, entity, inventory, inventory slot, inventory click type or
inventory action."

ExprColorOf:
    name: "Color of"
    type: Expression
    pattern:
        - "[the] colo[u]r[s] of %blocks/item types/entities/firework effects%"
        - "%blocks/item types/entities/firework effects%'[s] colo[u]r[s]"
    description: "The color of an item, can also be used to color chat messages with '<%color of
...%>this text is colored!'."

ExprColoured:
    name: "Colored / Uncolored"
    type: Expression
    pattern:
        - "(colo[u]r-|colo[u]red )%texts%"
        - "(format-|formatted )%texts%"
        - "(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%texts%"
    description: "Parses <color>s and, optionally, chat styles in a message or removes any
colors _and_ chat styles from the message. Parsing all chat styles requires
this expression to be used in same line with the send effect."

ExprCommand:
    name: "Command"
    type: Expression
    pattern:
        - "[the] (full|complete|whole) command"
        - "[the] command [(label|alias)]"
    description: "The command that caused an `on command` event (excluding the leading slash and
all arguments)"

ExprCommandInfo:
    name: "Command Info"
    type: Expression
    pattern:
        - "[the] main command [label|name] [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] main command [label|name]"
        - "[the] description [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] description"
        - "[the] label [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] label"
        - "[the] usage [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] usage"
        - "[(all|the|all [of] the)] aliases [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] aliases"
        - "[the] permission [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] permission"
        - "[the] permission message [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] permission message"
        - "[the] plugin [owner] [of [[the] command[s] %texts%]]"
        - "command[s] %texts%'[s] plugin [owner]"
    description: "Get information about a command."

ExprCommandSender:
    name: "Command Sender"
    type: Expression
    pattern:
        - "[the] [command['s]] (sender|executor)"
    description: "The player or the console who sent a command. Mostly useful in commands and
command events. If the command sender is a command block, its location can be
retrieved by using %block`s location%"

ExprCompassTarget:
    name: "Compass Target"
    type: Expression
    pattern:
        - "[the] compass target of %players%"
        - "%players%'[s] compass target"
    description: "The location a player`s compass is pointing at."

LitConsole:
    name: "Console"
    type: Expression
    pattern:
        - "[the] (console|server)"
    description: "Represents the server`s console which can receive messages and execute
commands"

ExprCmdCooldownInfo:
    name: "Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission"
    type: Expression
    pattern:
        - "[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current]
command]]"
        - "[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current]
command]]"
        - "[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for)
[the] [current] command])"
        - "[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current]
command]]"
        - "[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the]
[current] command]]"
    description: "Only usable in command events. Represents the cooldown time, the remaining
time, the elapsed time, the last usage date, or the cooldown bypass
permission."

ExprCoordinate:
    name: "Coordinate"
    type: Expression
    pattern:
        - "[the] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%"
        - "%locations%'[s] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]"
    description: "Represents a given coordinate of a location."

ExprEntity:
    name: "Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc."
    type: Expression
    pattern:
        - "[the] [event-]<.+>"
    description: "The entity involved in an event (an entity is a player, a creature or an
inanimate object like ignited TNT, a dropped item or an arrow). You can use
the specific type of the entity that`s involved in the event, e.g. in a `death
of a creeper` event you can use `the creeper` instead of `the entity`."

ExprCursorSlot:
    name: "Cursor Slot"
    type: Expression
    pattern:
        - "[the] cursor slot of %players%"
        - "%players%'[s] cursor slot"
    description: "The item which the player has on their inventory cursor. This slot is always
empty if player has no inventory open."

ExprChestInventory:
    name: "Custom Chest Inventory"
    type: Expression
    pattern:
        - "[a] [new] chest inventory (named|with name) %text% [with %number% row[s]]"
        - "[a] [new] chest inventory with %number% row[s] [(named|with name) %text%]"
    description: "Returns a chest inventory with the given amount of rows and the name. Use the
open inventory effect to open it."

ExprCustomModelData:
    name: "Custom Model Data"
    type: Expression
    pattern:
        - "[the] [custom] model data of %item types%"
        - "%item types%'[s] [custom] model data"
    description: "Get/set the CustomModelData tag for an item. (Value is an integer between 0
and 99999999)"

ExprDamage:
    name: "Damage"
    type: Expression
    pattern:
        - "[the] damage"
    description: "How much damage is done in a entity/vehicle/item damage events. For entity
damage events, possibly ignoring armour, criticals and/or enchantments
(remember that in Skript `1` is one full heart, not half a heart). For items,
it`s the amount of durability damage the item will be taking."

ExprDamageCause:
    name: "Damage Cause"
    type: Expression
    pattern:
        - "[the] damage (cause|type)"
    description: "The damage cause of a damage event. Please click on the link for more
information."

ExprDurability:
    name: "Damage Value/Durability"
    type: Expression
    pattern:
        - "[the] (damage[s] [value[s]]|durabilit(y|ies)) of %item types/slots%"
        - "%item types/slots%'[s] (damage[s] [value[s]]|durabilit(y|ies))"
    description: "The damage value/durability of an item."

ExprDamagedItem:
    name: "Damaged Item"
    type: Expression
    pattern:
        - "%item type% with (damage|data) [value] %number%"
        - "%item type% damaged by %number%"
    description: "Directly damages an item. In MC versions 1.12.2 and lower, this can be used to
apply data values to items/blocks"

ExprDateAgoLater:
    name: "Date Ago/Later"
    type: Expression
    pattern:
        - "%time span% (ago|in the past|before [the] [date] %date%)"
        - "%time span% (later|(from|after) [the] [date] %date%)"
    description: "A date the specified timespan before/after another date."

ExprDefaultValue:
    name: "Default Value"
    type: Expression
    pattern:
        - "%objects% (otherwise|?) %objects%"
    description: "A shorthand expression for giving things a default value. If the first thing
isn`t set, the second thing will be returned."

ExprDifference:
    name: "Difference"
    type: Expression
    pattern:
        - "difference (between|of) %object% and %object%"
    description: "The difference between two values Supported types include numbers, dates and
times."

ExprDifficulty:
    name: "Difficulty"
    type: Expression
    pattern:
        - "[the] difficult(y|ies) of %worlds%"
        - "%worlds%'[s] difficult(y|ies)"
    description: "The difficulty of a world."

ExprDirection:
    name: "Direction"
    type: Expression
    pattern:
        - "[%number% [(block|met(er|re))[s]] [to the]] (north[[(-|
)](east|west)][(ward[(s|ly)]|er[(n|ly)])] [of]|south[[(-|
)](east|west)][(ward[(s|ly)]|er[(n|ly)])]
[of]|(east|west)[(ward[(s|ly)]|er[(n|ly)])]
[of]|above|over|(up|down)[ward[(s|ly)]]|below|under[neath]|beneath)
[%direction%]"
        - "[%number% [(block|met(er|re))[s]]] in [the] (direction|horizontal
direction|facing|horizontal facing) of %entity/block% [(of|from)]"
        - "[%number% [(block|met(er|re))[s]]] in %entity/block%'[s] (direction|horizontal
direction|facing|horizontal facing) [(of|from)]"
        - "[%number% [(block|met(er|re))[s]]] (in[ ]front
[of]|forward[s]|behind|backwards|[to the] (right|left) [of])"
        - "[%number% [(block|met(er|re))[s]]] horizontal[ly] (in[ ]front
[of]|forward[s]|behind|backwards|to the (right|left) [of])"
    description: "A helper expression for the direction type."

ExprDistance:
    name: "Distance"
    type: Expression
    pattern:
        - "[the] distance between %location% and %location%"
    description: "The distance between two points."

ExprDrops:
    name: "Drops"
    type: Expression
    pattern:
        - "[the] drops"
    description: "Only works in death events. Holds the drops of the dying creature. Drops can
be prevented by removing them with 'remove ... from drops', e.g. 'remove all
pickaxes from the drops', or 'clear drops' if you don`t want any drops at all."

ExprDropsOfBlock:
    name: "Drops Of Block"
    type: Expression
    pattern:
        - "[(all|the|all [of] the)] drops of %blocks% [(using|with) %item type% [(as
%entity%)]]"
        - "%blocks%'s drops [(using|with) %item type% [(as %entity%)]]"
    description: "A list of the items that will drop when a block is broken."

ExprElement:
    name: "Elements"
    type: Expression
    pattern:
        - "[the] (first|last) element [out] of %objects%"
        - "[the] (first|last) %integer% elements [out] of %objects%"
        - "[a] random element [out] of %objects%"
        - "[the] %integer%(st|nd|rd|th) [[to] last] element [out] of %objects%"
        - "[the] elements (from|between) %integer% (to|and) %integer% [out] of %objects%"
    description: "The first, last, range or a random element of a set, e.g. a list variable. See
also: random expression"

ExprEnchantItem:
    name: "Enchant Item"
    type: Expression
    pattern:
        - "[the] enchant[ed] item"
    description: "The enchant item in an enchant prepare event or enchant event. It can be
modified, but enchantments will still be applied in the enchant event."

ExprEnchantingExpCost:
    name: "Enchanting Experience Cost"
    type: Expression
    pattern:
        - "[the] [displayed] ([e]xp[erience]|enchanting) cost"
    description: "The cost of enchanting in an enchant event. This is number that was displayed
in the enchantment table, not the actual number of levels removed."

ExprEnchantmentBonus:
    name: "Enchantment Bonus"
    type: Expression
    pattern:
        - "[the] enchantment bonus"
    description: "The enchantment bonus in an enchant prepare event. This represents the number
of bookshelves affecting/surrounding the enchantment table."

ExprEnchantmentLevel:
    name: "Enchantment Level"
    type: Expression
    pattern:
        - "[the] [enchant[ment]] level[s] of %enchantments% (on|of) %item types%"
        - "[the] %enchantments% [enchant[ment]] level[s] (on|of) %item types%"
        - "%item types%'[s] %enchantments% [enchant[ment]] level[s]"
        - "%item types%'[s] [enchant[ment]] level[s] of %enchantments%"
    description: "The level of a particular enchantment on an item."

ExprEnchantmentOffer:
    name: "Enchantment Offer"
    type: Expression
    pattern:
        - "[all [of]] [the] enchant[ment] offers"
        - "enchant[ment] offer[s] %numbers%"
        - "[the] %number%(st|nd|rd|th) enchant[ment] offer"
    description: "The enchantment offer in enchant prepare events."

ExprEnchantmentOfferCost:
    name: "Enchantment Offer Cost"
    type: Expression
    pattern:
        - "[the] [enchant[ment]] cost of %enchantment offers%"
        - "%enchantment offers%'[s] [enchant[ment]] cost"
    description: "The cost of an enchantment offer. This is displayed to the right of an
enchantment offer. If the cost is changed, it will always be at least 1. This
changes how many levels are required to enchant, but does not change the
number of levels removed. To change the number of levels removed, use the
enchant event."

ExprEnderChest:
    name: "Ender Chest"
    type: Expression
    pattern:
        - "[the] ender[ ]chest[s] of %players%"
        - "%players%'[s] ender[ ]chest[s]"
    description: "The ender chest of a player."

ExprEntities:
    name: "Entities"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] %*entity types% [(in|of) ([world[s]]
%worlds%|%chunks%)]"
        - "[(all [[of] the]|the)] entities of type[s] %entity types% [(in|of) ([world[s]]
%worlds%|%chunks%)]"
        - "[(all [[of] the]|the)] %*entity types% (within|[with]in radius) %number%
[(block[s]|met(er|re)[s])] (of|around) %location%"
        - "[(all [[of] the]|the)] entities of type[s] %entity types% in radius %number%
(of|around) %location%"
    description: "All entities in all worlds, in a specific world, in a chunk or in a radius
around a certain location, e.g. `all players`, `all creepers in the player`s
world`, or `players in radius 100 of the player`."

ExprAI:
    name: "Entity AI"
    type: Expression
    pattern:
        - "[the] (ai|artificial intelligence) of %living entities%"
        - "%living entities%'[s] (ai|artificial intelligence)"
    description: "Returns whether an entity has AI."

ExprEntityAttribute:
    name: "Entity Attribute"
    type: Expression
    pattern:
        - "[the] %attribute type% [((total|final|modified))] attribute [value] of
%entities%"
        - "%entities%'[s] %attribute type% [((total|final|modified))] attribute [value]"
    description: "The numerical value of an entity`s particular attribute. Note that the
movement speed attribute cannot be reliably used for players. For that
purpose, use the speed expression instead. Resetting an entity`s attribute is
only available in Minecraft 1.11 and above."

ExprFireTicks:
    name: "Entity Fire Burn Duration"
    type: Expression
    pattern:
        - "[the] (burn[ing]|fire) (time|duration) of %entities%"
        - "%entities%'[s] (burn[ing]|fire) (time|duration)"
    description: "How much time an entity will be burning for."

ExprEntityTamer:
    name: "Entity Owner"
    type: Expression
    pattern:
        - "[the] (owner|tamer) of %living entities%"
        - "%living entities%'[s] (owner|tamer)"
    description: "The owner of a tameable entity, such as a horse or wolf."

ExprExhaustion:
    name: "Exhaustion"
    type: Expression
    pattern:
        - "[the] exhaustion of %players%"
        - "%players%'[s] exhaustion"
    description: "The exhaustion of a player. This is mainly used to determine the rate of
hunger depletion."

ExprExperience:
    name: "Experience"
    type: Expression
    pattern:
        - "[the] [(spawned|dropped)] [e]xp[erience] [orb[s]]"
    description: "How much experience was spawned in an experience spawn or block break event.
Can be changed."

ExprExplodedBlocks:
    name: "Exploded Blocks"
    type: Expression
    pattern:
        - "[the] exploded blocks"
    description: "Get all the blocks that were destroyed in an explode event"

ExprExplosionBlockYield:
    name: "Explosion Block Yield"
    type: Expression
    pattern:
        - "[the] [explosion['s]] block (yield|amount)"
        - "[the] percentage of blocks dropped"
    description: "The percentage of exploded blocks dropped in an explosion event. When changing
the yield, a value greater than 1 will function the same as using 1.
Attempting to change the yield to a value less than 0 will have no effect."

ExprExplosionYield:
    name: "Explosion Yield"
    type: Expression
    pattern:
        - "[the] explosion (yield|radius|size)"
        - "[the] (yield|radius|size) of [the] explosion"
    description: "The yield of the explosion in an explosion prime event. This is how big the
explosion is. When changing the yield, values less than 0 will be ignored.
Read this wiki page for more information"

ExprExplosiveYield:
    name: "Explosive Yield"
    type: Expression
    pattern:
        - "[the] explosive (yield|radius|size) of %entities%"
        - "%entities%'[s] explosive (yield|radius|size)"
    description: "The yield of an explosive (creeper, primed tnt, fireball, etc.). This is how
big of an explosion is caused by the entity. Read this wiki page for more
information"

ExprFacing:
    name: "Facing"
    type: Expression
    pattern:
        - "[the] [(horizontal)] facing of %living entities/blocks%"
        - "%living entities/blocks%'[s] [(horizontal)] facing"
    description: "The facing of an entity or block, i.e. exactly north, south, east, west, up or
down (unlike direction which is the exact direction, e.g. `0.5 south and 0.7
east`)"

ExprFallDistance:
    name: "Fall Distance"
    type: Expression
    pattern:
        - "[the] fall[en] (distance|height) of %entities%"
        - "%entities%'[s] fall[en] (distance|height)"
    description: "The distance an entity has fallen for."

ExprFertilizedBlocks:
    name: "Fertilized Blocks"
    type: Expression
    pattern:
        - "[all] [the] fertilized blocks"
    description: "The blocks fertilized in block fertilize events."

ExprFilter:
    name: "Filter"
    type: Expression
    pattern:
        - "%objects% (where|that match) \\\\[<.+>\\\\]"
    description: "Filters a list based on a condition. For example, if you ran `broadcast
'something' and 'something else' where [string input is 'something']`, only
'something' would be broadcast as it is the only string that matched the
condition."

ExprInput:
    name: "Filter Input"
    type: Expression
    pattern:
        - "input"
        - "%*type% input"
    description: "Represents the input in a filter expression. For example, if you ran
`broadcast 'something' and 'something else' where [input is 'something']the
condition would be checked twice, using 'something' and 'something else' as
the inputs."

ExprFinalDamage:
    name: "Final Damage"
    type: Expression
    pattern:
        - "[the] final damage"
    description: "How much damage is done in a damage event, considering all types of damage
reduction. Can NOT be changed."

ExprFireworkEffect:
    name: "Firework Effect"
    type: Expression
    pattern:
        - "[(flickering|trailing|flickering trailing|trailing flickering)] %firework
type% [firework [effect]] colo[u]red %colors%"
        - "[(flickering|trailing|flickering trailing|trailing flickering)] %firework
type% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%"
    description: "Represents a `firework effect` which can be used in the launch firework
effect."

ExprFlightMode:
    name: "Flight Mode"
    type: Expression
    pattern:
        - "[the] fl(y[ing]|ight) (mode|state) of %players%"
        - "%players%'[s] fl(y[ing]|ight) (mode|state)"
    description: "Whether the player(s) are allowed to fly. Use Make Fly effect to force
player(s) to fly."

ExprFoodLevel:
    name: "Food Level"
    type: Expression
    pattern:
        - "[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]"
        - "%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]"
    description: "The food level of a player from 0 to 10. Has several aliases: food/hunger
level/meter/bar."

ExprFormatDate:
    name: "Formatted Date"
    type: Expression
    pattern:
        - "%dates% formatted [human-readable] [(with|as) %text%]"
        - "[human-readable] formatted %dates% [(with|as) %text%]"
    description: "Converts date to human‐readable text format. By default, `yyyy‐MM‐dd HH:mm:ss
z` (e.g. `2018‐03‐30 16:03:12 +01`) will be used. For reference, see this
Wikipedia article."

ExprTimeState:
    name: "Former/Future State"
    type: Expression
    pattern:
        - "[the] (former|past|old) [state] [of] %~object%"
        - "%~object% before [the event]"
        - "[the] (future|to-be|new) [state] [of] %~object%"
        - "%~object%(-to-be| after[(wards| the event)])"
    description: "Represents the value of an expression before an event happened or the value it
will have directly after the event, e.g. the old or new level respectively in
a level change event. Note: The past, future and present states of an
expression are sometimes called `time states` of an expression. Note 2: If you
don`t specify whether to use the past or future state of an expression that
has different values, its default value will be used which is usually the
value after the event."

ExprMemory:
    name: "Free / Max / Total Memory"
    type: Expression
    pattern:
        - "[the] [server] (free|max[imum]|total) (memory|ram)"
    description: "The free, max or total memory of the server in Megabytes."

ExprFreezeTicks:
    name: "Freeze Time"
    type: Expression
    pattern:
        - "[the] freeze time of %entities%"
        - "%entities%'[s] freeze time"
    description: "How much time an entity has been in powdered snow for."

ExprFurnaceSlot:
    name: "Furnace Slot"
    type: Expression
    pattern:
        - "[the] (ore slot|fuel slot|result [slot])"
        - "[the] (ore|fuel|result) slot[s] of %blocks%"
        - "%blocks%'[s] (ore|fuel|result) slot[s]"
    description: "A slot of a furnace, i.e. either the ore, fuel or result slot. Remember to use
`block` and not `furnace`, as `furnace` is not an existing expression. Note
that `the result` and `the result slot` refer to separate things. `the result`
is the product in a smelt event and `the result slot` is the output slot of a
furnace (where `the result` will end up). Note that if the result in a smelt
event is changed to an item that differs in type from the items currently in
the result slot, the smelting will fail to complete (the item will attempt to
smelt itself again). Note that if values other than `the result` are changed,
event values may not accurately reflect the actual items in a furnace. Thus
you may wish to use the event block in this case (e.g. `the fuel slot of the
event‐block`) to get accurate values if needed."

ExprGameMode:
    name: "Game Mode"
    type: Expression
    pattern:
        - "[the] game[ ]mode of %players%"
        - "%players%'[s] game[ ]mode"
    description: "The gamemode of a player. (Gamemodes)"

ExprGameRule:
    name: "Gamerule Value"
    type: Expression
    pattern:
        - "[the] gamerule %gamerule% of %worlds%"
    description: "The gamerule value of a world."

ExprGlidingState:
    name: "Gliding State"
    type: Expression
    pattern:
        - "[the] (gliding|glider) [state] of %living entities%"
        - "%living entities%'[s] (gliding|glider) [state]"
    description: "Sets of gets gliding state of player. It allows you to set gliding state of
entity even if they do not have an Elytra equipped."

ExprGlowing:
    name: "Glowing"
    type: Expression
    pattern:
        - "[the] glowing of %entities%"
        - "%entities%'[s] glowing"
    description: "Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing
entities can be seen through walls."

ExprGravity:
    name: "Gravity"
    type: Expression
    pattern:
        - "[the] gravity of %entities%"
        - "%entities%'[s] gravity"
    description: "If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+
NoGravity flag."

ExprGroup:
    name: "Group"
    type: Expression
    pattern:
        - "[the] group[s] of %offline players%"
        - "%offline players%'[s] group[s]"
    description: "The primary group or all groups of a player. This expression requires Vault
and a compatible permissions plugin to be installed. If you have LuckPerms,
ensure you have vault integration enabled in the luck perms configurations."

ExprHanging:
    name: "Hanging Entity/Remover"
    type: Expression
    pattern:
        - "[the] hanging (entity|remover)"
    description: "Returns the hanging entity or remover in hanging break and place events."

ExprHash:
    name: "Hash"
    type: Expression
    pattern:
        - "%texts% hash[ed] with (MD5|SHA-256)"
    description: "Hashes the given text using the MD5 or SHA‐256 algorithms. Each algorithm is
suitable for different use cases.

MD5 is provided mostly for backwards compatibility, as it is outdated and not
secure. SHA‐256 is more secure, and can used to hash somewhat confidental data
like IP addresses and even passwords. It is not _that_ secure out of the box,
so please consider using salt when dealing with passwords! When hashing data,
you **must** specify algorithms that will be used for security reasons!

Please note that a hash cannot be reversed under normal circumstanses. You
will not be able to get original value from a hash with Skript."

ExprHatchingType:
    name: "Hatching Entity Type"
    type: Expression
    pattern:
        - "[the] hatching entity [type]"
    description: "The type of the entity that will be hatched in a Player Egg Throw event."

ExprHatchingNumber:
    name: "Hatching Number"
    type: Expression
    pattern:
        - "[the] hatching number"
    description: "The number of entities that will be hatched in a Player Egg Throw event.
Please note that no more than 127 entities can be hatched at once."

ExprEyeLocation:
    name: "Head location"
    type: Expression
    pattern:
        - "[the] (head|eye[s]) [location[s]] of %living entities%"
        - "%living entities%'[s] (head|eye[s]) [location[s]]"
    description: "The location of an entity`s head, mostly useful for players and e.g. looping
blocks in the player`s line of sight. Please note that this location is only
accurate for entities whose head is exactly above their center, i.e. players,
endermen, zombies, skeletons, etc., but not sheep, pigs or cows."

ExprHealAmount:
    name: "Heal Amount"
    type: Expression
    pattern:
        - "[the] heal amount"
    description: "The amount of health healed in a healing event."

ExprHealReason:
    name: "Heal Reason"
    type: Expression
    pattern:
        - "(regen|health regain|heal) (reason|cause)"
    description: "The heal reason of a heal event. Please click on the link for more
information."

ExprHealth:
    name: "Health"
    type: Expression
    pattern:
        - "[the] health of %living entities%"
        - "%living entities%'[s] health"
    description: "The health of a creature, e.g. a player, mob, villager, etc. The minimum value
is 0, and the maximum is the creature`s max health (e.g. 10 for players)."

ExprHiddenPlayers:
    name: "Hidden Players"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] hidden players (of|for) %players%"
        - "[(all [[of] the]|the)] players hidden (from|for|by) %players%"
    description: "The players hidden from a player that were hidden using the player visibility
effect."

ExprHighestSolidBlock:
    name: "Highest Solid Block"
    type: Expression
    pattern:
        - "highest [(solid|non-air)] block at %locations%"
    description: "Returns the highest solid block at the x and z coordinates of the world of a
given location."

ExprHostname:
    name: "Hostname"
    type: Expression
    pattern:
        - "[the] (host|domain)[ ][name]"
    description: "The hostname used by the connecting player to connect to the server in a
connect event."

ExprHotbarButton:
    name: "Hotbar Button"
    type: Expression
    pattern:
        - "[the] hotbar button"
    description: "The hotbar button clicked in an inventory click event."

ExprHotbarSlot:
    name: "Hotbar Slot"
    type: Expression
    pattern:
        - "[the] [the] [([currently] selected|current)] hotbar slot[s] [of %players%]"
        - "%players%'[s] [the] [([currently] selected|current)] hotbar slot[s]"
    description: "The currently selected hotbar slot. To retrieve its number use Slot Index
expression. Use future and past tense to grab the previous slot in an item
change event, see example."

ExprHoverList:
    name: "Hover List"
    type: Expression
    pattern:
        - "[the] [custom] [(player|server)] (hover|sample) ([message] list|message)"
        - "[the] [custom] player [(hover|sample)] list"
    description: "The list when you hover on the player counts of the server in the server list.
This can be changed using texts or players in a server list ping event only.
Adding players to the list means adding the name of the players. And note
that, for example if there are 5 online players (includes fake online count)
in the server and the hover list is set to 3 values, Minecraft will show '...
and 2 more ...' at end of the list."

ExprHumidity:
    name: "Humidity"
    type: Expression
    pattern:
        - "[the] humidit(y|ies) of %blocks%"
        - "%blocks%'[s] humidit(y|ies)"
    description: "Humidity of given blocks."

ExprIP:
    name: "IP"
    type: Expression
    pattern:
        - "IP[s][( |-)address[es]] of %players%"
        - "%players%'[s] IP[s][( |-)address[es]]"
        - "IP[( |-)address]"
    description: "The IP address of a player, or the connected player in a connect event, or the
pinger in a server list ping event."

ExprIndexOf:
    name: "Index Of"
    type: Expression
    pattern:
        - "[the] [(first|last)] index of %text% in %text%"
    description: "The first or last index of a character (or text) in a text, or ‐1 if it
doesn`t occur in the text. Indices range from 1 to the length of the text."

ExprIndices:
    name: "Indices of List"
    type: Expression
    pattern:
        - "[(the|all [[of] the])] (indexes|indices) of %~objects%"
        - "%~objects%'[s] (indexes|indices)"
        - "[sorted] (indices|indexes) of %~objects% in (ascending|descending) order"
        - "[sorted] %~objects%'[s] (indices|indexes) in (ascending|descending) order"
    description: "Returns all the indices of a list variable, optionally sorted by their values.
To sort the indices, all objects in the list must be comparable; Otherwise,
this expression will just return the unsorted indices."

ExprEvtInitiator:
    name: "Initiator Inventory"
    type: Expression
    pattern:
        - "[the] [event-]initiator[( |-)inventory]"
    description: "Returns the initiator inventory in an on inventory item move event."

ExprInventory:
    name: "Inventory"
    type: Expression
    pattern:
        - "[the] inventor(y|ies) of %inventoryholders/item types%"
        - "%inventoryholders/item types%'[s] inventor(y|ies)"
    description: "The inventory of a block or player. You can usually omit this expression and
can directly add or remove items to/from blocks or players."

ExprInventoryAction:
    name: "Inventory Action"
    type: Expression
    pattern:
        - "[the] inventory action"
    description: "The inventory action of an inventory event. Please click on the link for more
information."

ExprInventoryCloseReason:
    name: "Inventory Close Reason"
    type: Expression
    pattern:
        - "[the] inventory clos(e|ing) (reason|cause)"
    description: "The inventory close reason of an inventory close event."

ExprInventoryInfo:
    name: "Inventory Holder/Viewers/Rows/Slots"
    type: Expression
    pattern:
        - "(holder[s]|viewers|[amount of] rows|[amount of] slots) of %inventories%"
        - "%inventories%'[s] (holder[s]|viewers|[amount of] rows|[amount of] slots)"
    description: "Gets the amount of rows/slots, viewers and holder of an inventory.

NOTE: `Viewers` expression returns a list of players viewing the inventory.
Note that a player is considered to be viewing their own inventory and
internal crafting screen even when said inventory is not open."

ExprInventorySlot:
    name: "Inventory Slot"
    type: Expression
    pattern:
        - "[the] slot[s] %numbers% of %inventory%"
        - "%inventory%'[s] slot[s] %numbers%"
    description: "Represents a slot in an inventory. It can be used to change the item in an
inventory too."

ExprItem:
    name: "Item"
    type: Expression
    pattern:
        - "[the] item"
    description: "The item involved in an event, e.g. in a drop, dispense, pickup or craft
event."

ExprItemAmount:
    name: "Item Amount"
    type: Expression
    pattern:
        - "[the] item[[ ]stack] (amount|size|number) of %slots/item types/item stacks%"
        - "%slots/item types/item stacks%'[s] item[[ ]stack] (amount|size|number)"
    description: "The amount of an item stack."

ExprItemCooldown:
    name: "Item Cooldown"
    type: Expression
    pattern:
        - "[the] [item] cooldown of %item types% for %players%"
        - "%players%'[s] [item] cooldown for %item types%"
    description: "Change the cooldown of a specific material to a certain amount of Timespan."

ExprEnchantments:
    name: "Item Enchantments"
    type: Expression
    pattern:
        - "[the] enchantments of %item types%"
        - "%item types%'[s] enchantments"
    description: "All the enchantments an item type has."

ExprItemFrameSlot:
    name: "Item of an Entity"
    type: Expression
    pattern:
        - "[the] item of %entities%"
        - "%entities%'[s] item"
    description: "An item associated with an entity. For dropped item entities, it gets,
obviously, the item that was dropped. For item frames, the item inside the
frame is returned. For throwable projectiles (snowballs, enderpearls etc.),it
gets the displayed item. Other entities do not have items associated with
them."

ExprItemWithCustomModelData:
    name: "Item with CustomModelData"
    type: Expression
    pattern:
        - "%item type% with [custom] model data %number%"
    description: "Get an item with a CustomModelData tag. (Value is an integer between 0 and
99999999)"

ExprItemWithLore:
    name: "Item with Lore"
    type: Expression
    pattern:
        - "%item type% with [(a|the)] lore %texts%"
    description: "Returns the given item type with the specified lore added to it. If multiple
strings are passed, each of them will be a separate line in the lore."

ExprItems:
    name: "Items"
    type: Expression
    pattern:
        - "[all [[of] the]|the] block[[ ]type]s"
        - "every block[[ ]type]"
        - "[all [[of] the]|the|every] block[s] of type[s] %item types%"
        - "[all [[of] the]|the|every] item[s] of type[s] %item types%"
    description: "Items or blocks of a specific type, useful for looping."

ExprItemsIn:
    name: "Items In"
    type: Expression
    pattern:
        - "[all [[of] the]] items ([with]in|of|contained in|out of) [inventor(y|ies)]
%inventories%"
        - "all [[of] the] %item types% ([with]in|of|contained in|out of)
[inventor(y|ies)] %inventories%"
    description: "All items or specific type(s) of items in an inventory. Useful for looping or
storing in a list variable. Please note that the positions of the items in the
inventory are not saved, only their order is preserved."

ExprJoinSplit:
    name: "Join & Split"
    type: Expression
    pattern:
        - "(concat[enate]|join) %texts% [(with|using|by) [[the] delimiter] %text%]"
        - "split %text% (at|using|by) [[the] delimiter] %text% [with case sensitivity]"
        - "%text% split (at|using|by) [[the] delimiter] %text% [with case sensitivity]"
        - "regex split %text% (at|using|by) [[the] delimiter] %text%"
        - "regex %text% split (at|using|by) [[the] delimiter] %text%"
    description: "Joins several texts with a common delimiter (e.g. ', '), or splits a text into
multiple texts at a given delimiter."

ExprLanguage:
    name: "Language"
    type: Expression
    pattern:
        - "[the] [([currently] selected|current)] [game] (language|locale) [setting] of
%players%"
        - "%players%'[s] [([currently] selected|current)] [game] (language|locale)
[setting]"
    description: "Currently selected game language of a player. The value of the language is not
defined properly. The vanilla Minecraft client will use lowercase language /
country pairs separated by an underscore, but custom resource packs may use
any format they wish."

ExprLastAttacker:
    name: "Last Attacker"
    type: Expression
    pattern:
        - "[the] last attacker of %entity%"
        - "%entity%'[s] last attacker"
    description: "The last block or entity that attacked an entity."

ExprLastColor:
    name: "Last Color"
    type: Expression
    pattern:
        - "[the] last color[s] of %texts%"
        - "%texts%'[s] last color[s]"
    description: "The colors used at the end of a string. The colors of the returned string will
be formatted with their symbols."

ExprLastDamage:
    name: "Last Damage"
    type: Expression
    pattern:
        - "[the] last damage of %living entities%"
        - "%living entities%'[s] last damage"
    description: "The last damage that was done to an entity. Note that changing it doesn`t deal
more/less damage."

ExprLastDamageCause:
    name: "Last Damage Cause"
    type: Expression
    pattern:
        - "[the] last damage (cause|reason|type) of %living entities%"
        - "%living entities%'[s] last damage (cause|reason|type)"
    description: "Cause of last damage done to an entity"

ExprLastLoadedServerIcon:
    name: "Last Loaded Server Icon"
    type: Expression
    pattern:
        - "[the] [last[ly]] loaded server icon"
    description: "Returns the last loaded server icon with the load server icon effect."

ExprLastResourcePackResponse:
    name: "Last Resource Pack Response"
    type: Expression
    pattern:
        - "[the] [last] resource pack response[s] of %players%"
        - "%players%'[s] [last] resource pack response[s]"
    description: "Returns the last resource pack response received from a player."

ExprLastSpawnedEntity:
    name: "Last Spawned Entity"
    type: Expression
    pattern:
        - "[the] [last[ly]] (spawned|shot) %*entity type%"
        - "[the] [last[ly]] dropped (item)"
        - "[the] [last[ly]] (created|struck) (lightning)"
        - "[the] [last[ly]] (launched|deployed) (firework)"
    description: "Holds the entity that was spawned most recently with the spawn effect
(section), dropped with the drop effect, shot with the shoot effect or created
with the lightning effect. Please note that even though you can spawn multiple
mobs simultaneously (e.g. with `spawn 5 creepers`), only the last spawned mob
is saved and can be used. If you spawn an entity, shoot a projectile and drop
an item you can however access all them together."

ExprLastLoginTime:
    name: "Last/First Login Time"
    type: Expression
    pattern:
        - "[the] (last|first) login of %offline players%"
        - "%offline players%'[s] (last|first) login"
    description: "When a player last/first logged in the server. `last login` requires paper to
get the last login, otherwise it will get the last time they were seen on the
server."

ExprLeashHolder:
    name: "Leash Holder"
    type: Expression
    pattern:
        - "[the] leash holder[s] of %living entities%"
        - "%living entities%'[s] leash holder[s]"
    description: "The leash holder of a living entity."

ExprLength:
    name: "Length"
    type: Expression
    pattern:
        - "[the] length of %texts%"
        - "%texts%'[s] length"
    description: "The length of a text, in number of characters."

ExprLevel:
    name: "Level"
    type: Expression
    pattern:
        - "[the] level of %players%"
        - "%players%'[s] level"
    description: "The level of a player."

ExprLevelProgress:
    name: "Level Progress"
    type: Expression
    pattern:
        - "[the] level progress of %players%"
        - "%players%'[s] level progress"
    description: "The player`s progress in reaching the next level, this represents the
experience bar in the game. Please note that this value is between 0 and 1
(e.g. 0.5 = half experience bar). Changing this value can cause the player`s
level to change if the resulting level progess is negative or larger than 1,
e.g. `increase the player`s level progress by 0.5` will make the player gain a
level if their progress was more than 50%."

ExprLightLevel:
    name: "Light Level"
    type: Expression
    pattern:
        - "[(sky|sun|block)[ ]]light[ ]level [(of|%direction%) %location%]"
    description: "Gets the light level at a certain location which ranges from 0 to 15. It can
be separated into sunlight (15 = direct sunlight, 1‐14 = indirect) and block
light (torches, glowstone, etc.). The total light level of a block is the
maximum of the two different light types."

ExprPlugins:
    name: "Loaded Plugins"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] [loaded] plugins"
    description: "An expression to obtain a list of the names of the server`s loaded plugins."

ExprLocation:
    name: "Location"
    type: Expression
    pattern:
        - "[the] [event-](location|position)"
    description: "The location where an event happened (e.g. at an entity or block), or a
location relative to another (e.g. 1 meter above another location)."

ExprLocation-2:
    name: "Location"
    type: Expression
    pattern:
        - "[the] (location|position) %directions% [%location%]"
    description: "The location where an event happened (e.g. at an entity or block), or a
location relative to another (e.g. 1 meter above another location)."

ExprLocationOf:
    name: "Location"
    type: Expression
    pattern:
        - "(location|position) of %location%"
        - "%location%'[s] (location|position)"
    description: "The location of a block or entity. This not only represents the x, y and z
coordinates of the location but also includes the world and the direction an
entity is looking (e.g. teleporting to a saved location will make the
teleported entity face the same saved direction every time). Please note that
the location of an entity is at it`s feet, use head location to get the
location of the head."

ExprLocationAt:
    name: "Location At"
    type: Expression
    pattern:
        - "[the] (location|position) [at] [\\\\(][x[ ][=[ ]]]%number%, [y[ ][=[
]]]%number%, [and] [z[ ][=[ ]]]%number%[\\\\)] [[(in|of) [[the] world]] %world%]"
    description: "Allows to create a location from three coordinates and a world."

ExprLoopIteration:
    name: "Loop Iteration"
    type: Expression
    pattern:
        - "[the] loop(-| )(counter|iteration)[-%*number%]"
    description: "Returns the loop`s current iteration count (for both normal and while loops)."

ExprLoopValue:
    name: "Loop value"
    type: Expression
    pattern:
        - "[the] loop-<.+>"
    description: "Returns the currently looped value."

ExprLoot:
    name: "Loot"
    type: Expression
    pattern:
        - "[the] loot"
    description: "The loot that will be generated in a `loot generate` event."

ExprLore:
    name: "Lore"
    type: Expression
    pattern:
        - "[the] lore of %item stack/item type%"
        - "%item stack/item type%'[s] lore"
        - "[the] line %number% of [the] lore of %item stack/item type%"
        - "[the] line %number% of %item stack/item type%'[s] lore"
        - "[the] %number%(st|nd|rd|th) line of [the] lore of %item stack/item type%"
        - "[the] %number%(st|nd|rd|th) line of %item stack/item type%'[s] lore"
    description: "An item`s lore."

ExprMOTD:
    name: "MOTD"
    type: Expression
    pattern:
        - "[the] [(default)|(shown|displayed)] (MOTD|message of [the] day)"
    description: "The message of the day in the server list. This can be changed in a server
list ping event only. `default MOTD` returns the default MOTD always and can`t
be changed."

ExprMaxDurability:
    name: "Max Durability"
    type: Expression
    pattern:
        - "[the] max[imum] durabilit(y|ies) of %item stacks/slots%"
        - "%item stacks/slots%'[s] max[imum] durabilit(y|ies)"
    description: "The maximum durability of an item."

ExprMaxHealth:
    name: "Max Health"
    type: Expression
    pattern:
        - "[the] max[imum] health of %living entities%"
        - "%living entities%'[s] max[imum] health"
    description: "The maximum health of an entity, e.g. 10 for a player."

ExprMaxItemUseTime:
    name: "Max Item Use Time"
    type: Expression
    pattern:
        - "[the] max[imum] [item] us(e|age) (time|duration) of %item stacks%"
        - "%item stacks%'[s] max[imum] [item] us(e|age) (time|duration)"
    description: "Returns the max duration an item can be used for before the action completes.
E.g. it takes 1.6 seconds to drink a potion, or 1.4 seconds to load an
unenchanted crossbow. Some items, like bows and shields, do not have a limit
to their use. They will return 1 hour."

ExprMaxMinecartSpeed:
    name: "Max Minecart Speed"
    type: Expression
    pattern:
        - "[the] max[imum] minecart (speed|velocity) of %entities%"
        - "%entities%'[s] max[imum] minecart (speed|velocity)"
    description: "The maximum speed of a minecart."

ExprMaxPlayers:
    name: "Max Players"
    type: Expression
    pattern:
        - "[the] [(real|default)|(fake|shown|displayed)] max[imum] player[s]
[count|amount|number|size]"
        - "[the] [(real|default)|(fake|shown|displayed)] max[imum]
(count|amount|number|size) of players"
    description: "The count of max players. This can be changed in a server list ping event
only. `real max players` returns the real count of max players of the server
and can be modified on Paper 1.16 or later."

ExprMaxFreezeTicks:
    name: "Maximum Freeze Time"
    type: Expression
    pattern:
        - "[the] max[imum] freeze time of %entities%"
        - "%entities%'[s] max[imum] freeze time"
    description: "The maximum amount of time an entity can spend in powdered snow before taking
damage."

ExprMaxStack:
    name: "Maximum Stack Size"
    type: Expression
    pattern:
        - "[the] max[imum] stack[[ ]size] of %item type%"
        - "%item type%'[s] max[imum] stack[[ ]size]"
    description: "The maximum stack size of the specified material, e.g. 64 for torches, 16 for
buckets, and 1 for swords."

ExprMe:
    name: "Me"
    type: Expression
    pattern:
        - "me"
        - "my[self]"
    description: "A `me` expression that can be used in players` effect commands only."

ExprMendingRepairAmount:
    name: "Mending Repair Amount"
    type: Expression
    pattern:
        - "[the] [mending] repair amount"
    description: "The number of durability points an item is to be repaired in a mending event.
Modifying the repair amount will affect how much experience is given to the
player after mending."

ExprMessage:
    name: "Message"
    type: Expression
    pattern:
        - "[the] [chat( |-)]message"
        - "[the] (join|log[ ]in)( |-)message"
        - "[the] (quit|leave|log[ ]out|kick)( |-)message"
        - "[the] death( |-)message"
    description: "The (chat) message of a chat event, the join message of a join event, the quit
message of a quit event, or the death message on a death event. This
expression is mostly useful for being changed."

ExprMetadata:
    name: "Metadata"
    type: Expression
    pattern:
        - "metadata [(value|tag)[s]] %texts% of %metadata holders%"
        - "%metadata holders%'[s] metadata [(value|tag)[s]] %text%"
    description: "Metadata is a way to store temporary data on entities, blocks and more that
disappears after a server restart."

ExprMiddleOfLocation:
    name: "Middle of Location"
    type: Expression
    pattern:
        - "[the] (middle|center) [point] of %location%"
        - "%location%'[s] (middle|center) [point]"
    description: "Returns the middle/center of a location. In other words, returns the middle of
the X, Z coordinates and the floor value of the Y coordinate of a location."

ExprMinecartDerailedFlyingVelocity:
    name: "Minecart Derailed / Flying Velocity"
    type: Expression
    pattern:
        - "[the] [minecart] (derailed|flying) velocity of %entities%"
        - "%entities%'[s] [minecart] (derailed|flying) velocity"
    description: "The velocity of a minecart as soon as it has been derailed or as soon as it
starts flying."

ExprBalance:
    name: "Money"
    type: Expression
    pattern:
        - "[the] (money|balance|[bank] account) of %offline players%"
        - "%offline players%'[s] (money|balance|[bank] account)"
    description: "How much virtual money a player has (can be changed)."

ExprMoonPhase:
    name: "Moon Phase"
    type: Expression
    pattern:
        - "[the] (lunar|moon) phase[s] of %worlds%"
        - "%worlds%'[s] (lunar|moon) phase[s]"
    description: "The current moon phase of a world."

ExprPushedBlocks:
    name: "Moved blocks"
    type: Expression
    pattern:
        - "[the] moved blocks"
    description: "Blocks which are moved in a piston event. Cannot be used outside of piston
events."

ExprName:
    name: "Name / Display Name / Tab List Name"
    type: Expression
    pattern:
        - "[the] (name[s]|(display|nick|chat|custom)[ ]name[s]) of %offline
players/entities/blocks/item types/inventories/slots/worlds/gamerules%"
        - "%offline players/entities/blocks/item
types/inventories/slots/worlds/gamerules%'[s]
(name[s]|(display|nick|chat|custom)[ ]name[s])"
    description: "Represents the Minecraft account, display or tab list name of a player, or the
custom name of an item, entity, block, inventory, gamerule or world.

    
  *  **Players**                      
    *  **Name:** The Minecraft account name of the player. Can`t be changed, but `display name` can be changed.
            
    *  **Display Name:** The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).
             
    
  *  **Entities**                      
    *  **Name:** The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non‐living entities, the name will not be visible at all. To prevent this, use `display name`.
            
    *  **Display Name:** The custom name of the entity. Can be changed, which will also enable _custom name visibility_ of the entity so name tag of the entity will be visible always.
             
    
  *  **Items**                      
    *  **Name and Display Name:** The _custom_ name of the item (not the Minecraft locale name). Can be changed.
             
    
  *  **Inventories**                      
    *  **Name and Display Name:** The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.
             
    
  *  **Gamerules (1.13+)**                      
    *  **Name:** The name of the gamerule. Cannot be changed.
             
    
  *  **Worlds**                      
    *  **Name:** The name of the world. Cannot be changed.
             "

ExprName-2:
    name: "Name / Display Name / Tab List Name"
    type: Expression
    pattern:
        - "[the] ((player|tab)[ ]list name[s]) of %players%"
        - "%players%'[s] ((player|tab)[ ]list name[s])"
    description: "Represents the Minecraft account, display or tab list name of a player, or the
custom name of an item, entity, block, inventory, gamerule or world.

    
  *  **Players**                      
    *  **Name:** The Minecraft account name of the player. Can`t be changed, but `display name` can be changed.
            
    *  **Display Name:** The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).
             
    
  *  **Entities**                      
    *  **Name:** The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non‐living entities, the name will not be visible at all. To prevent this, use `display name`.
            
    *  **Display Name:** The custom name of the entity. Can be changed, which will also enable _custom name visibility_ of the entity so name tag of the entity will be visible always.
             
    
  *  **Items**                      
    *  **Name and Display Name:** The _custom_ name of the item (not the Minecraft locale name). Can be changed.
             
    
  *  **Inventories**                      
    *  **Name and Display Name:** The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.
             
    
  *  **Gamerules (1.13+)**                      
    *  **Name:** The name of the gamerule. Cannot be changed.
             
    
  *  **Worlds**                      
    *  **Name:** The name of the world. Cannot be changed.
             "

ExprNamed:
    name: "Named Item/Inventory"
    type: Expression
    pattern:
        - "%item type/inventory type% (named|with name[s]) %text%"
    description: "Directly names an item/inventory, useful for defining a named item/inventory
in a script. If you want to (re)name existing items/inventories you can either
use this expression or use `set name of <item/inventory> to <text>`."

ExprNearestEntity:
    name: "Nearest Entity"
    type: Expression
    pattern:
        - "[the] nearest %*entity types% [[relative] to %entity/location%]"
        - "[the] %*entity types% nearest [to %entity/location%]"
    description: "Gets the entity nearest to a location or another entity."

LitNewLine:
    name: "New Line"
    type: Expression
    pattern:
        - "n[ew]l[ine]"
        - "line[ ]break"
    description: "Returns a line break separator."

ExprNoDamageTicks:
    name: "No Damage Ticks"
    type: Expression
    pattern:
        - "[the] (invulnerability|no damage) tick[s] of %living entities%"
        - "%living entities%'[s] (invulnerability|no damage) tick[s]"
    description: "The number of ticks that an entity is invulnerable to damage for."

ExprNow:
    name: "Now"
    type: Expression
    pattern:
        - "now"
    description: "The current system time of the server. Use time to get the Minecraft time of a
world."

ExprNumberOfCharacters:
    name: "Number of Characters"
    type: Expression
    pattern:
        - "number of upper[ ]case char(acters|s) in %text%"
        - "number of lower[ ]case char(acters|s) in %text%"
        - "number of digit char(acters|s) in %text%"
    description: "The number of uppercase, lowercase, or digit characters in a string."

ExprNumbers:
    name: "Numbers"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] (numbers|integers|decimals) (between|from) %number%
(and|to) %number%"
    description: "All numbers between two given numbers, useful for looping. Use `numbers` if
your start is not an integer and you want to keep the fractional part of the
start number constant, or use `integers` if you only want to loop integers.
You may also use `decimals` if you want to use the decimal precision of the
start number. You may want to use the `times` expression instead, for instance
`loop 5 times:`"

ExprOfflinePlayers:
    name: "Offline players"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] offline[ ]players"
    description: "All players that have ever joined the server. This includes the players
currently online."

ExprOnlinePlayersCount:
    name: "Online Player Count"
    type: Expression
    pattern:
        - "[the] [((real|default)|(fake|shown|displayed))] [online] player
(count|amount|number)"
        - "[the] [((real|default)|(fake|shown|displayed))] (count|amount|number|size) of
online players"
    description: "The amount of online players. This can be changed in a server list ping event
only to show fake online player amount. `real online player count` always
return the real count of online players and can`t be changed."

ExprOpenedInventory:
    name: "Opened Inventory"
    type: Expression
    pattern:
        - "[the] (current|open|top) inventory [of %players%]"
        - "%players%'[s] (current|open|top) inventory"
    description: "Return the currently opened inventory of a player. If no inventory is open, it
returns the own player`s crafting inventory."

ExprParse:
    name: "Parse"
    type: Expression
    pattern:
        - "%text% parsed as (%*type%|'<.*>')"
    description: "Parses text as a given type, or as a given pattern. This expression can be
used in two different ways: One which parses the entire text as a single
instance of a type, e.g. as a number, and one that parses the text according
to a pattern. If the given text could not be parsed, this expression will
return nothing and the parse error will be set if some information is
available. Some notes about parsing with a pattern: ‐ The pattern must be a
Skript pattern, e.g. percent signs are used to define where to parse which
types, e.g. put a %number% or %items% in the pattern if you expect a number or
some items there. ‐ You _have to_ save the expression`s value in a list
variable, e.g. `set {parsed::*} to message parsed as '...'`. ‐ The list
variable will contain the parsed values from all %types% in the pattern in
order. If a type was plural, e.g. %items%, the variable`s value at the
respective index will be a list variable, e.g. the values will be stored in
{parsed::1::*}, not {parsed::1}."

ExprParseError:
    name: "Parse Error"
    type: Expression
    pattern:
        - "[the] [last] [parse] error"
    description: "The error which caused the last parse operation to fail, which might not be
set if a pattern was used and the pattern didn`t match the provided text at
all."

ExprPassenger:
    name: "Passenger"
    type: Expression
    pattern:
        - "[the] passenger[s] of %entities%"
        - "%entities%'[s] passenger[s]"
    description: "The passenger of a vehicle, or the rider of a mob. For 1.11.2 and above, it
returns a list of passengers and you can use all changers in it. See also:
vehicle"

ExprPercent:
    name: "Percent of"
    type: Expression
    pattern:
        - "%number%(\\%| percent) of %numbers%"
    description: "Returns a percentage of one or more numbers."

LitPi:
    name: "Pi"
    type: Expression
    pattern:
        - "(pi|π)"
    description: "Returns the mathematical constant pi. (approx. 3.1415926535)"

ExprPickupDelay:
    name: "Pickup Delay"
    type: Expression
    pattern:
        - "[the] pick[ ]up delay of %entities%"
        - "%entities%'[s] pick[ ]up delay"
    description: "The amount of time before a dropped item can be picked up by an entity."

ExprPing:
    name: "Ping"
    type: Expression
    pattern:
        - "[the] ping of %players%"
        - "%players%'[s] ping"
    description: "Pings of players, as Minecraft server knows them. Note that they will almost
certainly be different from the ones you`d get from using ICMP echo requests.
This expression is only supported on some server software (PaperSpigot)."

ExprPlain:
    name: "Plain Item"
    type: Expression
    pattern:
        - "[a[n]] (plain|unmodified) %item type%"
    description: "A plain item is an item with no modifications. It can be used to convert items
to their default state or to match with other default items."

ExprPlayerlistHeaderFooter:
    name: "Player List Header and Footer"
    type: Expression
    pattern:
        - "[the] (player|tab)[ ]list (header|footer) [(text|message)] of %players%"
        - "%players%'[s] (player|tab)[ ]list (header|footer) [(text|message)]"
    description: "The message above and below the player list in the tab menu."

ExprPlayerProtocolVersion:
    name: "Player Protocol Version"
    type: Expression
    pattern:
        - "[the] protocol version of %players%"
        - "%players%'[s] protocol version"
    description: "Player`s protocol version. For more information and list of protocol versions
visit wiki.vg."

ExprSkull:
    name: "Player Skull"
    type: Expression
    pattern:
        - "[the] (head|skull) of %offline players%"
        - "%offline players%'[s] (head|skull)"
    description: "Gets a skull item representing a player. Skulls for other entities are
provided by the aliases."

ExprPlayerWeather:
    name: "Player Weather"
    type: Expression
    pattern:
        - "[the] [(client|custom)] weather of %players%"
        - "%players%'[s] [(client|custom)] weather"
    description: "The weather for a player."

ExprPortal:
    name: "Portal"
    type: Expression
    pattern:
        - "[the] portal['s] blocks"
        - "[the] blocks of [the] portal"
    description: "The blocks associated with a portal in the portal creation event."

ExprPortalCooldown:
    name: "Portal Cooldown"
    type: Expression
    pattern:
        - "[the] portal cooldown of %entities%"
        - "%entities%'[s] portal cooldown"
    description: "The amount of time before an entity can use a portal. By default, it is 15
seconds after exiting a nether portal or end gateway. Players in
survival/adventure get a cooldown of 0.5 seconds, while those in creative get
no cooldown. Resetting will set the cooldown back to the default 15 seconds
for non‐player entities and 0.5 seconds for players."

ExprPotionEffect:
    name: "Potion Effect"
    type: Expression
    pattern:
        - "[new] potion effect of %potion% [potion] [[[of] tier] %number%] [without
particles] [for %time span%]"
        - "[new] ambient potion effect of %potion% [potion] [[[of] tier] %number%]
[without particles] [for %time span%]"
    description: "Create a new potion effect to apply to an entity or item type. Do note that
when applying potion effects to tipped arrows/lingering potions, Minecraft
reduces the timespan."

ExprPotionEffectTier:
    name: "Potion Effect Tier"
    type: Expression
    pattern:
        - "[the] [potion] (tier|amplifier|level) of %potions% (of|for|on) %living
entities%"
    description: "An expression to obtain the amplifier of a potion effect applied to an entity."

ExprPotionEffects:
    name: "Potion Effects"
    type: Expression
    pattern:
        - "[the] [(all [[of] the]|the)] [active] potion effects of %living entities/item
types%"
        - "%living entities/item types%'[s] [(all [[of] the]|the)] [active] potion
effects"
    description: "Represents the active potion effects of entities and itemtypes. You can clear
all potion effects of an entity/itemtype and add/remove a potion effect/type
to/from an entity/itemtype. Do note you will not be able to clear the base
potion effects of a potion item. In that case, just set the item to a water
bottle. When adding a potion effect type (rather than a potion effect), it
will default to 15 seconds with tier 1."

ExprPrefixSuffix:
    name: "Prefix/Suffix"
    type: Expression
    pattern:
        - "[the] [chat] (prefix|suffix) of %players%"
        - "%players%'[s] [chat] (prefix|suffix)"
    description: "The prefix or suffix as defined in the server`s chat plugin."

ExprProjectileCriticalState:
    name: "Projectile Critical State"
    type: Expression
    pattern:
        - "[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%"
        - "%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)"
    description: "A projectile`s critical state. The only currently accepted projectiles are
arrows and tridents."

ExprProtocolVersion:
    name: "Protocol Version"
    type: Expression
    pattern:
        - "[the] [server] [(sent|required|fake)] protocol version [number]"
    description: "The protocol version that will be sent as the protocol version of the server
in a server list ping event. For more information and list of protocol
versions visit wiki.vg. If this protocol version doesn`t match with the
protocol version of the client, the client will see the version string. But
please note that, this expression has no visual effect over the version
string. For example if the server uses PaperSpigot 1.12.2, and you make the
protocol version 107 (1.9), the version string will not be 'Paper 1.9', it
will still be 'Paper 1.12.2'. But then you can customize the version string as
you wish. Also if the protocol version of the player is higher than protocol
version of the server, it will say 'Server out of date!', and if vice‐versa
'Client out of date!' when you hover on the ping bars.

This can be set in a server list ping event only (increase and decrease
effects cannot be used because that wouldn`t make sense)."

ExprQuitReason:
    name: "Quit Reason"
    type: Expression
    pattern:
        - "[the] (quit|disconnect) (cause|reason)"
    description: "The quit reason as to why a player disconnected in a quit event."

ExprRandom:
    name: "Random"
    type: Expression
    pattern:
        - "[a] random %*type% [out] of %objects%"
    description: "Gets a random item out of a set, e.g. a random player out of all players
online."

ExprRandomCharacter:
    name: "Random Character"
    type: Expression
    pattern:
        - "[a|%number%] random [alphanumeric] character[s] (from|between) %text% (to|and)
%text%"
    description: "One or more random characters between two given characters. Use `alphanumeric`
if you want only alphanumeric characters. This expression uses the Unicode
numerical code of a character to determine which characters are between the
two given characters. If strings of more than one character are given, only
the first character of each is used."

ExprRandomNumber:
    name: "Random Number"
    type: Expression
    pattern:
        - "[a] random (integer|number) (from|between) %number% (to|and) %number%"
    description: "A random number or integer between two given numbers. Use `number` if you want
any number with decimal parts, or use use `integer` if you only want whole
numbers. Please note that the order of the numbers doesn`t matter, i.e.
`random number between 2 and 1` will work as well as `random number between 1
and 2`."

ExprRandomUUID:
    name: "Random UUID"
    type: Expression
    pattern:
        - "[a] random uuid"
    description: "Returns a random UUID."

ExprRawName:
    name: "Raw Name"
    type: Expression
    pattern:
        - "(raw|minecraft|vanilla) name[s] of %item types%"
    description: "The raw Minecraft material name of the given item. Note that this is not
guaranteed to give same results on all servers."

ExprRawString:
    name: "Raw String"
    type: Expression
    pattern:
        - "raw %texts%"
    description: "Returns the string without formatting (colors etc.) and without stripping them
from it, e.g. `raw '&aHello; There!'` would output `&aHello; There!`"

ExprReadiedArrow:
    name: "Readied Arrow/Bow"
    type: Expression
    pattern:
        - "[the] (readied|selected|drawn) (arrow|bow)"
    description: "The bow or arrow in a Ready Arrow event."

ExprRedstoneBlockPower:
    name: "Redstone Block Power"
    type: Expression
    pattern:
        - "[the] redstone power of %blocks%"
        - "%blocks%'[s] redstone power"
    description: "Power of a redstone block"

ExprRegion:
    name: "Region"
    type: Expression
    pattern:
        - "[the] [event-]region"
    description: "The region involved in an event. This expression requires a supported regions
plugin to be installed."

ExprMembersOfRegion:
    name: "Region Members & Owners"
    type: Expression
    pattern:
        - "[(all|the)] (members|owner[s]) of [[the] region[s]] %regions%"
        - "[[the] region[s]] %regions%'[s] (members|owner[s])"
    description: "A list of members or owners of a region. This expression requires a supported
regions plugin to be installed."

ExprRegionsAt:
    name: "Regions At"
    type: Expression
    pattern:
        - "[the] region[(s)] %direction% %locations%"
    description: "All regions at a particular location. This expression requires a supported
regions plugin to be installed."

ExprRemainingAir:
    name: "Remaining Air"
    type: Expression
    pattern:
        - "[the] remaining air of %living entities%"
        - "%living entities%'[s] remaining air"
    description: "How much time a player has left underwater before starting to drown."

ExprRepeat:
    name: "Repeat String"
    type: Expression
    pattern:
        - "%texts% repeated %integer% time[s]"
    description: "Repeats inputted strings a given amount of times."

ExprCharges:
    name: "Respawn Anchor Charges"
    type: Expression
    pattern:
        - "[the] [max[imum]] charge[s] of %blocks%"
        - "%blocks%'[s] [max[imum]] charge[s]"
    description: "The charges of a respawn anchor."

ExprRespawnLocation:
    name: "Respawn location"
    type: Expression
    pattern:
        - "[the] respawn location"
    description: "The location that a player should respawn at. This is used within the respawn
event."

ExprReversedList:
    name: "Reversed List"
    type: Expression
    pattern:
        - "reversed %objects%"
    description: "Reverses given list."

ExprRound:
    name: "Rounding"
    type: Expression
    pattern:
        - "[(a|the)] round[ed] down %number%"
        - "[(a|the)] round[ed] %number%"
        - "[(a|the)] round[ed] up %number%"
    description: "Rounds numbers normally, up (ceiling) or down (floor) respectively."

ExprSaturation:
    name: "Saturation"
    type: Expression
    pattern:
        - "[the] saturation of %players%"
        - "%players%'[s] saturation"
    description: "The saturation of a player. If used in a player event, it can be omitted and
will default to event‐player."

ExprScoreboardTags:
    name: "Scoreboard Tags"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] scoreboard tags of %entities%"
        - "%entities%'[s] scoreboard tags"
    description: "Scoreboard tags are simple list of texts stored directly in the data of an
entity. So this is a Minecraft related thing, not Bukkit, so the tags will not
get removed when the server stops. You can visit visit Minecraft Wiki for more
info. This is changeable and valid for any type of entity. Also you can use
use the Has Scoreboard Tag condition to check whether an entity has the given
tags.

Requires Minecraft 1.11+ (actually added in 1.9 to the game, but added in 1.11
to Spigot)."

ExprScript:
    name: "Script Name"
    type: Expression
    pattern:
        - "[the] script[['s] name]"
        - "name of [the] script"
    description: "Holds the current script`s name (the file name without `.sk`)."

ExprSeaLevel:
    name: "Sea Level"
    type: Expression
    pattern:
        - "[the] sea level of %worlds%"
        - "%worlds%'[s] sea level"
    description: "Gets the sea level of a world."

ExprSeaPickles:
    name: "Sea Pickles"
    type: Expression
    pattern:
        - "[the] [(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%"
        - "%blocks%'[s] [(min|max)[imum]] [sea] pickle(s| (count|amount))"
    description: "An expression to obtain or modify data relating to the pickles of a sea pickle
block."

ExprSentCommands:
    name: "Sent Command List"
    type: Expression
    pattern:
        - "[the] [sent] [server] command[s] list"
    description: "The commands that will be sent to the player in a send commands to player
event. Modifications will affect what commands show up for the player to tab
complete. They will not affect what commands the player can actually run.
Adding new commands to the list is illegal behavior and will be ignored."

ExprServerIcon:
    name: "Server Icon"
    type: Expression
    pattern:
        - "[the] [((default)|(shown|sent))] [server] icon"
    description: "Icon of the server in the server list. Can be set to an icon that loaded using
the load server icon effect, or can be reset to the default icon in a server
list ping. `default server icon` returns the default server icon
(server‐icon.png) always and cannot be changed."

ExprSets:
    name: "Sets"
    type: Expression
    pattern:
        - "[all [[of] the]|the|every] %*type%"
    description: "Returns a list of all the values of a type. Useful for looping."

ExprShooter:
    name: "Shooter"
    type: Expression
    pattern:
        - "[the] shooter [of %projectile%]"
    description: "The shooter of a projectile."

ExprShuffledList:
    name: "Shuffled List"
    type: Expression
    pattern:
        - "shuffled %objects%"
    description: "Shuffles given list randomly. This is done by replacing indices by random
numbers in resulting list."

ExprSignText:
    name: "Sign Text"
    type: Expression
    pattern:
        - "[the] line %number% [of %block%]"
        - "[the] (1st|first|2nd|second|3rd|third|4th|fourth) line [of %block%]"
    description: "A line of text on a sign. Can be changed, but remember that there is a 16
character limit per line (including color codes that use 2 characters each)."

ExprSlotIndex:
    name: "Slot Index"
    type: Expression
    pattern:
        - "[the] [(raw|unique)] index of %slots%"
        - "%slots%'[s] [(raw|unique)] index"
    description: "Index of an an inventory slot. Other types of slots may or may not have
indices. Note that comparing slots with numbers is also possible; if index of
slot is same as the number, comparisonsucceeds. This expression is mainly for
the cases where you must for some reason save the slot numbers.

Raw index of slot is unique for the view, see Minecraft Wiki"

ExprSortedList:
    name: "Sorted List"
    type: Expression
    pattern:
        - "sorted %objects%"
    description: "Sorts given list in natural order. All objects in list must be comparable; if
they`re not, this expression will return nothing."

ExprSourceBlock:
    name: "Source Block"
    type: Expression
    pattern:
        - "[the] source block"
    description: "The source block in a spread event."

ExprSpawn:
    name: "Spawn"
    type: Expression
    pattern:
        - "[the] spawn[s] [(point|location)[s]] [of %worlds%]"
        - "%worlds%'[s] spawn[s] [(point|location)[s]]"
    description: "The spawn point of a world."

ExprSpawnReason:
    name: "Spawn Reason"
    type: Expression
    pattern:
        - "[the] spawn[ing] reason"
    description: "The spawn reason in a spawn event."

ExprSpawnerType:
    name: "Spawner Type"
    type: Expression
    pattern:
        - "[the] (spawner|entity|creature) type[s] of %blocks%"
        - "%blocks%'[s] (spawner|entity|creature) type[s]"
    description: "Retrieves, sets, or resets the spawner`s entity type"

ExprSpecialNumber:
    name: "Special Number"
    type: Expression
    pattern:
        - "(NaN|[(-|minus)](infinity|∞)) value"
        - "value of (NaN|[(-|minus)](infinity|∞))"
    description: "Special number values, namely NaN, Infinity and ‐Infinity"

ExprSpectatorTarget:
    name: "Spectator Target"
    type: Expression
    pattern:
        - "spectator target [of %players%]"
        - "%players%'[s] spectator target"
    description: "Grabs the spectator target entity of the players."

ExprSpeed:
    name: "Speed"
    type: Expression
    pattern:
        - "[the] (walk[ing]|fl(y[ing]|ight))[( |-)]speed of %players%"
        - "%players%'[s] (walk[ing]|fl(y[ing]|ight))[( |-)]speed"
    description: "A player`s walking or flying speed. Both can be changed, but values must be
between ‐1 and 1 (excessive values will be changed to ‐1 or 1 respectively).
Negative values reverse directions. Please note that changing a player`s speed
will change their FOV just like potions do."

ExprSubstring:
    name: "Substring"
    type: Expression
    pattern:
        - "[the] (part|sub[ ](text|string)) of %texts% (between|from)
[ind(ex|ices)|character[s]] %number% (and|to) [(index|character)] %number%"
        - "[the] (first|last) [%number%] character[s] of %texts%"
        - "[the] %number% (first|last) characters of %texts%"
        - "[the] character[s] at [(index|position|indexes|indices|positions)] %numbers%
(in|of) %texts%"
    description: "Extracts part of a text. You can either get the first <x> characters, the last
<x> characters, the character at index <x>, or the characters between indices
<x> and <y>. The indices <x> and <y> should be between 1 and the length of the
text (other values will be fit into this range)."

ExprTPS:
    name: "TPS (ticks per second)"
    type: Expression
    pattern:
        - "tps from [the] last ([1] minute|1[ ]m[inute])"
        - "tps from [the] last 5[ ]m[inutes]"
        - "tps from [the] last 15[ ]m[inutes]"
        - "[the] tps"
    description: "Returns the 3 most recent TPS readings, like the /tps command. This expression
is only supported on some server software (PaperSpigot)."

ExprTamer:
    name: "Tamer"
    type: Expression
    pattern:
        - "[the] tamer"
    description: "The tamer of an entity. Can only be used in entity tame events. You can use
`event‐entity` to refer tamed entity itself."

ExprTarget:
    name: "Target"
    type: Expression
    pattern:
        - "[the] target[[ed] %*entity type%] [of %living entities%] [ignoring blocks]
[[with|at] ray[ ]size %number%]"
        - "%living entities%'[s] target[[ed] %*entity type%] [ignoring blocks] [[with|at]
ray[ ]size %number%]"
    description: "For players this is the entity at the crosshair. For mobs and experience orbs
this is the entity they are attacking/following (if any). Display entities
have a hit box of 0, so you should use `target display` to collect Display
entities May grab entities in unloaded chunks."

ExprTargetedBlock:
    name: "Targeted Block"
    type: Expression
    pattern:
        - "[the] target[ed] block[s] [of %players%]"
        - "%players%'[s] target[ed] block[s]"
        - "[the] actual[ly] target[ed] block[s] [of %players%]"
        - "%players%'[s] actual[ly] target[ed] block[s]"
    description: "The block at the crosshair. This regards all blocks that are not air as fully
solid, e.g. torches will be like a solid stone block for this expression."

ExprTeleportCause:
    name: "Teleport Cause"
    type: Expression
    pattern:
        - "[the] teleport (cause|reason|type)"
    description: "The teleport cause within a player teleport event."

ExprTemperature:
    name: "Temperature"
    type: Expression
    pattern:
        - "[the] temperature[s] of %blocks%"
        - "%blocks%'[s] temperature[s]"
    description: "Temperature at given block."

ExprTernary:
    name: "Ternary"
    type: Expression
    pattern:
        - "%objects% if <.+>[,] (otherwise|else) %objects%"
    description: "A shorthand expression for returning something based on a condition."

ExprEgg:
    name: "The Egg"
    type: Expression
    pattern:
        - "[the] [thrown] egg"
    description: "The egg thrown in a Player Egg Throw event."

ExprTime:
    name: "Time"
    type: Expression
    pattern:
        - "[the] time[s] [([with]in|of) %worlds%]"
        - "%worlds%'[s] time[s]"
    description: "The time of a world."

ExprTimePlayed:
    name: "Time Played"
    type: Expression
    pattern:
        - "[the] time played of %offline players%"
        - "%offline players%'[s] time played"
    description: "The amount of time a player has played for on the server. This info is stored
in the player`s statistics in the main world`s data folder. Changing this will
also change the player`s stats which can be views in the client`s statistics
menu. Using this expression on offline players on Minecraft 1.14 and below
will return nothing `<none>`."

ExprTimeSince:
    name: "Time Since"
    type: Expression
    pattern:
        - "[the] time since %dates%"
    description: "The time that has passed since a date. If the given date is in the future, a
value will not be returned."

ExprTool:
    name: "Tool"
    type: Expression
    pattern:
        - "[the] ((tool|held item|weapon)|(off[ ]hand (tool|item))) [of %living
entities%]"
        - "%living entities%'[s] ((tool|held item|weapon)|(off[ ]hand (tool|item)))"
    description: "The item an entity is holding in their main or off hand."

ExprTotalExperience:
    name: "Total Experience"
    type: Expression
    pattern:
        - "[the] [total] experience of %entities%"
        - "%entities%'[s] [total] experience"
    description: "The total experience, in points, of players or experience orbs. Adding to a
player`s experience will trigger Mending, but setting their experience will
not."

ExprTransformReason:
    name: "Transform Reason"
    type: Expression
    pattern:
        - "[the] transform[ing] (cause|reason|type)"
    description: "The transform reason within an entity entity transform event."

ExprTypeOf:
    name: "Type of"
    type: Expression
    pattern:
        - "[the] type of %entity types/item types/inventories/potion effects/block datas%"
        - "%entity types/item types/inventories/potion effects/block datas%'[s] type"
    description: "Type of a block, item, entity, inventory or potion effect. Types of items,
blocks and block datas are item types similar to them but have amounts of one,
no display names and, on Minecraft 1.13 and newer versions, are undamaged.
Types of entities and inventories are entity types and inventory types known
to Skript. Types of potion effects are potion effect types."

ExprUUID:
    name: "UUID"
    type: Expression
    pattern:
        - "[the] UUID of %offline players/worlds/entities%"
        - "%offline players/worlds/entities%'[s] UUID"
    description: "The UUID of a player, entity or world. In the future there will be an option
to use a player`s UUID instead of the name in variable names (i.e. when
%player% is used), but for now this can be used. _Please note that this
expression does not work for offline players if you are under 1.8!_"

ExprUnbreakable:
    name: "Unbreakable Items"
    type: Expression
    pattern:
        - "unbreakable %item types%"
    description: "Creates unbreakable copies of given items."

ExprUnixDate:
    name: "Unix Date"
    type: Expression
    pattern:
        - "[the] unix date of %numbers%"
        - "%numbers%'[s] unix date"
    description: "Converts given Unix timestamp to a date. The Unix timespan represents the
number of seconds elapsed since 1 January 1970."

ExprUnixTicks:
    name: "Unix Timestamp"
    type: Expression
    pattern:
        - "[the] unix timestamp of %dates%"
        - "%dates%'[s] unix timestamp"
    description: "Converts given date to Unix timestamp. This is roughly how many seconds have
elapsed since 1 January 1970."

ExprValueWithin:
    name: "Value Within"
    type: Expression
    pattern:
        - "[the] (%*type%|value[s]) (within|in) %~objects%"
    description: "Gets the value within objects. Usually used with variables to get the value
they store rather than the variable itself, or with lists to get the values of
a type."

ExprVectorAngleBetween:
    name: "Vectors - Angle Between"
    type: Expression
    pattern:
        - "[the] angle between [[the] vectors] %vector% and %vector%"
    description: "Gets the angle between two vectors."

ExprVectorArithmetic:
    name: "Vectors - Arithmetic"
    type: Expression
    pattern:
        - "%vector%[ ]++[ ]%vector%"
        - "%vector%[ ]--[ ]%vector%"
        - "%vector%[ ]**[ ]%vector%"
        - "%vector%[ ]//[ ]%vector%"
    description: "Arithmetic expressions for vectors."

ExprLocationFromVector:
    name: "Vectors - Create Location from Vector"
    type: Expression
    pattern:
        - "%vector% [to location] in %world%"
        - "location (from|of) %vector% in %world%"
        - "%vector% [to location] in %world% with yaw %number% and pitch %number%"
        - "location (from|of) %vector% in %world% with yaw %number% and pitch %number%"
    description: "Creates a location from a vector in a world."

ExprVectorFromDirection:
    name: "Vectors - Create from Direction"
    type: Expression
    pattern:
        - "vector[s] [from] %directions%"
        - "%directions% vector[s]"
    description: "Creates vectors from given directions. Relative directions are relative to the
origin, (0, 0, 0). Therefore, the vector from the direction `forwards` is (0,
0, 1)."

ExprVectorFromXYZ:
    name: "Vectors - Create from XYZ"
    type: Expression
    pattern:
        - "[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%"
    description: "Creates a vector from x, y and z values."

ExprVectorCrossProduct:
    name: "Vectors - Cross Product"
    type: Expression
    pattern:
        - "%vector% cross %vector%"
    description: "Gets the cross product between two vectors."

ExprVectorCylindrical:
    name: "Vectors - Cylindrical Shape"
    type: Expression
    pattern:
        - "[a] [new] cylindrical vector [(from|with)] [radius] %number%, [yaw]
%number%(,| and) [height] %number%"
    description: "Forms a `cylindrical shaped` vector using yaw to manipulate the current point."

ExprVectorDotProduct:
    name: "Vectors - Dot Product"
    type: Expression
    pattern:
        - "%vector% dot %vector%"
    description: "Gets the dot product between two vectors."

ExprVectorLength:
    name: "Vectors - Length"
    type: Expression
    pattern:
        - "[the] (vector|standard|normal) length[s] of %vectors%"
        - "%vectors%'[s] (vector|standard|normal) length[s]"
    description: "Gets or sets the length of a vector."

ExprLocationVectorOffset:
    name: "Vectors - Location Vector Offset"
    type: Expression
    pattern:
        - "%location% offset by [[the] vectors] %vectors%"
        - "%location%[ ]~[~][ ]%vectors%"
    description: "Returns the location offset by vectors."

ExprVectorNormalize:
    name: "Vectors - Normalized"
    type: Expression
    pattern:
        - "normalize[d] %vector%"
        - "%vector% normalized"
    description: "Returns the same vector but with length 1."

ExprVectorRandom:
    name: "Vectors - Random Vector"
    type: Expression
    pattern:
        - "[a] random vector"
    description: "Creates a random unit vector."

ExprVectorSpherical:
    name: "Vectors - Spherical Shape"
    type: Expression
    pattern:
        - "[new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,| and)
[pitch] %number%"
    description: "Forms a `spherical shaped` vector using yaw and pitch to manipulate the
current point."

ExprVectorSquaredLength:
    name: "Vectors - Squared Length"
    type: Expression
    pattern:
        - "[the] squared length[s] of %vectors%"
        - "%vectors%'[s] squared length[s]"
    description: "Gets the squared length of a vector."

ExprVectorBetweenLocations:
    name: "Vectors - Vector Between Locations"
    type: Expression
    pattern:
        - "[the] vector (from|between) %location% (to|and) %location%"
    description: "Creates a vector between two locations."

ExprVectorProjection:
    name: "Vectors - Vector Projection"
    type: Expression
    pattern:
        - "[vector] projection [of] %vector% on[to] %vector%"
    description: "An expression to get the vector projection of two vectors."

ExprVectorOfLocation:
    name: "Vectors - Vector from Location"
    type: Expression
    pattern:
        - "[the] vector (of|from|to) %location%"
        - "%location%'s vector"
    description: "Creates a vector from a location."

ExprVectorFromYawAndPitch:
    name: "Vectors - Vector from Pitch and Yaw"
    type: Expression
    pattern:
        - "[a] [new] vector (from|with) yaw %number% and pitch %number%"
    description: "Creates a vector from a yaw and pitch value."

ExprVelocity:
    name: "Vectors - Velocity"
    type: Expression
    pattern:
        - "[the] velocit(y|ies) of %entities%"
        - "%entities%'[s] velocit(y|ies)"
    description: "Gets or changes velocity of an entity."

ExprVectorXYZ:
    name: "Vectors - XYZ Component"
    type: Expression
    pattern:
        - "[the] [vector] (x|y|z) [component[s]] of %vectors%"
        - "%vectors%'[s] [vector] (x|y|z) [component[s]]"
    description: "Gets or changes the x, y or z component of a vector."

ExprVehicle:
    name: "Vehicle"
    type: Expression
    pattern:
        - "[the] vehicle[s] of %entities%"
        - "%entities%'[s] vehicle[s]"
    description: "The vehicle an entity is in, if any. This can actually be any entity, e.g.
spider jockeys are skeletons that ride on a spider, so the spider is the
`vehicle` of the skeleton. See also: passenger"

ExprVersion:
    name: "Version"
    type: Expression
    pattern:
        - "([craft]bukkit|minecraft|skript)( |-)version"
    description: "The version of Bukkit, Minecraft or Skript respectively."

ExprVersionString:
    name: "Version String"
    type: Expression
    pattern:
        - "[the] [shown|custom] version [string|text]"
    description: "The text to show if the protocol version of the server doesn`t match with
protocol version of the client. You can check the protocol version expression
for more information about this. This can only be set in a server list ping
event."

ExprPlayerViewDistance:
    name: "View Distance"
    type: Expression
    pattern:
        - "[the] view distance[s] of %players%"
        - "%players%'[s] view distance[s]"
    description: "The view distance of a player as set by the server. Can be changed. NOTE: This
is the view distance sent by the server to the player. This has nothing to do
with client side view distance settings NOTE: This may not work on some
versions (such as MC 1.14.x). The return value in this case will be the view
distance set in system.properties."

ExprClientViewDistance:
    name: "View Distance of Client"
    type: Expression
    pattern:
        - "[the] client view distance[s] of %players%"
        - "%players%'[s] client view distance[s]"
    description: "The view distance of the client. Can not be changed. This differs from the
server side view distance of player as this will retrieve the view distance
the player has set on their client."

ExprWeather:
    name: "Weather"
    type: Expression
    pattern:
        - "[the] weather [(in|of) %worlds%]"
        - "%worlds%'[s] weather"
    description: "The weather in the given or the current world."

ExprWhitelist:
    name: "Whitelist"
    type: Expression
    pattern:
        - "[the] white[ ]list"
    description: "A server`s whitelist.This expression can be used to add/remove players to/from
the whitelist, to enable it and disable it (set whitelist to true / set
whitelist to false), and to empty it (reset whitelist)"

ExprWorld:
    name: "World"
    type: Expression
    pattern:
        - "[the] world [of %locations/entities/chunk%]"
        - "%locations/entities/chunk%'[s] world"
    description: "The world the event occurred in."

ExprWorldEnvironment:
    name: "World Environment"
    type: Expression
    pattern:
        - "[the] [world] environment of %worlds%"
        - "%worlds%'[s] [world] environment"
    description: "The environment of a world"

ExprSeed:
    name: "World Seed"
    type: Expression
    pattern:
        - "[the] seed[s] (from|of) %worlds%"
        - "%worlds%'[s] seed[s]"
    description: "The seed of given world. Note that it will be returned as Minecraft internally
treats seeds, not as you specified it in world configuration."

ExprWorldFromName:
    name: "World from Name"
    type: Expression
    pattern:
        - "[the] world [(named|with name)] %text%"
    description: "Returns the world from a string."

ExprWorlds:
    name: "Worlds"
    type: Expression
    pattern:
        - "[(all [[of] the]|the)] worlds"
    description: "All worlds of the server, useful for looping."

ExprTimes:
    name: "X Times"
    type: Expression
    pattern:
        - "%number% time[s]"
        - "once"
        - "twice"
    description: "Integers between 1 and X, used in loops to loop X times."

ExprXOf:
    name: "X of Item"
    type: Expression
    pattern:
        - "%number% of %item stacks/item types/entity type%"
    description: "An expression to be able to use a certain amount of items where the amount can
be any expression. Please note that this expression is not stable and might be
replaced in the future."

ExprYawPitch:
    name: "Yaw / Pitch"
    type: Expression
    pattern:
        - "[the] (yaw|pitch) of %locations/vectors%"
        - "%locations/vectors%'[s] (yaw|pitch)"
    description: "The yaw or pitch of a location or vector."

EffActionBar:
    name: "Action Bar"
    type: Effect
    pattern:
        - "send [the] action[ ]bar [with text] %text% [to %players%]"
    description: "Sends an action bar message to the given player(s)."

EffApplyBoneMeal:
    name: "Apply Bone Meal"
    type: Effect
    pattern:
        - "apply [%number%] bone[ ]meal[s] [to %blocks%]"
    description: "Applies bone meal to a crop, sapling, or composter"

EffBan:
    name: "Ban"
    type: Effect
    pattern:
        - "ban %texts/offline players% [(by reason of|because [of]|on account of|due to)
%text%] [for %time span%]"
        - "unban %texts/offline players%"
        - "ban %players% by IP [(by reason of|because [of]|on account of|due to) %text%]
[for %time span%]"
        - "unban %players% by IP"
        - "IP(-| )ban %players% [(by reason of|because [of]|on account of|due to) %text%]
[for %time span%]"
        - "(IP(-| )unban|un[-]IP[-]ban) %players%"
    description: "Bans or unbans a player or an IP address. If a reason is given, it will be
shown to the player when they try to join the server while banned. A length of
ban may also be given to apply a temporary ban. If it is absent for any
reason, a permanent ban will be used instead. We recommend that you test your
scripts so that no accidental permanent bans are applied.

Note that banning people does not kick them from the server. Consider using
the kick effect after applying a ban."

EffBreakNaturally:
    name: "Break Block"
    type: Effect
    pattern:
        - "break %blocks% [naturally] [using %item type%]"
    description: "Breaks the block and spawns items as if a player had mined it

You can add a tool, which will spawn items based on how that tool would break
the block (ie: When using a hand to break stone, it drops nothing, whereas
with a pickaxe it drops cobblestone)"

EffBroadcast:
    name: "Broadcast"
    type: Effect
    pattern:
        - "broadcast %objects% [(to|in) %worlds%]"
    description: "Broadcasts a message to the server."

EffCancelItemUse:
    name: "Cancel Active Item"
    type: Effect
    pattern:
        - "(cancel|interrupt) [the] us[ag]e of %living entities%'[s] [active|current]
item"
    description: "Interrupts the action entities may be trying to complete. For example,
interrupting eating, or drawing back a bow."

EffCancelCooldown:
    name: "Cancel Command Cooldown"
    type: Effect
    pattern:
        - "(cancel|ignore) [the] [current] [command] cooldown"
        - "un(cancel|ignore) [the] [current] [command] cooldown"
    description: "Only usable in commands. Makes it so the current command usage isn`t counted
towards the cooldown."

EffCancelDrops:
    name: "Cancel Drops"
    type: Effect
    pattern:
        - "(cancel|clear|delete) [the] drops [of (items|[e]xp[erience][s])]"
        - "(cancel|clear|delete) [the] (item|[e]xp[erience]) drops"
    description: "Cancels drops of items or experiences in a death or block break event. Please
note that this doesn`t keep items or experiences of a dead player. If you want
to do that, use the Keep Inventory / Experience effect."

EffCancelEvent:
    name: "Cancel Event"
    type: Effect
    pattern:
        - "cancel [the] event"
        - "uncancel [the] event"
    description: "Cancels the event (e.g. prevent blocks from being placed, or damage being
taken)."

EffChange:
    name: "Change: Set/Add/Remove/Delete/Reset"
    type: Effect
    pattern:
        - "(add|give) %objects% to %~objects%"
        - "increase %~objects% by %objects%"
        - "give %~objects% %objects%"
        - "set %~objects% to %objects%"
        - "remove (all|every) %objects% from %~objects%"
        - "(remove|subtract) %objects% from %~objects%"
        - "(reduce|decrease) %~objects% by %objects%"
        - "(delete|clear) %~objects%"
        - "reset %~objects%"
    description: "A very general effect that can change many expressions. Many expressions can
only be set and/or deleted, while some can have things added to or removed
from them."

EffChargeCreeper:
    name: "Charge Creeper"
    type: Effect
    pattern:
        - "make %living entities% [a[n]]
(charged|powered|((un|non[-])charged|(un|non[-])powered)) [creeper[s]]"
        - "(charge|power|(uncharge|unpower)) %living entities%"
    description: "Charges or uncharges a creeper. A creeper is charged when it has been struck
by lightning."

EffColorItems:
    name: "Color Items"
    type: Effect
    pattern:
        - "(dye|colo[u]r|paint) %item types% %color%"
        - "(dye|colo[u]r|paint) %item types% \\\\(%number%, %number%, %number%\\\\)"
    description: "Colors items in a given color. You can also use RGB codes if you feel limited
with the 16 default colors. RGB codes are three numbers from 0 to 255 in the
order `(red, green, blue)`, where `(0,0,0)` is black and `(255,255,255)` is
white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or
newer you can also color potions and maps. Note that the colors might not look
exactly how you`d expect."

EffCommand:
    name: "Command"
    type: Effect
    pattern:
        - "[execute] [the] [bungee[cord]] command[s] %texts% [by %command senders%]"
        - "[execute] [the] %command senders% [bungee[cord]] command[s] %texts%"
        - "(let|make) %command senders% execute [[the] [bungee[cord]] command[s]] %texts%"
    description: "Executes a command. This can be useful to use other plugins in triggers. If
the command is a bungeecord side command, you can use the [bungeecord] option
to execute command on the proxy."

EffConnect:
    name: "Connect"
    type: Effect
    pattern:
        - "connect %players% to [server] %text%"
        - "send %players% to server %text%"
    description: "Connects a player to another bungeecord server"

EffContinue:
    name: "Continue"
    type: Effect
    pattern:
        - "continue [this loop|[the] [current] loop]"
        - "continue [the] %*integer%(st|nd|rd|th) loop"
    description: "Moves the loop to the next iteration. You may also continue an outer loop from
an inner one. The loops are labelled from 1 until the current loop, starting
with the outermost one."

EffCopy:
    name: "Copy Into Variable"
    type: Effect
    pattern:
        - "copy %~objects% [in]to %~objects%"
    description: "Copies objects into a variable. When copying a list over to another list, the
source list and its sublists are also copied over. **Note: Copying a value
into a variable/list will overwrite the existing data.**"

EffHealth:
    name: "Damage/Heal/Repair"
    type: Effect
    pattern:
        - "damage %living entities/item types% by %number% [heart[s]] [with fake cause
%damage cause%]"
        - "heal %living entities% [by %number% [heart[s]]]"
        - "repair %item types% [by %number%]"
    description: "Damage/Heal/Repair an entity, or item."

Delay:
    name: "Delay"
    type: Effect
    pattern:
        - "(wait|halt) [for] %time span%"
    description: "Delays the script`s execution by a given timespan. Please note that delays are
not persistent, e.g. trying to create a tempban script with `ban player → wait
7 days → unban player` will not work if you restart your server anytime within
these 7 days. You also have to be careful even when using small delays!"

EffDoIf:
    name: "Do If"
    type: Effect
    pattern:
        - "<.+> if <.+>"
    description: "Execute an effect if a condition is true."

EffDrop:
    name: "Drop"
    type: Effect
    pattern:
        - "drop %item types/experience points% [%directions% %locations%] [without
velocity]"
    description: "Drops one or more items."

EffScriptFile:
    name: "Enable/Disable/Reload Script File"
    type: Effect
    pattern:
        - "((enable|load)|reload|(disable|unload)) s(c|k)ript [file] %text%"
    description: "Enables, disables, or reloads a script file."

EffEnchant:
    name: "Enchant/Disenchant"
    type: Effect
    pattern:
        - "enchant %~item types% with %enchantment types%"
        - "disenchant %~item types%"
    description: "Enchant or disenchant an existing item."

EffEquip:
    name: "Equip"
    type: Effect
    pattern:
        - "equip [%living entities%] with %item types%"
        - "make %living entities% wear %item types%"
        - "unequip %item types% [from %living entities%]"
        - "unequip %living entities%'[s] (armor|equipment)"
    description: "Equips or unequips an entity with some given armor. This will replace any
armor that the entity is wearing."

EffExit:
    name: "Exit"
    type: Effect
    pattern:
        - "(exit|stop) [trigger]"
        - "(exit|stop) [(1|a|the|this)] (section|loop|conditional)"
        - "(exit|stop) <\\d+> (section|loop|conditional)s"
        - "(exit|stop) all (section|loop|conditional)s"
    description: "Exits a given amount of loops and conditionals, or the entire trigger."

EffExplodeCreeper:
    name: "Explode Creeper"
    type: Effect
    pattern:
        - "instantly explode [creeper[s]] %living entities%"
        - "explode [creeper[s]] %living entities% instantly"
        - "ignite creeper[s] %living entities%"
        - "start (ignition|explosion) [process] of [creeper[s]] %living entities%"
        - "stop (ignition|explosion) [process] of [creeper[s]] %living entities%"
    description: "Starts the explosion process of a creeper or instantly explodes it."

EffExplosion:
    name: "Explosion"
    type: Effect
    pattern:
        - "[(create|make)] [an] explosion (of|with) (force|strength|power) %number%
[%directions% %locations%] [with fire]"
        - "[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number%
[%directions% %locations%]"
        - "[(create|make)] [a] fake explosion [%directions% %locations%]"
        - "[(create|make)] [an] explosion[ ]effect [%directions% %locations%]"
    description: "Creates an explosion of a given force. The Minecraft Wiki has an article on
explosions which lists the explosion forces of TNT, creepers, etc. Hint: use a
force of 0 to create a fake explosion that does no damage whatsoever, or use
the explosion effect introduced in Skript 2.0. Starting with Bukkit 1.4.5 and
Skript 2.0 you can use safe explosions which will damage entities but won`t
destroy any blocks."

EffFeed:
    name: "Feed"
    type: Effect
    pattern:
        - "feed [the] %players% [by %number% [beef[s]]]"
    description: "Feeds the specified players."

EffForceAttack:
    name: "Force Attack"
    type: Effect
    pattern:
        - "make %living entities% attack %entity%"
        - "force %living entities% to attack %entity%"
    description: "Makes a living entity attack an entity with a melee attack."

EffRespawn:
    name: "Force Respawn"
    type: Effect
    pattern:
        - "force %players% to respawn"
    description: "Forces player(s) to respawn if they are dead. If this is called without delay
from death event, one tick is waited before respawn attempt."

EffHandedness:
    name: "Handedness"
    type: Effect
    pattern:
        - "make %living entities% (left|right)( |-)handed"
    description: "Make mobs left or right‐handed. This does not affect players."

EffHidePlayerFromServerList:
    name: "Hide Player from Server List"
    type: Effect
    pattern:
        - "hide %players% (in|on|from) [the] server list"
        - "hide %players%'[s] info[rmation] (in|on|from) [the] server list"
    description: "Hides a player from the hover list and decreases the online players count
(only if the player count wasn`t changed before)."

EffIgnite:
    name: "Ignite/Extinguish"
    type: Effect
    pattern:
        - "(ignite|set fire to) %entities% [for %time span%]"
        - "(set|light) %entities% on fire [for %time span%]"
        - "extinguish %entities%"
    description: "Lights entities on fire or extinguishes them."

EffKeepInventory:
    name: "Keep Inventory / Experience"
    type: Effect
    pattern:
        - "keep [the] (inventory|items) [(and [e]xp[erience][s] [point[s]])]"
        - "keep [the] [e]xp[erience][s] [point[s]] [(and (inventory|items))]"
    description: "Keeps the inventory or/and experiences of the dead player in a death event."

EffKick:
    name: "Kick"
    type: Effect
    pattern:
        - "kick %players% [(by reason of|because [of]|on account of|due to) %text%]"
    description: "Kicks a player from the server."

EffKill:
    name: "Kill"
    type: Effect
    pattern:
        - "kill %entities%"
    description: "Kills an entity. Note: This effect does not set the entity`s health to 0
(which causes issues), but damages the entity by 100 times its maximum health."

EffKnockback:
    name: "Knockback"
    type: Effect
    pattern:
        - "(apply knockback to|knock[back]) %living entities% [%direction%] [with
(strength|force) %number%]"
    description: "Apply the same velocity as a knockback to living entities in a direction.
Mechanics such as knockback resistance will be factored in."

EffFireworkLaunch:
    name: "Launch firework"
    type: Effect
    pattern:
        - "(launch|deploy) [[a] firework [with effect[s]]] %firework effects% at
%locations% [([with] (duration|power)|timed) %number%]"
    description: "Launch firework effects at the given location(s)."

EffLeash:
    name: "Leash entities"
    type: Effect
    pattern:
        - "(leash|lead) %living entities% to %entity%"
        - "make %entity% (leash|lead) %living entities%"
        - "un(leash|lead) [holder of] %living entities%"
    description: "Leash living entities to other entities."

EffLightning:
    name: "Lightning"
    type: Effect
    pattern:
        - "(create|strike) lightning[([ ]effect)] %directions% %locations%"
    description: "Strike lightning at a given location. Can use `lightning effect` to create a
lightning that does not harm entities or start fires."

EffLoadServerIcon:
    name: "Load Server Icon"
    type: Effect
    pattern:
        - "load [the] server icon (from|of) [the] [image] [file] %text%"
    description: "Loads server icons from the given files. You can get the loaded icon using the
last loaded server icon expression. Please note that the image must be 64x64
and the file path starts from the server folder."

EffWorldLoad:
    name: "Load World"
    type: Effect
    pattern:
        - "load [[the] world[s]] %texts% [with environment %environment%]"
        - "unload [[the] world[s]] %worlds% [without saving]"
    description: "Load your worlds or unload your worlds The load effect will create a new world
if world doesn`t already exist. When attempting to load a normal vanilla world
you must define it`s environment i.e 'world_nether' must be loaded with nether
environment"

EffSuppressWarnings:
    name: "Locally Suppress Warning"
    type: Effect
    pattern:
        - "[local[ly]] suppress [the] (conflict|variable save|[missing]
conjunction[s]|starting [with] expression[s]) warning[s]"
    description: "Suppresses target warnings from the current script."

EffLog:
    name: "Log"
    type: Effect
    pattern:
        - "log %texts% [(to|in) [file[s]] %texts%]"
    description: "Writes text into a .log file. Skript will write these files to
/plugins/Skript/logs. NB: Using `server.log` as the log file will write to the
default server log. Omitting the log file altogether will log the message as
`[Skript] [<script>.sk] <message>` in the server log."

EffLook:
    name: "Look At"
    type: Effect
    pattern:
        - "(force|make) %living entities% [to] (face [towards]|look [(at|towards)])
(%entity%['s (feet|eyes)]|(feet|eyes) of %entity%) [at [head] [rotation] speed
%number%] [[and] max[imum] [head] pitch %number%]"
        - "(force|make) %living entities% [to] (face [towards]|look [(at|towards)])
%vector/location% [at [head] [rotation] speed %number%] [[and] max[imum]
[head] pitch %number%]"
    description: "Forces the mob(s) or player(s) to look at an entity, vector or location.
Vanilla max head pitches range from 10 to 50."

EffMakeEggHatch:
    name: "Make Egg Hatch"
    type: Effect
    pattern:
        - "make [the] egg [not] hatch"
    description: "Makes the egg hatch in a Player Egg Throw event."

EffMakeFly:
    name: "Make Fly"
    type: Effect
    pattern:
        - "force %players% to [(start|stop)] fly[ing]"
        - "make %players% (start|stop) flying"
        - "make %players% fly"
    description: "Forces a player to start/stop flying."

EffIncendiary:
    name: "Make Incendiary"
    type: Effect
    pattern:
        - "make %entities% [not] incendiary"
        - "make %entities%'[s] explosion [not] (incendiary|fiery)"
        - "make [the] [event(-| )]explosion [not] (incendiary|fiery)"
    description: "Sets if an entity`s explosion will leave behind fire. This effect is also
usable in an explosion prime event."

EffInvisible:
    name: "Make Invisible"
    type: Effect
    pattern:
        - "make %living entities% (invisible|not visible)"
        - "make %living entities% (visible|not invisible)"
    description: "Makes a living entity visible/invisible. This is not a potion and therefore
does not have features such as a time limit or particles. When setting an
entity to invisible while using an invisibility potion on it, the potion will
be overridden and when it runs out the entity keeps its invisibility."

EffInvulnerability:
    name: "Make Invulnerable"
    type: Effect
    pattern:
        - "make %entities% invulnerable"
        - "make %entities% (not invulnerable|vulnerable)"
    description: "Makes an entity invulnerable/not invulnerable."

EffMakeSay:
    name: "Make Say"
    type: Effect
    pattern:
        - "make %players% (say|send [the] message[s]) %texts%"
        - "force %players% to (say|send [the] message[s]) %texts%"
    description: "Forces a player to send a message to the chat. If the message starts with a
slash it will force the player to use command."

EffGlowingText:
    name: "Make Sign Glow"
    type: Effect
    pattern:
        - "make %blocks/item types% have glowing text"
        - "make %blocks/item types% have (normal|non[-| ]glowing) text"
    description: "Makes a sign (either a block or item) have glowing text or normal text"

EffMessage:
    name: "Message"
    type: Effect
    pattern:
        - "(message|send [message[s]]) %objects% [to %command senders%] [from %player%]"
    description: "Sends a message to the given player. Only styles written in given string or in
formatted expressions will be parsed. Adding an optional sender allows the
messages to be sent as if a specific player sent them. This is useful with
Minecraft 1.16.4`s new chat ignore system, in which players can choose to
ignore other players, but for this to work, the message needs to be sent from
a player."

EffOpenBook:
    name: "Open Book"
    type: Effect
    pattern:
        - "(open|show) book %item type% (to|for) %players%"
    description: "Opens a written book to a player."

EffOpenInventory:
    name: "Open/Close Inventory"
    type: Effect
    pattern:
        - "(open|show) (((crafting
[table]|workbench)|chest|anvil|hopper|dropper|dispenser)
[(view|window|inventory)]|%inventory/inventory type%) (to|for) %players%"
        - "close [the] inventory [view] (to|of|for) %players%"
        - "close %players%'[s] inventory [view]"
    description: "Opens an inventory to a player. The player can then access and modify the
inventory as if it was a chest that he just opened. Please note that currently
`show` and `open` have the same effect, but `show` will eventually show an
unmodifiable view of the inventory in the future."

EffPathfind:
    name: "Pathfind"
    type: Effect
    pattern:
        - "make %living entities% (pathfind|move) to[wards] %living entity/location% [at
speed %number%]"
        - "make %living entities% stop (pathfinding|moving)"
    description: "Make an entity pathfind towards a location or another entity. Not all entities
can pathfind. If the pathfinding target is another entity, the entities may or
may not continuously follow the target."

EffVisualEffect:
    name: "Play Effect"
    type: Effect
    pattern:
        - "(play|show) %visual effects% (on|%directions%) %entities/locations% [(to
%players%|in (radius|range) of %number%)]"
        - "(play|show) %number% %visual effects% (on|%directions%) %locations% [(to
%players%|in (radius|range) of %number%)]"
    description: "Plays a visual effect at a given location or on a given entity. Please note
that some effects can only be played on entities, e.g. wolf hearts or the hurt
effect, and that these are always visible to all players."

EffPlaySound:
    name: "Play Sound"
    type: Effect
    pattern:
        - "play sound[s] %texts% [(in|from) %sound category%] [(at|with) volume %number%]
[(and|at|with) pitch %number%] at %locations% [(to|for) %players%]"
        - "play sound[s] %texts% [(in|from) %sound category%] [(at|with) volume %number%]
[(and|at|with) pitch %number%] [(to|for) %players%] [(at|from) %locations%]"
    description: "Plays a sound at given location for everyone or just for given players, or
plays a sound to specified players. Both Minecraft sound names and Spigot
sound names are supported. Playing resource pack sounds are supported too. The
sound category is `master` by default.

Please note that sound names can get changed in any Minecraft or Spigot
version, or even removed from Minecraft itself."

EffPlayerInfoVisibility:
    name: "Player Info Visibility"
    type: Effect
    pattern:
        - "hide [all] player [related] info[rmation] [(in|on|from) [the] server list]"
        - "(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the]
server list]"
    description: "Sets whether all player related information is hidden in the server list. The
Vanilla Minecraft client will display ??? (dark gray) instead of player counts
and will not show the hover hist when hiding player info. The version string
can override the ???. Also the Online Players Count and Max Players
expressions will return ‐1 when hiding player info."

EffPlayerVisibility:
    name: "Player Visibility"
    type: Effect
    pattern:
        - "hide %players% [(from|for) %players%]"
        - "reveal %players% [(to|for|from) %players%]"
    description: "Change visibility of a player for the given players. When reveal is used in
combination of the hidden players expression and the viewers are not
specified, this will default it to the given player in the hidden players
expression.

Note: if a player was hidden and relogs, this player will be visible again."

EffPoison:
    name: "Poison/Cure"
    type: Effect
    pattern:
        - "poison %living entities% [for %time span%]"
        - "(cure|unpoison) %living entities% [(from|of) poison]"
    description: "Poison or cure a creature."

EffPotion:
    name: "Potion Effects"
    type: Effect
    pattern:
        - "apply %potion effects% to %living entities%"
        - "apply infinite [ambient] [potion of] %potions% [potion] [[[of] tier] %number%]
[without [any] particles] [(whilst hiding [the]|without (the|a)) [potion]
icon] to %living entities% [replacing [the] existing effect]"
        - "apply [ambient] [potion of] %potions% [potion] [[[of] tier] %number%] [without
[any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to
%living entities% [for %time span%] [replacing [the] existing effect]"
    description: "Apply or remove potion effects to/from entities."

EffPush:
    name: "Push"
    type: Effect
    pattern:
        - "(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force)
%number%]"
    description: "Push entities around."

EffPvP:
    name: "PvP"
    type: Effect
    pattern:
        - "enable PvP [in %worlds%]"
        - "disable PVP [in %worlds%]"
    description: "Set the PvP state for a given world."

EffReplace:
    name: "Replace"
    type: Effect
    pattern:
        - "replace [(all|every)] %texts% in %texts% with %text% [with case sensitivity]"
        - "replace [(all|every)] %texts% with %text% in %texts% [with case sensitivity]"
        - "replace first %texts% in %texts% with %text% [with case sensitivity]"
        - "replace first %texts% with %text% in %text% [with case sensitivity]"
        - "replace [(all|every)] %item types% in %inventories% with %item type%"
        - "replace [(all|every)] %item types% with %item type% in %inventories%"
    description: "Replaces all occurrences of a given text with another text. Please note that
you can only change variables and a few expressions, e.g. a message or a line
of a sign."

EffReturn:
    name: "Return"
    type: Effect
    pattern:
        - "return %objects%"
    description: "Makes a function return a value"

EffWorldSave:
    name: "Save World"
    type: Effect
    pattern:
        - "save [[the] world[s]] %worlds%"
    description: "Save all worlds or a given world manually. Note: saving many worlds at once
may possibly cause the server to freeze."

EffSendBlockChange:
    name: "Send Block Change"
    type: Effect
    pattern:
        - "make %players% see %blocks% as %item type/block data%"
    description: "Makes a player see a block as something it really isn`t. BlockData support is
only for MC 1.13+"

EffSendResourcePack:
    name: "Send Resource Pack"
    type: Effect
    pattern:
        - "send [the] resource pack [from [[the] URL]] %text% to %players%"
        - "send [the] resource pack [from [[the] URL]] %text% with hash %text% to
%players%"
    description: "Request that the player`s client download and switch resource packs. The
client will download the resource pack in the background, and will
automatically switch to it once the download is complete. The URL must be a
direct download link.

The hash is used for caching, the player won`t have to re‐download the
resource pack that way. The hash must be SHA‐1, you can get SHA‐1 hash of your
resource pack using this online tool.

The resource pack request action can be used to check status of the sent
resource pack request."

EffShear:
    name: "Shear"
    type: Effect
    pattern:
        - "[force] shear %living entities%"
        - "un[-]shear %living entities%"
    description: "Shears or un‐shears a shearable entity with drops by shearing and a `sheared`
sound. Using with `force` will force this effect despite the entity`s `shear
state`.

Please note that..:

‐ If your server is not running with Paper 1.19.4 or higher, this effect will
only change its `shear state`, and the `force` effect is unavailable

‐ Force‐shearing or un‐shearing on a sheared mushroom cow is not possible"

EffShoot:
    name: "Shoot"
    type: Effect
    pattern:
        - "shoot %entity types% [from %living entities/locations%] [(at|with)
(speed|velocity) %number%] [%direction%]"
        - "(make|let) %living entities/locations% shoot %entity types% [(at|with)
(speed|velocity) %number%] [%direction%]"
    description: "Shoots a projectile (or any other entity) from a given entity."

EffSilence:
    name: "Silence Entity"
    type: Effect
    pattern:
        - "silence %entities%"
        - "unsilence %entities%"
        - "make %entities% silent"
        - "make %entities% not silent"
    description: "Controls whether or not an entity is silent."

EffStopServer:
    name: "Stop Server"
    type: Effect
    pattern:
        - "(stop|shut[ ]down) [the] server"
        - "restart [the] server"
    description: "Stops or restarts the server. If restart is used when the restart‐script
spigot.yml option isn`t defined, the server will stop instead."

EffStopSound:
    name: "Stop Sound"
    type: Effect
    pattern:
        - "stop (all sound[s]|sound[s] %texts%) [(in [the]|from) %sound category%] [(from
playing to|for) %players%]"
        - "stop playing sound[s] %texts% [(in [the]|from) %sound category%] [(to|for)
%players%]"
    description: "Stops specific or all sounds from playing to a group of players. Both
Minecraft sound names and Spigot sound names are supported. Resource pack
sounds are supported too. The sound category is `master` by default. A sound
can`t be stopped from a different category.

Please note that sound names can get changed in any Minecraft or Spigot
version, or even removed from Minecraft itself."

EffSwingHand:
    name: "Swing Hand"
    type: Effect
    pattern:
        - "make %living entities% swing [their] [main] hand"
        - "make %living entities% swing [their] off[ ]hand"
    description: "Makes an entity swing their hand. This does nothing if the entity does not
have an animation for swinging their hand."

EffTeleport:
    name: "Teleport"
    type: Effect
    pattern:
        - "[force] teleport %entities% (to|%direction%) %location%"
    description: "Teleport an entity to a specific location. This effect is delayed by default
on Paper, meaning certain syntax such as the return effect for functions
cannot be used after this effect. The keyword `force` indicates this effect
will not be delayed, which may cause lag spikes or server crashes when using
this effect to teleport entities to unloaded chunks."

EffResetTitle:
    name: "Title - Reset"
    type: Effect
    pattern:
        - "reset [the] title[s] [of %players%]"
        - "reset [the] %players%'[s] title[s]"
    description: "Resets the title of the player to the default values."

EffSendTitle:
    name: "Title - Send"
    type: Effect
    pattern:
        - "send title %text% [with subtitle %text%] [to %players%] [for %time span%]
[with fade[(-| )]in %time span%] [[and] [with] fade[(-| )]out %time span%]"
        - "send subtitle %text% [to %players%] [for %time span%] [with fade[(-| )]in
%time span%] [[and] [with] fade[(-| )]out %time span%]"
    description: "Sends a title/subtitle to the given player(s) with optional
fadein/stay/fadeout times for Minecraft versions 1.11 and above.

If you`re sending only the subtitle, it will be shown only if there`s a title
displayed at the moment, otherwise it will be sent with the next title. To
show only the subtitle, use: `send title ' ' with subtitle 'yourtexthere' to
player`.

Note: if no input is given for the times, it will keep the ones from the last
title sent, use the reset title effect to restore the default values."

EffToggle:
    name: "Toggle"
    type: Effect
    pattern:
        - "(close|turn off|de[-]activate) %blocks%"
        - "(toggle|switch) [[the] state of] %blocks%"
        - "(open|turn on|activate) %blocks%"
    description: "Toggle the state of a block."

EffToggleFlight:
    name: "Toggle Flight"
    type: Effect
    pattern:
        - "(allow|enable) (fly|flight) (for|to) %players%"
        - "(disallow|disable) (fly|flight) (for|to) %players%"
    description: "Toggle the flight mode of a player."

EffToggleCanPickUpItems:
    name: "Toggle Picking Up Items"
    type: Effect
    pattern:
        - "allow %living entities% to pick([ ]up items| items up)"
        - "(forbid|disallow) %living entities% (from|to) pick([ing | ]up items|[ing]
items up)"
    description: "Determines whether living entities are able to pick up items or not"

EffTree:
    name: "Tree"
    type: Effect
    pattern:
        - "(grow|create|generate) tree [of type %tree type%] %directions% %locations%"
        - "(grow|create|generate) %tree type% %directions% %locations%"
    description: "Creates a tree. This may require that there is enough space above the given
location and that the block below is dirt/grass, but it is possible that the
tree will just grow anyways, possibly replacing every block in its path."

EffVectorRotateAroundAnother:
    name: "Vectors - Rotate Around Vector"
    type: Effect
    pattern:
        - "rotate %vectors% around %vector% by %number% [degrees]"
    description: "Rotates one or more vectors around another vector"

EffVectorRotateXYZ:
    name: "Vectors - Rotate around XYZ"
    type: Effect
    pattern:
        - "rotate %vectors% around (x|y|z)(-| )axis by %number% [degrees]"
    description: "Rotates one or more vectors around the x, y, or z axis by some amount of
degrees"

EffVehicle:
    name: "Vehicle"
    type: Effect
    pattern:
        - "(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entities/entity
types%"
        - "(make|let|force) %entities% [to] (dismount|(dismount|leave) [(from|of)]
[(any|the[ir]|his|her)] vehicle[s])"
        - "(eject|dismount) [(any|the)] passenger[s] (of|from) %entities%"
    description: "Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow,
etc."

EffOp:
    name: "op/deop"
    type: Effect
    pattern:
        - "[de[-]]op %offline players%"
    description: "Grant/revoke a user operator state."

EffSecSpawn:
    name: "Spawn"
    type: EffectSection
    pattern:
        - "(spawn|summon) %entity types% [%directions% %locations%]"
        - "(spawn|summon) %number% of %entity types% [%directions% %locations%]"
    description: "Spawn a creature. This can be used as an effect and as a section. If it is
used as a section, the section is run before the entity is added to the world.
You can modify the entity in this section, using for example `event‐entity` or
`cow`. Do note that other event values, such as `player`, won`t work in this
section."

CondAlphanumeric:
    name: "Alphanumeric"
    type: Condition
    pattern:
        - "%texts% (is|are) alphanumeric"
        - "%texts% (isn't|is not|aren't|are not) alphanumeric"
    description: "Checks if the given string is alphanumeric."

CondCanBuild:
    name: "Can Build"
    type: Condition
    pattern:
        - "%players% (can|(is|are) allowed to) build %directions% %locations%"
        - "%players% (can('t|not)|(is|are)(n't| not) allowed to) build %directions%
%locations%"
    description: "Tests whether a player is allowed to build at a certain location. This
condition requires a supported regions plugin to be installed."

CondCanFly:
    name: "Can Fly"
    type: Condition
    pattern:
        - "%players% can fly"
        - "%players% (can't|cannot|can not) fly"
    description: "Whether a player is allowed to fly."

CondCanHold:
    name: "Can Hold"
    type: Condition
    pattern:
        - "%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %item types%"
        - "%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have)
[enough] space (for|to hold)) %item types%"
    description: "Tests whether a player or a chest can hold the given item."

CondCanPickUpItems:
    name: "Can Pick Up Items"
    type: Condition
    pattern:
        - "%living entities% can pick([ ]up items| items up)"
        - "%living entities% (can't|cannot|can not) pick([ ]up items| items up)"
    description: "Whether living entities are able to pick up items off the ground or not."

CondCanSee:
    name: "Can See"
    type: Condition
    pattern:
        - "%players% (is|are) [in]visible for %players%"
        - "%players% can see %players%"
        - "%players% (is|are)(n't| not) [in]visible for %players%"
        - "%players% can('t| not) see %players%"
    description: "Checks whether the given players can see another players."

CondChance:
    name: "Chance"
    type: Condition
    pattern:
        - "chance of %number%[(\\%)]"
    description: "A condition that randomly succeeds or fails. Valid values are between 0% and
100%, or if the percent sign is omitted between 0 and 1."

CondCompare:
    name: "Comparison"
    type: Condition
    pattern:
        - "[(neither)] %objects% ((is|are)[(n't| not| neither)]
((greater|more|higher|bigger|larger) than|above)|>) %objects%"
        - "[(neither)] %objects% ((is|are)[(n't| not| neither)]
(greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|>=)
%objects%"
        - "[(neither)] %objects% ((is|are)[(n't| not| neither)] ((less|smaller|lower)
than|below)|<) %objects%"
        - "[(neither)] %objects% ((is|are)[(n't| not| neither)]
(less|smaller|lower|below) [than] or (equal to|the same as)|<=) %objects%"
        - "[(neither)] %objects% ((is|are) (not|neither)|isn't|aren't|!=) [equal to]
%objects%"
        - "[(neither)] %objects% (is|are|=) [(equal to|the same as)] %objects%"
        - "[(neither)] %objects% (is|are) between %objects% and %objects%"
        - "[(neither)] %objects% (is not|are not|isn't|aren't) between %objects% and
%objects%"
        - "[(neither)] %objects% (was|were)[(n't| not| neither)]
((greater|more|higher|bigger|larger) than|above) %objects%"
        - "[(neither)] %objects% (was|were)[(n't| not| neither)]
(greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)
%objects%"
        - "[(neither)] %objects% (was|were)[(n't| not| neither)] ((less|smaller|lower)
than|below) %objects%"
        - "[(neither)] %objects% (was|were)[(n't| not| neither)]
(less|smaller|lower|below) [than] or (equal to|the same as) %objects%"
        - "[(neither)] %objects% ((was|were) (not|neither)|wasn't|weren't) [equal to]
%objects%"
        - "[(neither)] %objects% (was|were) [(equal to|the same as)] %objects%"
        - "[(neither)] %objects% (was|were) between %objects% and %objects%"
        - "[(neither)] %objects% (was not|were not|wasn't|weren't) between %objects% and
%objects%"
        - "[(neither)] %objects% (will be|(will (not|neither) be|won't be))
((greater|more|higher|bigger|larger) than|above) %objects%"
        - "[(neither)] %objects% (will be|(will (not|neither) be|won't be))
(greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)
%objects%"
        - "[(neither)] %objects% (will be|(will (not|neither) be|won't be))
((less|smaller|lower) than|below) %objects%"
        - "[(neither)] %objects% (will be|(will (not|neither) be|won't be))
(less|smaller|lower|below) [than] or (equal to|the same as) %objects%"
        - "[(neither)] %objects% ((will (not|neither) be|won't be)|(isn't|aren't|is
not|are not) (turning|changing) [in]to) [equal to] %objects%"
        - "[(neither)] %objects% (will be [(equal to|the same as)]|(is|are)
(turning|changing) [in]to) %objects%"
        - "[(neither)] %objects% will be between %objects% and %objects%"
        - "[(neither)] %objects% (will not be|won't be) between %objects% and %objects%"
    description: "A very general condition, it simply compares two values. Usually you can only
compare for equality (e.g. block is/isn`t of <type>), but some values can also
be compared using greater than/less than. In that case you can also test for
whether an object is between two others. Note: This is the only element where
not all patterns are shown. It has actually another two sets of similar
patters, but with `(was|were)` or `will be` instead of `(is|are)`
respectively, which check different time states of the first expression."

CondContains:
    name: "Contains"
    type: Condition
    pattern:
        - "%inventories% (has|have) %item types% [in [(the[ir]|his|her|its)] inventory]"
        - "%inventories% (doesn't|does not|do not|don't) have %item types% [in
[(the[ir]|his|her|its)] inventory]"
        - "%inventories/texts/objects% contain[s] %item types/texts/objects%"
        - "%inventories/texts/objects% (doesn't|does not|do not|don't) contain %item
types/texts/objects%"
    description: "Checks whether an inventory contains an item, a text contains another piece of
text, or a list (e.g. {list variable::*} or `drops`) contains another object."

CondDamageCause:
    name: "Damage Cause"
    type: Condition
    pattern:
        - "[the] damage (was|is|has)[n('|o)t] [been] (caused|done|made) by %damage cause%"
    description: "Tests what kind of damage caused a damage event. Refer to the Damage Cause
type for a list of all possible causes."

CondAnchorWorks:
    name: "Do Respawn Anchors Work"
    type: Condition
    pattern:
        - "respawn anchors [do[(n't| not)]] work in %worlds%"
    description: "Checks whether or not respawn anchors work in a world."

CondWillHatch:
    name: "Egg Will Hatch"
    type: Condition
    pattern:
        - "[the] egg (will|will not|won't) hatch"
    description: "Whether the egg will hatch in a Player Egg Throw event."

CondIsSheared:
    name: "Entity Is Sheared"
    type: Condition
    pattern:
        - "%living entities% (is|are) (sheared|shorn)"
        - "%living entities% (isn't|is not|aren't|are not) (sheared|shorn)"
    description: "Checks whether entities are sheared. This condition only works on cows, sheep
and snowmen for versions below 1.19.4."

CondEntityIsWet:
    name: "Entity is Wet"
    type: Condition
    pattern:
        - "%entities% (is|are) wet"
        - "%entities% (isn't|is not|aren't|are not) wet"
    description: "Checks whether an entity is wet or not (in water, rain or a bubble column)."

CondEntityIsInLiquid:
    name: "Entity is in Liquid"
    type: Condition
    pattern:
        - "%entities% (is|are) in (water|lava|[a] bubble[ ]column|rain)"
        - "%entities% (isn't|is not|aren't|are not) in (water|lava|[a] bubble[
]column|rain)"
    description: "Checks whether an entity is in rain, lava, water or a bubble column."

CondCancelled:
    name: "Event Cancelled"
    type: Condition
    pattern:
        - "[the] event is cancel[l]ed"
        - "[the] event (is not|isn't) cancel[l]ed"
    description: "Checks whether or not the event is cancelled."

CondIsSet:
    name: "Exists/Is Set"
    type: Condition
    pattern:
        - "%~objects% (exist[s]|(is|are) set)"
        - "%~objects% (do[es](n't| not) exist|(is|are)(n't| not) set)"
    description: "Checks whether a given expression or variable is set."

CondAI:
    name: "Has AI"
    type: Condition
    pattern:
        - "%living entities% (has|have) (ai|artificial intelligence)"
        - "%living entities% (doesn't|does not|do not|don't) have (ai|artificial
intelligence)"
    description: "Checks whether an entity has AI."

CondHasClientWeather:
    name: "Has Client Weather"
    type: Condition
    pattern:
        - "%players% (has|have) [a] (client|custom) weather [set]"
        - "%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather
[set]"
    description: "Checks whether the given players have a custom client weather"

CondHasCustomModelData:
    name: "Has Custom Model Data"
    type: Condition
    pattern:
        - "%item types% (has|have) [custom] model data"
        - "%item types% (doesn't|does not|do not|don't) have [custom] model data"
    description: "Check if an item has a custom model data tag"

CondGlowingText:
    name: "Has Glowing Text"
    type: Condition
    pattern:
        - "%blocks/item types% (has|have) glowing text"
        - "%blocks/item types% (doesn't|does not|do not|don't) have glowing text"
    description: "Checks whether a sign (either a block or an item) has glowing text"

CondHasItemCooldown:
    name: "Has Item Cooldown"
    type: Condition
    pattern:
        - "%players% (has|have) [([an] item|a)] cooldown (on|for) %item types%"
        - "%players% (has|have) %item types% on [(item|a)] cooldown"
        - "%players% (doesn't|does not|do not|don't) have [([an] item|a)] cooldown
(on|for) %item types%"
        - "%players% (doesn't|does not|do not|don't) have %item types% on [(item|a)]
cooldown"
    description: "Check whether a cooldown is active on the specified material for a specific
player."

CondHasLineOfSight:
    name: "Has Line of Sight"
    type: Condition
    pattern:
        - "%living entities% (has|have) [a] [direct] line of sight to
%entities/locations%"
        - "%living entities% does(n't| not) have [a] [direct] line of sight to
%entities/locations%"
        - "%living entities% (has|have) no [direct] line of sight to %entities/locations%"
    description: "Checks whether living entities have an unobstructed line of sight to other
entities or locations."

CondHasMetadata:
    name: "Has Metadata"
    type: Condition
    pattern:
        - "%metadata holders% (has|have) metadata [(value|tag)[s]] %texts%"
        - "%metadata holders% (doesn't|does not|do not|don't) have metadata
[(value|tag)[s]] %texts%"
    description: "Checks whether a metadata holder has a metadata tag."

CondPermission:
    name: "Has Permission"
    type: Condition
    pattern:
        - "%command senders% (has|have) [the] permission[s] %texts%"
        - "%command senders% (doesn't|does not|do not|don't) have [the] permission[s]
%texts%"
    description: "Test whether a player has a certain permission."

CondPlayedBefore:
    name: "Has Played Before"
    type: Condition
    pattern:
        - "%offline players% [(has|have|did)] [already] play[ed] [on (this|the) server]
(before|already)"
        - "%offline players% (has not|hasn't|have not|haven't|did not|didn't)
[(already|yet)] play[ed] [on (this|the) server] (before|already|yet)"
    description: "Checks whether a player has played on this server before. You can also use on
first join if you want to make triggers for new players."

CondHasPotion:
    name: "Has Potion"
    type: Condition
    pattern:
        - "%living entities% (has|have) potion[s] [effect[s]] %potions%"
        - "%living entities% (doesn't|does not|do not|don't) have potion[s] [effect[s]]
%potions%"
    description: "Checks whether the given living entities have specific potion effects."

CondHasResourcePack:
    name: "Has Resource Pack"
    type: Condition
    pattern:
        - "%players% (has|have) [a] resource pack [(loaded|installed)]"
        - "%players% (doesn't|does not|do not|don't) have [a] resource pack
[(loaded|installed)]"
    description: "Checks whether the given players have a server resource pack loaded. Please
note that this can`t detect player`s own resource pack, only the resource pack
that sent by the server."

CondHasScoreboardTag:
    name: "Has Scoreboard Tag"
    type: Condition
    pattern:
        - "%entities% (has|have) [the] score[ ]board tag[s] %texts%"
        - "%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s]
%texts%"
    description: "Checks whether the given entities has the given scoreboard tags."

CondIgnitionProcess:
    name: "Ignition Process"
    type: Condition
    pattern:
        - "[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) going
to explode"
        - "[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) in the
(ignition|explosion) process"
        - "creeper[s] %living entities% ((is|are)|(isn't|is not|aren't|are not)) ignited"
    description: "Checks if a creeper is going to explode."

CondIsAlive:
    name: "Is Alive"
    type: Condition
    pattern:
        - "%entities% (is|are) (alive|dead)"
        - "%entities% (isn't|is not|aren't|are not) (alive|dead)"
    description: "Checks whether an entity is alive. Works for non‐living entities too."

CondIsBanned:
    name: "Is Banned"
    type: Condition
    pattern:
        - "%offline players/texts% (is|are) banned"
        - "%players/texts% (is|are) IP[(-| )]banned"
        - "%offline players/texts% (isn't|is not|aren't|are not) banned"
        - "%players/texts% (isn't|is not|aren't|are not) IP[(-| )]banned"
    description: "Checks whether a player or IP is banned."

CondRespawnLocation:
    name: "Is Bed/Anchor Spawn"
    type: Condition
    pattern:
        - "[the] respawn location (was|is)[(n'| no)t] [a] (bed|respawn anchor)"
    description: "Checks what the respawn location of a player in the respawn event is."

CondIsBlock:
    name: "Is Block"
    type: Condition
    pattern:
        - "%item types% (is|are) ([a] block|blocks)"
        - "%item types% (isn't|is not|aren't|are not) ([a] block|blocks)"
    description: "Checks whether an item is a block."

CondIsBlockRedstonePowered:
    name: "Is Block Redstone Powered"
    type: Condition
    pattern:
        - "%blocks% (is|are) redstone powered"
        - "%blocks% (is|are) indirectly redstone powered"
        - "%blocks% (is|are)(n't| not) redstone powered"
        - "%blocks% (is|are)(n't| not) indirectly redstone powered"
    description: "Checks if a block is indirectly or directly powered by redstone"

CondIsBlocking:
    name: "Is Blocking"
    type: Condition
    pattern:
        - "%players% (is|are) (blocking|defending) [with [a] shield]"
        - "%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]"
    description: "Checks whether a player is blocking with their shield."

CondIsBurning:
    name: "Is Burning"
    type: Condition
    pattern:
        - "%entities% (is|are) (burning|ignited|on fire)"
        - "%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)"
    description: "Checks whether an entity is on fire, e.g. a zombie due to being in sunlight,
or any entity after falling into lava."

CondIsCharged:
    name: "Is Charged"
    type: Condition
    pattern:
        - "%living entities% (is|are) (charged|powered)"
        - "%living entities% (isn't|is not|aren't|are not) (charged|powered)"
    description: "Checks if a creeper is charged (powered)."

CondIsClimbing:
    name: "Is Climbing"
    type: Condition
    pattern:
        - "%living entities% (is|are) climbing"
        - "%living entities% (isn't|is not|aren't|are not) climbing"
    description: "Whether a living entity is climbing, such as a spider up a wall or a player on
a ladder."

CondIsEdible:
    name: "Is Edible"
    type: Condition
    pattern:
        - "%item types% (is|are) edible"
        - "%item types% (isn't|is not|aren't|are not) edible"
    description: "Checks whether an item is edible."

CondIsEmpty:
    name: "Is Empty"
    type: Condition
    pattern:
        - "%inventories/slots/texts% (is|are) empty"
        - "%inventories/slots/texts% (isn't|is not|aren't|are not) empty"
    description: "Checks whether an inventory, an inventory slot, or a text is empty."

CondIsEnchanted:
    name: "Is Enchanted"
    type: Condition
    pattern:
        - "%item types% (is|are) enchanted [with %enchantment type%]"
        - "%item types% (isn't|is not|aren't|are not) enchanted [with %enchantment type%]"
    description: "Checks whether an item is enchanted."

CondIsFlammable:
    name: "Is Flammable"
    type: Condition
    pattern:
        - "%item types% (is|are) flammable"
        - "%item types% (isn't|is not|aren't|are not) flammable"
    description: "Checks whether an item is flammable."

CondIsFlying:
    name: "Is Flying"
    type: Condition
    pattern:
        - "%players% (is|are) flying"
        - "%players% (isn't|is not|aren't|are not) flying"
    description: "Checks whether a player is flying."

CondIsFrozen:
    name: "Is Frozen"
    type: Condition
    pattern:
        - "%entities% (is|are) frozen"
        - "%entities% (isn't|is not|aren't|are not) frozen"
    description: "Checks whether an entity is frozen."

CondIsFuel:
    name: "Is Fuel"
    type: Condition
    pattern:
        - "%item types% (is|are) [furnace] fuel"
        - "%item types% (isn't|is not|aren't|are not) [furnace] fuel"
    description: "Checks whether an item can be used as fuel in a furnace."

CondIsGliding:
    name: "Is Gliding"
    type: Condition
    pattern:
        - "%living entities% (is|are) gliding"
        - "%living entities% (isn't|is not|aren't|are not) gliding"
    description: "Checks whether a living entity is gliding."

CondIsHandRaised:
    name: "Is Hand Raised"
    type: Condition
    pattern:
        - "%living entities%'[s] [main] hand[s] (is|are) raised"
        - "%living entities%'[s] [main] hand[s] (isn't|is not|aren't|are not) raised"
        - "[main] hand[s] of %living entities% (is|are) raised"
        - "[main] hand[s] of %living entities% (isn't|is not|aren't|are not) raised"
        - "%living entities%'[s] off[ |-]hand[s] (is|are) raised"
        - "%living entities%'[s] off[ |-]hand[s] (isn't|is not|aren't|are not) raised"
        - "off[ |-]hand[s] of %living entities% (is|are) raised"
        - "off[ |-]hand[s] of %living entities% (isn't|is not|aren't|are not) raised"
    description: "Checks whether an entity has one or both of their hands raised. Hands are
raised when an entity is using an item (eg: blocking, drawing a bow, eating)."

CondItemInHand:
    name: "Is Holding"
    type: Condition
    pattern:
        - "[%living entities%] ha(s|ve) %item types% in [main] hand"
        - "[%living entities%] (is|are) holding %item types% [in main hand]"
        - "[%living entities%] ha(s|ve) %item types% in off[(-| )]hand"
        - "[%living entities%] (is|are) holding %item types% in off[(-| )]hand"
        - "[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in [main] hand"
        - "[%living entities%] (is not|isn't) holding %item types% [in main hand]"
        - "[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in off[(-|
)]hand"
        - "[%living entities%] (is not|isn't) holding %item types% in off[(-| )]hand"
    description: "Checks whether a player is holding a specific item. Cannot be used with
endermen, use `entity is [not] an enderman holding <item type>` instead."

CondIncendiary:
    name: "Is Incendiary"
    type: Condition
    pattern:
        - "%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)"
        - "%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do
not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)"
        - "the [event(-| )]explosion (is|(is not|isn't)) (incendiary|fiery)"
    description: "Checks if an entity will create fire when it explodes. This condition is also
usable in an explosion prime event."

CondIsInfinite:
    name: "Is Infinite"
    type: Condition
    pattern:
        - "%potion effects% (is|are) infinite"
        - "%potion effects% (isn't|is not|aren't|are not) infinite"
    description: "Checks whether potion effects are infinite."

CondIsInteractable:
    name: "Is Interactable"
    type: Condition
    pattern:
        - "%item types% (is|are) interactable"
        - "%item types% (isn't|is not|aren't|are not) interactable"
    description: "Checks wether or not a block is interactable."

CondIsInvisible:
    name: "Is Invisible"
    type: Condition
    pattern:
        - "%living entities% (is|are) (invisible|visible)"
        - "%living entities% (isn't|is not|aren't|are not) (invisible|visible)"
    description: "Checks whether a living entity is invisible."

CondIsInvulnerable:
    name: "Is Invulnerable"
    type: Condition
    pattern:
        - "%entities% (is|are) invulnerable"
        - "%entities% (isn't|is not|aren't|are not) invulnerable"
    description: "Checks whether an entity is invulnerable."

CondIsJumping:
    name: "Is Jumping"
    type: Condition
    pattern:
        - "%living entities% (is|are) jumping"
        - "%living entities% (isn't|is not|aren't|are not) jumping"
    description: "Checks whether a living entity is jumping. This condition does not work on
players."

CondLeashed:
    name: "Is Leashed"
    type: Condition
    pattern:
        - "%living entities% (is|are) leashed"
        - "%living entities% (isn't|is not|aren't|are not) leashed"
    description: "Checks to see if an entity is currently leashed."

CondIsLoaded:
    name: "Is Loaded"
    type: Condition
    pattern:
        - "chunk[s] %directions% [%locations%] (is|are)[((n't| not))] loaded"
        - "chunk [at] %number%, %number% (in|of) [world] %world% is[((n't| not))] loaded"
        - "[world[s]] %worlds% (is|are)[((n't| not))] loaded"
    description: "Checks whether or not a chunk/world is loaded. `chunk at 1, 1` uses chunk
coords, which are location coords divided by 16."

CondIsMember:
    name: "Is Member/Owner of Region"
    type: Condition
    pattern:
        - "%offline players% (is|are) ([a] member|[(the|an)] owner) of [[the] region]
%regions%"
        - "%offline players% (is|are)(n't| not) ([a] member|[(the|an)] owner) of [[the]
region] %regions%"
    description: "Checks whether a player is a member or owner of a particular region. This
condition requires a supported regions plugin to be installed."

CondIsVectorNormalized:
    name: "Is Normalized"
    type: Condition
    pattern:
        - "%vectors% (is|are) normalized"
        - "%vectors% (isn't|is not|aren't|are not) normalized"
    description: "Checks whether a vector is normalized i.e. length of 1"

CondIsOccluding:
    name: "Is Occluding"
    type: Condition
    pattern:
        - "%item types% (is|are) occluding"
        - "%item types% (isn't|is not|aren't|are not) occluding"
    description: "Checks whether an item is a block and completely blocks vision."

CondIsOnline:
    name: "Is Online"
    type: Condition
    pattern:
        - "%offline players% (is|are) (online|offline)"
        - "%offline players% (isn't|is not|aren't|are not) (online|offline)"
    description: "Checks whether a player is online."

CondIsOp:
    name: "Is Operator"
    type: Condition
    pattern:
        - "%offline players% (is|are) [[a] server|an] op[erator][s]"
        - "%offline players% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]"
    description: "Checks whether a player is a server operator."

CondIsPassable:
    name: "Is Passable"
    type: Condition
    pattern:
        - "%blocks% (is|are) passable"
        - "%blocks% (isn't|is not|aren't|are not) passable"
    description: "Checks whether a block is passable. A block is passable if it has no colliding
parts that would prevent players from moving through it. Blocks like tall
grass, flowers, signs, etc. are passable, but open doors, fence gates, trap
doors, etc. are not because they still have parts that can be collided with."

CondIsPluginEnabled:
    name: "Is Plugin Enabled"
    type: Condition
    pattern:
        - "plugin[s] %texts% (is|are) enabled"
        - "plugin[s] %texts% (is|are)(n't| not) enabled"
        - "plugin[s] %texts% (is|are) disabled"
    description: "Check if a plugin is enabled/disabled on the server. Plugin names can be found
in the plugin`s `plugin.yml` file or by using the `/plugins` command, they are
NOT the name of the plugin`s jar file. When checking if a plugin is not
enabled, this will return true if the plugin is either disabled or not on the
server. When checking if a plugin is disabled, this will return true if the
plugin is on the server and is disabled."

CondIsPoisoned:
    name: "Is Poisoned"
    type: Condition
    pattern:
        - "%living entities% (is|are) poisoned"
        - "%living entities% (isn't|is not|aren't|are not) poisoned"
    description: "Checks whether an entity is poisoned."

CondIsPreferredTool:
    name: "Is Preferred Tool"
    type: Condition
    pattern:
        - "%item types% (is|are) %blocks/block datas%'s preferred tool[s]"
        - "%item types% (is|are) [the|a] preferred tool[s] (for|of) %blocks/block datas%"
        - "%item types% (is|are)(n't| not) %blocks/block datas%'s preferred tool[s]"
        - "%item types% (is|are)(n't| not) [the|a] preferred tool[s] (for|of)
%blocks/block datas%"
    description: "Checks whether an item is the preferred tool for a block. A preferred tool is
one that will drop the block`s item when used. For example, a wooden pickaxe
is a preferred tool for grass and stone blocks, but not for iron ore."

CondIsRiding:
    name: "Is Riding"
    type: Condition
    pattern:
        - "%entities% (is|are) riding [%entity types%]"
        - "%entities% (isn't|is not|aren't|are not) riding [%entity types%]"
    description: "Tests whether an entity is riding another or is in a vehicle."

CondIsRiptiding:
    name: "Is Riptiding"
    type: Condition
    pattern:
        - "%living entities% (is|are) riptiding"
        - "%living entities% (isn't|is not|aren't|are not) riptiding"
    description: "Checks to see if an entity is currently using the Riptide enchantment."

CondScriptLoaded:
    name: "Is Script Loaded"
    type: Condition
    pattern:
        - "script[s] [%texts%] (is|are) loaded"
        - "script[s] [%texts%] (isn't|is not|aren't|are not) loaded"
    description: "Check if the current script, or another script, is currently loaded."

CondIsSilent:
    name: "Is Silent"
    type: Condition
    pattern:
        - "%entities% (is|are) silent"
        - "%entities% (isn't|is not|aren't|are not) silent"
    description: "Checks whether an entity is silent i.e. its sounds are disabled."

CondIsSleeping:
    name: "Is Sleeping"
    type: Condition
    pattern:
        - "%players% (is|are) sleeping"
        - "%players% (isn't|is not|aren't|are not) sleeping"
    description: "Checks whether a player is sleeping."

CondIsSlimeChunk:
    name: "Is Slime Chunk"
    type: Condition
    pattern:
        - "%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)"
        - "%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)"
    description: "Tests whether a chunk is a so‐called slime chunk. Slimes can generally spawn
in the swamp biome and in slime chunks. For more info, see the Minecraft wiki."

CondIsSneaking:
    name: "Is Sneaking"
    type: Condition
    pattern:
        - "%players% (is|are) sneaking"
        - "%players% (isn't|is not|aren't|are not) sneaking"
    description: "Checks whether a player is sneaking."

CondIsSolid:
    name: "Is Solid"
    type: Condition
    pattern:
        - "%item types% (is|are) solid"
        - "%item types% (isn't|is not|aren't|are not) solid"
    description: "Checks whether an item is solid."

CondIsSprinting:
    name: "Is Sprinting"
    type: Condition
    pattern:
        - "%players% (is|are) sprinting"
        - "%players% (isn't|is not|aren't|are not) sprinting"
    description: "Checks whether a player is sprinting."

CondIsStackable:
    name: "Is Stackable"
    type: Condition
    pattern:
        - "%item stacks% (is|are) stackable"
        - "%item stacks% (isn't|is not|aren't|are not) stackable"
    description: "Checks whether an item is stackable."

CondIsSwimming:
    name: "Is Swimming"
    type: Condition
    pattern:
        - "%living entities% (is|are) swimming"
        - "%living entities% (isn't|is not|aren't|are not) swimming"
    description: "Checks whether a living entity is swimming."

CondIsTameable:
    name: "Is Tameable"
    type: Condition
    pattern:
        - "%living entities% (is|are) tameable"
        - "%living entities% (isn't|is not|aren't|are not) tameable"
    description: "Check if an entity is tameable."

CondIsTransparent:
    name: "Is Transparent"
    type: Condition
    pattern:
        - "%item types% (is|are) transparent"
        - "%item types% (isn't|is not|aren't|are not) transparent"
    description: "Checks whether an item is transparent. Note that this condition may not work
for all blocks, due to the transparency list used by Spigot not being
completely accurate."

CondIsUnbreakable:
    name: "Is Unbreakable"
    type: Condition
    pattern:
        - "%item types% (is|are) unbreakable"
        - "%item types% (isn't|is not|aren't|are not) unbreakable"
    description: "Checks whether an item is unbreakable."

CondIsValid:
    name: "Is Valid"
    type: Condition
    pattern:
        - "%entities% (is|are) valid"
        - "%entities% (isn't|is not|aren't|are not) valid"
    description: "Checks whether an entity has died or been despawned for some other reason."

CondIsWearing:
    name: "Is Wearing"
    type: Condition
    pattern:
        - "%living entities% (is|are) wearing %item types%"
        - "%living entities% (isn't|is not|aren't|are not) wearing %item types%"
    description: "Checks whether a player is wearing some armour."

CondIsWhitelisted:
    name: "Is Whitelisted"
    type: Condition
    pattern:
        - "[the] server (is|is(n't| not)) white[ ]listed"
        - "%players% (is|are)[(n't| not)] white[ ]listed"
    description: "Whether or not the server or a player is whitelisted."

CondIsWithin:
    name: "Is Within"
    type: Condition
    pattern:
        - "%locations% (is|are) within %location% and %location%"
        - "%locations% (isn't|is not|aren't|are not) within %location% and %location%"
        - "%locations% (is|are) (within|in[side [of]]) %entity/chunk/world/block%"
        - "%locations% (isn't|is not|aren't|are not) (within|in[side [of]])
%entity/chunk/world/block%"
    description: "Whether a location is within something else. The 'something' can be a block,
an entity, a chunk, a world, or a cuboid formed by two other locations. Note
that using the is between condition will refer to a straight line between
locations, while this condition will refer to the cuboid between locations."

CondWithinRadius:
    name: "Is Within Radius"
    type: Condition
    pattern:
        - "%locations% (is|are) within %number% (block|metre|meter)[s] (around|of)
%locations%"
        - "%locations% (isn't|is not|aren't|are not) within %number%
(block|metre|meter)[s] (around|of) %locations%"
    description: "Checks whether a location is within a certain radius of another location."

CondIsSkriptCommand:
    name: "Is a Skript command"
    type: Condition
    pattern:
        - "%text% (is|are) [a] s(k|c)ript (command|cmd)"
        - "%text% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)"
    description: "Checks whether a command/string is a custom Skript command."

CondIsOfType:
    name: "Is of Type"
    type: Condition
    pattern:
        - "%item stacks/entities% (is|are) of type[s] %entity types/entity types%"
        - "%item stacks/entities% (isn't|is not|aren't|are not) of type[s] %entity
types/entity types%"
    description: "Checks whether an item of an entity is of the given type. This is mostly
useful for variables, as you can use the general `is` condition otherwise
(e.g. `victim is a creeper`)."

CondIsOnGround:
    name: "Is on Ground"
    type: Condition
    pattern:
        - "%entities% (is|are) on [the] ground"
        - "%entities% (isn't|is not|aren't|are not) on [the] ground"
    description: "Checks whether an entity is on ground."

CondIsLeftHanded:
    name: "Left Handed"
    type: Condition
    pattern:
        - "%living entities% (is|are) (left|right)( |-)handed"
        - "%living entities% (isn't|is not|aren't|are not) (left|right)( |-)handed"
    description: "Checks if living entities or players are left or right‐handed. Armor stands
are neither right nor left‐handed. Paper 1.17.1+ is required for non‐player
entities."

CondMatches:
    name: "Matches"
    type: Condition
    pattern:
        - "%texts% (match[es]|do[es](n't| not) match) %texts%"
        - "%texts% (partially match[es]|do[es](n't| not) partially match) %texts%"
    description: "Checks whether the defined strings match the input regexes (Regular
expressions)."

CondPvP:
    name: "PvP"
    type: Condition
    pattern:
        - "(is PvP|PvP is) enabled [in %worlds%]"
        - "(is PvP|PvP is) disabled [in %worlds%]"
    description: "Checks the PvP state of a world."

CondRegionContains:
    name: "Region Contains"
    type: Condition
    pattern:
        - "[[the] region] %regions% contain[s] %directions% %locations%"
        - "%locations% (is|are) ([contained] in|part of) [[the] region] %regions%"
        - "[[the] region] %regions% (do|does)(n't| not) contain %directions% %locations%"
        - "%locations% (is|are)(n't| not) (contained in|part of) [[the] region] %regions%"
    description: "Checks whether a location is contained in a particular region. This condition
requires a supported regions plugin to be installed."

CondResourcePack:
    name: "Resource Pack"
    type: Condition
    pattern:
        - "[the] resource pack (was|is|has) [been] %resource pack state%"
        - "[the] resource pack (was|is|has)(n't| not) [been] %resource pack state%"
    description: "Checks state of the resource pack in a resource pack request response event."

CondMinecraftVersion:
    name: "Running Minecraft"
    type: Condition
    pattern:
        - "running [below] minecraft %text%"
    description: "Checks if current Minecraft version is given version or newer."

CondStartsEndsWith:
    name: "Starts/Ends With"
    type: Condition
    pattern:
        - "%texts% (start|end)[s] with %texts%"
        - "%texts% (doesn't|does not|do not|don't) (start|end) with %texts%"
    description: "Checks if a text starts or ends with another."

CondDate:
    name: "Time"
    type: Condition
    pattern:
        - "%date% (was|were)( more|(n't| not) less) than %time span% [ago]"
        - "%date% (was|were)((n't| not) more| less) than %time span% [ago]"
    description: "Tests whether a given real time was more or less than some time span ago."

SecConditional:
    name: "Conditionals"
    type: Section
    pattern:
        - "else"
        - "else [parse] if <.+>"
        - "else [parse] if (any|at least one [of])"
        - "else [parse] if [all]"
        - "[parse] if (any|at least one [of])"
        - "[parse] if [all]"
        - "[parse] if <.+>"
        - "then [run]"
        - "implicit:<.+>"
    description: "Conditional sections if: executed when its condition is true else if: executed
if all previous chained conditionals weren`t executed, and its condition is
true else: executed if all previous chained conditionals weren`t executed

parse if: a special case of `if` condition that its code will not be parsed if
the condition is not true else parse if: another special case of `else if`
condition that its code will not be parsed if all previous chained
conditionals weren`t executed, and its condition is true"

SecLoop:
    name: "Loop"
    type: Section
    pattern:
        - "loop %objects%"
    description: "Loop sections repeat their code with multiple values.

A loop will loop through all elements of the given expression, e.g. all
players, worlds, items, etc. The conditions & effects inside the loop will be
executed for every of those elements, which can be accessed with ‘loop‐’, e.g.
`send 'hello' to loop‐player`. When a condition inside a loop is not fulfilled
the loop will start over with the next element of the loop. You can however
use `stop loop` to exit the loop completely and resume code execution after
the end of the loop.

 **Loopable Values** All expressions that represent more than one value, e.g.
‘all players’, ‘worlds’, etc., as well as list variables, can be looped. You
can also use a list of expressions, e.g. `loop the victim and the attacker`,
to execute the same code for only a few values.

 **List Variables** When looping list variables, you can also use `loop‐index`
in addition to `loop‐value` inside the loop. `loop‐value` is the value of the
currently looped variable, and `loop‐index` is the last part of the variable`s
name (the part where the list variable has its asterisk *)."

SecWhile:
    name: "While Loop"
    type: Section
    pattern:
        - "[do] while <.+>"
    description: "While Loop sections are loops that will just keep repeating as long as a
condition is met."

EventAt_time:
    name: "At Time"
    type: Event
    pattern:
        - "[on] at %time% [in %worlds%]"
    description: "An event that occurs at a given minecraft time in every world or only in
specific worlds."

EventAnvil_damage:
    name: "On Anvil Damage"
    type: Event
    pattern:
        - "[on] anvil damag(e|ing)"
    description: "Called when an anvil is damaged/broken from being used to repair/rename items.
Note: this does not include anvil damage from falling."

EventAnvil_prepare:
    name: "On Anvil Prepare"
    type: Event
    pattern:
        - "[on] anvil prepar(e|ing)"
    description: "Called when an item is put in a slot for repair by an anvil. Please note that
this event is called multiple times in a single item slot move."

EventAoe_cloud_effect:
    name: "On AoE Cloud Effect"
    type: Event
    pattern:
        - "[on] (area|AoE) [cloud] effect"
    description: "Called when area effect cloud applies its potion effect. This happens every 5
ticks by default."

EventArm_swing:
    name: "On Arm Swing"
    type: Event
    pattern:
        - "[on] [player] arm swing"
    description: "Called when a player swings their arm."

EventArmor_change:
    name: "On Armor Change"
    type: Event
    pattern:
        - "[on] [player] armor change[d]"
    description: "Called when armor pieces of a player are changed."

EventBed_enter:
    name: "On Bed Enter"
    type: Event
    pattern:
        - "[on] bed enter[ing]"
        - "[on] [player] enter[ing] [a] bed"
    description: "Called when a player starts sleeping."

EventBed_leave:
    name: "On Bed Leave"
    type: Event
    pattern:
        - "[on] bed leav(e|ing)"
        - "[on] [player] leav(e|ing) [a] bed"
    description: "Called when a player leaves a bed."

EventBlock_damage:
    name: "On Block Damage"
    type: Event
    pattern:
        - "[on] block damag(ing|e)"
    description: "Called when a player starts to break a block. You can usually just use the
leftclick event for this."

EventBlock_fertilize:
    name: "On Block Fertilize"
    type: Event
    pattern:
        - "[on] [block] fertilize"
    description: "Called when a player fertilizes blocks."

EventBlock_growth:
    name: "On Block Growth"
    type: Event
    pattern:
        - "[on] (plant|crop|block) grow[(th|ing)] [[of] %item types%]"
    description: "Called when a crop grows. Alternative to new form of generic grow event."

EventBook_edit:
    name: "On Book Edit"
    type: Event
    pattern:
        - "[on] book (edit|change|write)"
    description: "Called when a player edits a book."

EventBook_sign:
    name: "On Book Sign"
    type: Event
    pattern:
        - "[on] book sign[ing]"
    description: "Called when a player signs a book."

EventBreak_mine:
    name: "On Break / Mine"
    type: Event
    pattern:
        - "[on] [block] (break[ing]|min(e|ing)) [[of] %item types/block datas%]"
    description: "Called when a block is broken by a player. If you use `on mine`, only events
where the broken block dropped something will call the trigger."

EventBucket_empty:
    name: "On Bucket Empty"
    type: Event
    pattern:
        - "[on] bucket empty[ing]"
        - "[on] [player] empty[ing] [a] bucket"
    description: "Called when a player empties a bucket. You can also use the place event with a
check for water or lava."

EventBucket_fill:
    name: "On Bucket fill"
    type: Event
    pattern:
        - "[on] bucket fill[ing]"
        - "[on] [player] fill[ing] [a] bucket"
    description: "Called when a player fills a bucket."

EventBurn:
    name: "On Burn"
    type: Event
    pattern:
        - "[on] [block] burn[ing] [[of] %item types/block datas%]"
    description: "Called when a block is destroyed by fire."

EventCan_build_check:
    name: "On Can Build Check"
    type: Event
    pattern:
        - "[on] [block] can build check"
    description: "Called when a player rightclicks on a block while holding a block or a
placeable item. You can either cancel the event to prevent the block from
being built, or uncancel it to allow it. Please note that the data value of
the block to be placed is not available in this event, only its ID."

EventChat:
    name: "On Chat"
    type: Event
    pattern:
        - "[on] chat"
    description: "Called whenever a player chats. Use chat format to change message format. Use
chat recipients to edit chat recipients."

EventChunk_generate:
    name: "On Chunk Generate"
    type: Event
    pattern:
        - "[on] chunk (generat|populat)(e|ing)"
    description: "Called after a new chunk was generated."

EventChunk_load:
    name: "On Chunk Load"
    type: Event
    pattern:
        - "[on] chunk load[ing]"
    description: "Called when a chunk loads. The chunk might or might not contain mobs when it`s
loaded."

EventChunk_unload:
    name: "On Chunk Unload"
    type: Event
    pattern:
        - "[on] chunk unload[ing]"
    description: "Called when a chunk is unloaded due to not being near any player."

EventClick:
    name: "On Click"
    type: Event
    pattern:
        - "[on] [(right|left)[( |-)]][mouse[( |-)]]click[ing] [on %entity type/item
type%] [(with|using|holding) %item type%]"
        - "[on] [(right|left)[( |-)]][mouse[( |-)]]click[ing] (with|using|holding) %item
type% on %entity type/item type%"
    description: "Called when a user clicks on a block, an entity or air with or without an item
in their hand. Please note that rightclick events with an empty hand while not
looking at a block are not sent to the server, so there`s no way to detect
them. Also note that a leftclick on an entity is an attack and thus not
covered by the `click` event, but the `damage` event."

EventCombust:
    name: "On Combust"
    type: Event
    pattern:
        - "[on] combust[ing]"
    description: "Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by
standing in direct sunlight (zombies, skeletons)."

EventCommand:
    name: "On Command"
    type: Event
    pattern:
        - "[on] command [%text%]"
    description: "Called when a player enters a command (not necessarily a Skript command) but
you can check if command is a skript command, see Is a Skript command
condition."

EventConnect:
    name: "On Connect"
    type: Event
    pattern:
        - "[on] [player] connect[ing]"
    description: "Called when the player connects to the server. This event is called before the
player actually joins the server, so if you want to prevent players from
joining you should prefer this event over on join."

EventConsume:
    name: "On Consume"
    type: Event
    pattern:
        - "[on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %item types%]"
    description: "Called when a player is done eating/drinking something, e.g. an apple, bread,
meat, milk or a potion."

EventCraft:
    name: "On Craft"
    type: Event
    pattern:
        - "[on] [player] craft[ing] [[of] %item types%]"
    description: "Called when a player crafts an item."

EventCreeper_power:
    name: "On Creeper Power"
    type: Event
    pattern:
        - "[on] creeper power"
    description: "Called when a creeper is struck by lighting and gets powered. Cancel the event
to prevent the creeper from being powered."

EventDamage:
    name: "On Damage"
    type: Event
    pattern:
        - "[on] damag(e|ing) [of %entity type%] [by %entity type%]"
    description: "Called when an entity receives damage, e.g. by an attack from another entity,
lava, fire, drowning, fall, suffocation, etc."

EventDeath:
    name: "On Death"
    type: Event
    pattern:
        - "[on] death [of %entity types%]"
    description: "Called when a living entity (including players) dies."

EventDispense:
    name: "On Dispense"
    type: Event
    pattern:
        - "[on] dispens(e|ing) [[of] %item types%]"
    description: "Called when a dispenser dispenses an item."

EventDrop:
    name: "On Drop"
    type: Event
    pattern:
        - "[on] [player|entity] drop[ping] [[of] %item types%]"
    description: "Called when a player drops an item from their inventory, or an entity drops an
item, such as a chicken laying an egg."

EventEgg_throw:
    name: "On Egg Throw"
    type: Event
    pattern:
        - "[on] throw[ing] [of] [an] egg"
        - "[on] [player] egg throw"
    description: "Called when a player throws an egg and it lands. You can just use the shoot
event in most cases. However, this event allows modification of properties
like the hatched entity type and the number of entities to hatch."

EventEnchant:
    name: "On Enchant"
    type: Event
    pattern:
        - "[on] [item] enchant"
    description: "Called when a player successfully enchants an item. To get the enchanted item,
see the enchant item expression"

EventEnchant_prepare:
    name: "On Enchant Prepare"
    type: Event
    pattern:
        - "[on] [item] enchant prepare"
    description: "Called when a player puts an item into enchantment table. This event may be
called multiple times. To get the enchant item, see the enchant item
expression"

EventEndermansheepsilverfishfalling_block:
    name: "On Enderman/Sheep/Silverfish/Falling Block"
    type: Event
    pattern:
        - "[on] enderman place"
        - "[on] enderman pickup"
        - "[on] sheep eat"
        - "[on] silverfish enter"
        - "[on] silverfish exit"
        - "[on] falling block fall[ing]"
        - "[on] falling block land[ing]"
        - "[on] (entity|%*-entitydatas%) chang(e|ing) block[s]"
    description: "Called when an enderman places or picks up a block, a sheep eats grass, a
silverfish boops into/out of a block or a falling block lands and turns into a
block respectively. event‐block represents the old block and event‐blockdata
represents the new replacement that`ll be applied to the block."

EventEntity_dismount:
    name: "On Entity Dismount"
    type: Event
    pattern:
        - "[on] dismount[ing]"
    description: "Called when an entity dismounts."

EventEntity_jump:
    name: "On Entity Jump"
    type: Event
    pattern:
        - "[on] entity jump[ing]"
    description: "Called when an entity jumps."

EventEntity_mount:
    name: "On Entity Mount"
    type: Event
    pattern:
        - "[on] mount[ing]"
    description: "Called when entity starts riding another."

EventEntity_portal:
    name: "On Entity Portal"
    type: Event
    pattern:
        - "[on] entity portal"
    description: "Called when an entity uses a nether or end portal. Cancel the event to prevent
the entity from teleporting."

EventEntity_transform:
    name: "On Entity Transform"
    type: Event
    pattern:
        - "[on] (entit(y|ies)|%*-entitydatas%) transform[ing] [due to %transform
reasons%]"
    description: "Called when an entity is about to be replaced by another entity. Examples when
it`s called include; when a zombie gets cured and a villager spawns, an entity
drowns in water like a zombie that turns to a drown, an entity that gets
frozen in powder snow, a mooshroom that when sheared, spawns a new cow."

EventExperience_change:
    name: "On Experience Change"
    type: Event
    pattern:
        - "[on] [player] (level progress|[e]xp|experience)
(change|update|increase|decrease)"
    description: "Called when a player`s experience changes."

EventExperience_spawn:
    name: "On Experience Spawn"
    type: Event
    pattern:
        - "[on] [e]xp[erience] [orb] spawn"
        - "[on] spawn of [a[n]] [e]xp[erience] [orb]"
    description: "Called whenever experience is about to spawn. Please note that this event will
not fire for xp orbs spawned by plugins (including Skript) with Bukkit."

EventExplode:
    name: "On Explode"
    type: Event
    pattern:
        - "[on] explo(d(e|ing)|sion)"
    description: "Called when an entity (a primed TNT or a creeper) explodes."

EventExplosion_prime:
    name: "On Explosion Prime"
    type: Event
    pattern:
        - "[on] explosion prime"
    description: "Called when an explosive is primed, i.e. an entity will explode shortly.
Creepers can abort the explosion if the player gets too far away, while TNT
will explode for sure after a short time."

EventFade:
    name: "On Fade"
    type: Event
    pattern:
        - "[on] [block] fad(e|ing) [[of] %item types/block datas%]"
    description: "Called when a block `fades away`, e.g. ice or snow melts."

EventFirework_explode:
    name: "On Firework Explode"
    type: Event
    pattern:
        - "[on] [a] firework explo(d(e|ing)|sion) [colo[u]red %colors%]"
    description: "Called when a firework explodes."

EventFirst_join:
    name: "On First Join"
    type: Event
    pattern:
        - "[on] first (join|login)"
    description: "Called when a player joins the server for the first time."

EventFishing:
    name: "On Fishing"
    type: Event
    pattern:
        - "[on] [player] fish[ing]"
    description: "Called when a player fishes something. This is not of much use yet."

EventFlight_toggle:
    name: "On Flight Toggle"
    type: Event
    pattern:
        - "[on] [player] flight toggl(e|ing)"
        - "[on] [player] toggl(e|ing) flight"
    description: "Called when a players stops/starts flying."

EventFlow:
    name: "On Flow"
    type: Event
    pattern:
        - "[on] [block] flow[ing]"
        - "[on] block mov(e|ing)"
    description: "Called when a blocks flows or teleports to another block. This not only
applies to water and lava, but teleporting dragon eggs as well."

EventForm:
    name: "On Form"
    type: Event
    pattern:
        - "[on] [block] form[ing] [[of] %item types/block datas%]"
    description: "Called when a block is created, but not by a player, e.g. snow forms due to
snowfall, water freezes in cold biomes. This isn`t called when block spreads
(mushroom growth, water physics etc.), as it has its own event (see spread
event)."

EventFuel_burn:
    name: "On Fuel Burn"
    type: Event
    pattern:
        - "[on] fuel burn[ing]"
    description: "Called when a furnace burns an item from its fuel slot."

EventGamemode_change:
    name: "On Gamemode Change"
    type: Event
    pattern:
        - "[on] game[ ]mode change [to %gamemode%]"
    description: "Called when a player`s gamemode changes."

EventGliding_state_change:
    name: "On Gliding State Change"
    type: Event
    pattern:
        - "[on] (gliding state change|toggl(e|ing) gliding)"
    description: "Called when an entity toggles glider on or off, or when server toggles gliding
state of an entity forcibly."

EventGrow:
    name: "On Grow"
    type: Event
    pattern:
        - "[on] grow[th] [of (%tree types%|%item types/block datas%)]"
        - "[on] grow[th] from %item types/block datas%"
        - "[on] grow[th] [in]to (%tree types%|%item types/block datas%)"
        - "[on] grow[th] from %item types/block datas% [in]to (%tree types%|%item
types/block datas%)"
    description: "Called when a tree, giant mushroom or plant grows to next stage. 'of' matches
any grow event, 'from' matches only the old state, 'into' matches only the new
state,and 'from into' requires matching both the old and new states. Using
'and' lists in this event is equivalent to using 'or' lists. The event will
trigger if any one of the elements is what grew."

EventHand_item_swap:
    name: "On Hand Item Swap"
    type: Event
    pattern:
        - "[on] swap[ping of] [(hand|held)] item[s]"
    description: "Called whenever a player swaps the items in their main‐ and offhand slots.
Works also when one or both of the slots are empty. The event is called before
the items are actually swapped, so when you use the player`s tool or player`s
offtool expressions, they will return the values before the swap ‐ this
enables you to cancel the event before anything happens."

EventHeal:
    name: "On Heal"
    type: Event
    pattern:
        - "[on] heal[ing]"
    description: "Called when an entity is healed, e.g. by eating (players), being fed (pets),
or by the effect of a potion of healing (overworld mobs) or harm (nether
mobs)."

EventHorse_jump:
    name: "On Horse Jump"
    type: Event
    pattern:
        - "[on] horse jump"
    description: "Called when a horse jumps."

EventHunger_meter_change:
    name: "On Hunger Meter Change"
    type: Event
    pattern:
        - "[on] (food|hunger) (level|met(er|re)|bar) chang(e|ing)"
    description: "Called when the hunger bar of a player changes, i.e. either increases by
eating or decreases over time."

EventIgnition:
    name: "On Ignition"
    type: Event
    pattern:
        - "[on] [block] ignit(e|ion)"
    description: "Called when a block starts burning, i.e. a fire block is placed next to it and
this block is flammable. The burn event will be called when the block is about
do be destroyed by the fire."

EventInventory_click:
    name: "On Inventory Click"
    type: Event
    pattern:
        - "[on] [player] inventory(-| )click[ing] [[at] %item types%]"
    description: "Called when clicking on inventory slot."

EventInventory_close:
    name: "On Inventory Close"
    type: Event
    pattern:
        - "[on] inventory clos(ing|e[d])"
    description: "Called when player`s currently viewed inventory is closed."

EventInventory_drag:
    name: "On Inventory Drag"
    type: Event
    pattern:
        - "[on] inventory drag[ging]"
    description: "Called when a player drags an item in their cursor across the inventory."

EventInventory_item_move:
    name: "On Inventory Item Move"
    type: Event
    pattern:
        - "[on] inventory item (move|transport)"
    description: "Called when an entity or block (e.g. hopper) tries to move items directly from
one inventory to another. When this event is called, the initiator may have
already removed the item from the source inventory and is ready to move it
into the destination inventory. If this event is cancelled, the items will be
returned to the source inventory."

EventInventory_open:
    name: "On Inventory Open"
    type: Event
    pattern:
        - "[on] inventory open[ed]"
    description: "Called when an inventory is opened for player."

EventInventory_pickup:
    name: "On Inventory Pickup"
    type: Event
    pattern:
        - "[on] inventory pick[ ]up"
    description: "Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item"

EventInventory_slot_change:
    name: "On Inventory Slot Change"
    type: Event
    pattern:
        - "[on] [player] inventory slot chang(e|ing)"
    description: "Called when a slot in a player`s inventory is changed. Warning: setting the
event‐slot to a new item can result in an infinite loop."

EventItem_break:
    name: "On Item Break"
    type: Event
    pattern:
        - "[on] [player] tool break[ing]"
        - "[on] [player] break[ing] [(a|the)] tool"
    description: "Called when a player breaks their tool because its damage reached the maximum
value. This event cannot be cancelled."

EventItem_damage:
    name: "On Item Damage"
    type: Event
    pattern:
        - "[on] item damag(e|ing)"
    description: "Called when an item is damaged. Most tools are damaged by using them; armor is
damaged when the wearer takes damage."

EventItem_despawn:
    name: "On Item Despawn"
    type: Event
    pattern:
        - "[on] (item[ ][stack]|[item] %item types%) despawn[ing]"
        - "[on] [item[ ][stack]] despawn[ing] [[of] %item types%]"
    description: "Called when an item is about to be despawned from the world, usually 5 minutes
after it was dropped."

EventItem_mend:
    name: "On Item Mend"
    type: Event
    pattern:
        - "[on] item mend[ing]"
    description: "Called when a player has an item repaired via the Mending enchantment."

EventItem_merge:
    name: "On Item Merge"
    type: Event
    pattern:
        - "[on] (item[ ][stack]|[item] %item types%) merg(e|ing)"
        - "[on] item[ ][stack] merg(e|ing) [[of] %item types%]"
    description: "Called when dropped items merge into a single stack. event‐entity will be the
entity which is trying to merge, and future event‐entity will be the entity
which is being merged into."

EventItem_spawn:
    name: "On Item Spawn"
    type: Event
    pattern:
        - "[on] item spawn[ing] [[of] %item types%]"
    description: "Called whenever an item stack is spawned in a world, e.g. as drop of a block
or mob, a player throwing items out of their inventory, or a dispenser
dispensing an item (not shooting it)."

EventJoin:
    name: "On Join"
    type: Event
    pattern:
        - "[on] [player] (login|logging in|join[ing])"
    description: "Called when the player joins the server. The player is already in a world when
this event is called, so if you want to prevent players from joining you
should prefer on connect over this event."

EventJump:
    name: "On Jump"
    type: Event
    pattern:
        - "[on] [player] jump[ing]"
    description: "Called whenever a player jumps. This event requires PaperSpigot."

EventKick:
    name: "On Kick"
    type: Event
    pattern:
        - "[on] [player] (kick|being kicked)"
    description: "Called when a player is kicked from the server. You can change the kick
message or cancel the event entirely."

EventLanguage_change:
    name: "On Language Change"
    type: Event
    pattern:
        - "[on] [player] (language|locale) chang(e|ing)"
        - "[on] [player] chang(e|ing) (language|locale)"
    description: "Called after a player changed their language in the game settings. You can use
the language expression to get the current language of the player. This event
requires Minecraft 1.12+."

EventLeaves_decay:
    name: "On Leaves Decay"
    type: Event
    pattern:
        - "[on] leaves decay[ing]"
    description: "Called when a leaf block decays due to not being connected to a tree."

EventLevel_change:
    name: "On Level Change"
    type: Event
    pattern:
        - "[on] [player] level (change|up|down)"
    description: "Called when a player`s level changes, e.g. by gathering experience or by
enchanting something."

EventLightning_strike:
    name: "On Lightning Strike"
    type: Event
    pattern:
        - "[on] lightning [strike]"
    description: "Called when lightning strikes."

EventLoot_generate:
    name: "On Loot Generate"
    type: Event
    pattern:
        - "[on] loot generat(e|ing)"
    description: "Called when a loot table of an inventory is generated in the world. For
example, when opening a shipwreck chest."

EventMove_rotate:
    name: "On Move / Rotate"
    type: Event
    pattern:
        - "[on] %entity type% (move|walk|step|(turn[ing] around|rotate))"
        - "[on] %entity type% (move|walk|step) or (turn[ing] around|rotate)"
        - "[on] %entity type% (turn[ing] around|rotate) or (move|walk|step)"
    description: "Called when a player or entity moves or rotates their head. NOTE: Move event
will only be called when the entity/player moves position, keyword `turn
around` is for orientation (ie: looking around), and the combined syntax
listens for both. NOTE: These events can be performance heavy as they are
called quite often."

EventMove_on:
    name: "On Move On"
    type: Event
    pattern:
        - "[on] (step|walk)[ing] (on|over) %*item types%"
    description: "Called when a player moves onto a certain type of block. Please note that
using this event can cause lag if there are many players online."

EventPhysics:
    name: "On Physics"
    type: Event
    pattern:
        - "[on] [block] physics"
    description: "Called when a physics check is done on a block. By cancelling this event you
can prevent some things from happening, e.g. sand falling, dirt turning into
grass, torches dropping if their supporting block is destroyed, etc.Please
note that using this event might cause quite some lag since it gets called
extremely often."

EventPick_up:
    name: "On Pick Up"
    type: Event
    pattern:
        - "[on] [(player|entity)] (pick[ ]up|picking up) [[of] %item types%]"
    description: "Called when a player/entity picks up an item. Please note that the item is
still on the ground when this event is called."

EventPig_zap:
    name: "On Pig Zap"
    type: Event
    pattern:
        - "[on] pig[ ]zap"
    description: "Called when a pig is stroke by lightning and transformed into a zombie pigman.
Cancel the event to prevent the transformation."

EventPiston_extend:
    name: "On Piston Extend"
    type: Event
    pattern:
        - "[on] piston extend[ing]"
    description: "Called when a piston is about to extend."

EventPiston_retract:
    name: "On Piston Retract"
    type: Event
    pattern:
        - "[on] piston retract[ing]"
    description: "Called when a piston is about to retract."

EventPlace:
    name: "On Place"
    type: Event
    pattern:
        - "[on] [block] (plac(e|ing)|build[ing]) [[of] %item types/block datas%]"
    description: "Called when a player places a block."

EventPlayer_chunk_enter:
    name: "On Player Chunk Enter"
    type: Event
    pattern:
        - "[on] [player] (enter[s] [a] chunk|chunk enter[ing])"
    description: "Called when a player enters a chunk. Note that this event is based on `player
move` event, and may be called frequent internally."

EventPlayer_deep_sleep:
    name: "On Player Deep Sleep"
    type: Event
    pattern:
        - "[on] [player] deep sleep[ing]"
    description: "Called when a player has slept long enough to count as passing the
night/storm. Cancelling this event will prevent the player from being counted
as deeply sleeping unless they exit and re‐enter the bed."

EventPlayer_pickup_arrow:
    name: "On Player Pickup Arrow"
    type: Event
    pattern:
        - "[on] [player] (pick[ing| ]up [an] arrow|arrow pick[ing| ]up)"
    description: "Called when a player picks up an arrow from the ground."

EventPlayer_trade:
    name: "On Player Trade"
    type: Event
    pattern:
        - "[on] player trad(e|ing)"
    description: "Called when a player has traded with a villager."

EventPlayer_world_change:
    name: "On Player World Change"
    type: Event
    pattern:
        - "[on] [player] world chang(ing|e[d])"
    description: "Called when a player enters a world. Does not work with other entities!"

EventPortal:
    name: "On Portal"
    type: Event
    pattern:
        - "[on] [player] portal"
    description: "Called when a player uses a nether or end portal. Cancel the event to prevent
the player from teleporting."

EventPortal_create:
    name: "On Portal Create"
    type: Event
    pattern:
        - "[on] portal creat(e|ion)"
    description: "Called when a portal is created, either by a player or mob lighting an
obsidian frame on fire, or by a nether portal creating its teleportation
target in the nether/overworld. In Minecraft 1.14+, you can use the player in
this event. Please note that there may not always be a player (or other
entity) in this event."

EventPortal_enter:
    name: "On Portal Enter"
    type: Event
    pattern:
        - "[on] portal enter[ing]"
        - "[on] entering [a] portal"
    description: "Called when an entity enters a nether portal or an end portal. Please note
that this event will be fired many times for a nether portal."

EventPrepare_craft:
    name: "On Prepare Craft"
    type: Event
    pattern:
        - "[on] [player] (preparing|beginning) craft[ing] [[of] %item types%]"
    description: "Called just before displaying crafting result to player. Note that setting the
result item might or might not work due to Bukkit bugs."

EventPressure_plate_trip:
    name: "On Pressure Plate / Trip"
    type: Event
    pattern:
        - "[on] [step[ping] on] [a] [pressure] plate"
        - "[on] (trip|[step[ping] on] [a] tripwire)"
    description: "Called when a _player_ steps on a pressure plate or tripwire respectively."

EventProjectile_collide:
    name: "On Projectile Collide"
    type: Event
    pattern:
        - "[on] projectile collide"
    description: "Called when a projectile collides with an entity."

EventProjectile_hit:
    name: "On Projectile Hit"
    type: Event
    pattern:
        - "[on] projectile hit"
    description: "Called when a projectile hits an entity or a block. Use the damage event with
a check for a projectile to be able to use the entity that got hit in the case
when the projectile hit a living entity. A damage event will even be fired if
the damage is 0, e.g. when throwing snowballs at non‐nether mobs."

EventQuit:
    name: "On Quit"
    type: Event
    pattern:
        - "[on] (quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing))"
    description: "Called when a player leaves the server."

EventReady_arrow:
    name: "On Ready Arrow"
    type: Event
    pattern:
        - "[on] [player] ((ready|choose|draw|load) arrow|arrow (choose|draw|load))"
    description: "Called when a player is firing a bow and the server is choosing an arrow to
use. Cancelling this event will skip the current arrow item and fire a new
event for the next arrow item. The arrow and bow in the event can be accessed
with the Readied Arrow/Bow expression."

EventRedstone:
    name: "On Redstone"
    type: Event
    pattern:
        - "[on] redstone [current] [chang(e|ing)]"
    description: "Called when the redstone current of a block changes. This event is of not much
use yet."

EventRegion_enterleave:
    name: "On Region Enter/Leave"
    type: Event
    pattern:
        - "[on] (enter[ing]|leav(e|ing)|exit[ing]) [of] ([a] region|[[the] region]
%regions%)"
        - "[on] region (enter[ing]|leav(e|ing)|exit[ing])"
    description: "Called when a player enters or leaves a region. This event requires a
supported regions plugin to be installed."

EventResource_pack_request_response:
    name: "On Resource Pack Request Response"
    type: Event
    pattern:
        - "[on] resource pack [request] response"
        - "[on] resource pack [request] %resource pack states%"
    description: "Called when a player takes action on a resource pack request sent via the send
resource pack effect. The resource pack condition can be used to check the
resource pack state.

This event will be triggered once when the player accepts or declines the
resource pack request, and once when the resource pack is successfully
installed or failed to download."

EventRespawn:
    name: "On Respawn"
    type: Event
    pattern:
        - "[on] [player] respawn[ing]"
    description: "Called when a player respawns. You should prefer this event over the death
event as the player is technically alive when this event is called."

EventResurrect_attempt:
    name: "On Resurrect Attempt"
    type: Event
    pattern:
        - "[on] [entity] resurrect[ion] [attempt]"
    description: "Called when an entity dies, always. If they are not holding a totem, this is
cancelled ‐ you can, however, uncancel it."

EventRiptide:
    name: "On Riptide"
    type: Event
    pattern:
        - "[on] [use of] riptide [enchant[ment]]"
    description: "Called when the player activates the riptide enchantment, using their trident
to propel them through the air. Note: the riptide action is performed client
side, so manipulating the player in this event may have undesired effects."

EventScript_loadunload:
    name: "On Script Load/Unload"
    type: Event
    pattern:
        - "[on] [async] [script] (load|init|enable)"
        - "[on] [async] [script] (unload|stop|disable)"
    description: "Called directly after the trigger is loaded, or directly before the whole
script is unloaded. The keyword `async` indicates the trigger can be ran
asynchronously,"

EventSend_command_list:
    name: "On Send Command List"
    type: Event
    pattern:
        - "[on] send[ing] [of [the]] [server] command[s] list"
        - "[on] [server] command list send"
    description: "Called when the server sends a list of commands to the player. This usually
happens on join. The sent commands can be modified via the sent commands
expression. Modifications will affect what commands show up for the player to
tab complete. They will not affect what commands the player can actually run.
Adding new commands to the list is illegal behavior and will be ignored."

EventServer_list_ping:
    name: "On Server List Ping"
    type: Event
    pattern:
        - "[on] server [list] ping"
    description: "Called when a server list ping is coming in, generally when a Minecraft client
pings the server to show its information in the server list. The IP expression
can be used to get the IP adress of the pinger. This event can be cancelled on
PaperSpigot 1.12.2+ only and this means the player will see the server as
offline (but still can join).

Also you can use MOTD, Max Players, Online Players Count, Protocol Version,
Version String, Hover List and Server Icon expressions, and Player Info
Visibility and Hide Player from Server List effects to modify the server list."

EventServer_startstop:
    name: "On Server Start/Stop"
    type: Event
    pattern:
        - "[on] (server|skript) (start|load|enable)"
        - "[on] (server|skript) (stop|unload|disable)"
    description: "Called when the server starts or stops (actually, when Skript starts or stops,
so a /reload will trigger these events as well)."

EventSheep_regrow_wool:
    name: "On Sheep Regrow Wool"
    type: Event
    pattern:
        - "[on] sheep [re]grow[ing] wool"
    description: "Called when sheep regrows its sheared wool back."

EventShoot:
    name: "On Shoot"
    type: Event
    pattern:
        - "[on] [projectile] shoot"
    description: "Called whenever a projectile is shot. Use the shooter expression to get who
shot the projectile."

EventSign_change:
    name: "On Sign Change"
    type: Event
    pattern:
        - "[on] sign (chang[e]|edit)[ing]"
        - "[on] [player] (chang[e]|edit)[ing] [a] sign"
    description: "As signs are placed empty, this event is called when a player is done editing
a sign."

EventSlime_split:
    name: "On Slime Split"
    type: Event
    pattern:
        - "[on] slime split[ting]"
    description: "Called when a slime splits. Usually this happens when a big slime dies."

EventSmelt:
    name: "On Smelt"
    type: Event
    pattern:
        - "[on] [ore] smelt[ing]"
        - "[on] smelt[ing] of ore"
    description: "Called when a furnace smelts an item in its ore slot."

EventSneak_toggle:
    name: "On Sneak Toggle"
    type: Event
    pattern:
        - "[on] [player] toggl(e|ing) sneak"
        - "[on] [player] sneak toggl(e|ing)"
    description: "Called when a player starts or stops sneaking. Use is sneaking to get whether
the player was sneaking before the event was called."

EventSpawn:
    name: "On Spawn"
    type: Event
    pattern:
        - "[on] spawn[ing] [of %entity types%]"
    description: "Called when an entity spawns (excluding players)."

EventSpawn_change:
    name: "On Spawn Change"
    type: Event
    pattern:
        - "[on] [world] spawn change"
    description: "Called when the spawn point of a world changes."

EventSpectate:
    name: "On Spectate"
    type: Event
    pattern:
        - "[on] [player] stop spectating [(of|from) %*entity types%]"
        - "[on] [player] (swap|switch) spectating [(of|from) %*entity types%]"
        - "[on] [player] start spectating [of %*entity types%]"
    description: "Called with a player starts, stops or swaps spectating an entity."

EventSponge_absorb:
    name: "On Sponge Absorb"
    type: Event
    pattern:
        - "[on] sponge absorb"
    description: "Called when a sponge absorbs blocks."

EventSpread:
    name: "On Spread"
    type: Event
    pattern:
        - "[on] spread[ing]"
    description: "Called when a new block forms as a result of a block that can spread, e.g.
water or mushrooms."

EventSprint_toggle:
    name: "On Sprint Toggle"
    type: Event
    pattern:
        - "[on] [player] toggl(e|ing) sprint"
        - "[on] [player] sprint toggl(e|ing)"
    description: "Called when a player starts or stops sprinting. Use is sprinting to get
whether the player was sprinting before the event was called."

EventStonecutter_recipe_select:
    name: "On Stonecutter Recipe Select"
    type: Event
    pattern:
        - "[on] stonecutting [[of] %item types%]"
    description: "Called when a player selects a recipe in a stonecutter."

EventStop_using_item:
    name: "On Stop Using Item"
    type: Event
    pattern:
        - "[on] [player] (stop|end) (using item|item use)"
    description: "Called when a player stops using an item. For example, when the player
releases the interact button when holding a bow, an edible item, or a
spyglass. Note that event‐timespan will return the time the item was used for."

EventSwim_toggle:
    name: "On Swim Toggle"
    type: Event
    pattern:
        - "[on] [entity] toggl(e|ing) swim"
        - "[on] [entity] swim toggl(e|ing)"
    description: "Called when an entity swims or stops swimming."

EventTame:
    name: "On Tame"
    type: Event
    pattern:
        - "[on] [entity] tam(e|ing)"
    description: "Called when a player tames a wolf or ocelot. Can be cancelled to prevent the
entity from being tamed."

EventTarget:
    name: "On Target"
    type: Event
    pattern:
        - "[on] [entity] target"
        - "[on] [entity] un[-]target"
    description: "Called when a mob starts/stops following/attacking another entity, usually a
player."

EventTeleport:
    name: "On Teleport"
    type: Event
    pattern:
        - "[on] [player] teleport[ing]"
    description: "Called whenever a player is teleported, either by a nether/end portal or other
means (e.g. by plugins)."

EventTool_change:
    name: "On Tool Change"
    type: Event
    pattern:
        - "[on] [player['s]] (tool|item held|held item) chang(e|ing)"
    description: "Called whenever a player changes their held item by selecting a different slot
(e.g. the keys 1‐9 or the mouse wheel), _not_ by dropping or replacing the
item in the current slot."

EventVehicle_create:
    name: "On Vehicle Create"
    type: Event
    pattern:
        - "[on] vehicle create"
        - "[on] creat(e|ing|ion of) [a] vehicle"
    description: "Called when a new vehicle is created, e.g. when a player places a boat or
minecart."

EventVehicle_damage:
    name: "On Vehicle Damage"
    type: Event
    pattern:
        - "[on] vehicle damage"
        - "[on] damag(e|ing) [a] vehicle"
    description: "Called when a vehicle gets damage. Too much damage will destroy the vehicle."

EventVehicle_destroy:
    name: "On Vehicle Destroy"
    type: Event
    pattern:
        - "[on] vehicle destroy"
        - "[on] destr(oy[ing]|uction of) [a] vehicle"
    description: "Called when a vehicle is destroyed. Any passenger will be ejected and the
vehicle might drop some item(s)."

EventVehicle_enter:
    name: "On Vehicle Enter"
    type: Event
    pattern:
        - "[on] vehicle enter"
        - "[on] enter[ing] [a] vehicle"
    description: "Called when an entity enters a vehicle, either deliberately (players) or by
falling into them (mobs)."

EventVehicle_exit:
    name: "On Vehicle Exit"
    type: Event
    pattern:
        - "[on] vehicle exit"
        - "[on] exit[ing] [a] vehicle"
    description: "Called when an entity exits a vehicle."

EventWeather_change:
    name: "On Weather Change"
    type: Event
    pattern:
        - "[on] weather change [to %weather types%]"
    description: "Called when a world`s weather changes."

EventWorld_init:
    name: "On World Init"
    type: Event
    pattern:
        - "[on] world init[ialization] [of %worlds%]"
    description: "Called when a world is initialized. As all default worlds are initialized
before any scripts are loaded, this event is only called for newly created
worlds. World management plugins might change the behaviour of this event
though."

EventWorld_load:
    name: "On World Load"
    type: Event
    pattern:
        - "[on] world load[ing] [of %worlds%]"
    description: "Called when a world is loaded. As with the world init event, this event will
not be called for the server`s default world(s)."

EventWorld_save:
    name: "On World Save"
    type: Event
    pattern:
        - "[on] world sav(e|ing) [of %worlds%]"
    description: "Called when a world is saved to disk. Usually all worlds are saved
simultaneously, but world management plugins could change this."

EventWorld_unload:
    name: "On World Unload"
    type: Event
    pattern:
        - "[on] world unload[ing] [of %worlds%]"
    description: "Called when a world is unloaded. This event will never be called if you don`t
have a world management plugin."

EventZombie_break_door:
    name: "On Zombie Break Door"
    type: Event
    pattern:
        - "[on] zombie break[ing] [a] [wood[en]] door"
    description: "Called when a zombie is done breaking a wooden door. Can be cancelled to
prevent the zombie from breaking the door."

EventPeriodical:
    name: "Periodical"
    type: Event
    pattern:
        - "[on] every %time span%"
    description: "An event that is called periodically."

EventEventperiodical:
    name: "Periodical"
    type: Event
    pattern:
        - "[on] every %time span% in [world[s]] %worlds%"
    description: "An event that is called periodically."

TypeAttributetype:
    name: "Attribute Type"
    type: Type
    pattern:
        - "luck, generic movement speed, horse jump strength, generic luck, generic max
absorption, follow range, movement speed, max absorption, generic follow
range, zombie spawn reinforcements, generic attack knockback, knockback
resistance, attack knockback, generic armor toughness, generic attack speed,
max health, flying speed, attack damage, generic attack damage, generic armor,
generic flying speed, generic knockback resistance, armor, attack speed, armor
toughness, generic max health"
    description: "Represents the type of an attribute. Note that this type does not contain any
numerical values.See attribute types for more info."

TypeBiome:
    name: "Biome"
    type: Type
    pattern:
        - "roofed forest, old growth pine taiga, mesa forest, the void, snowy taiga,
hell, jagged peaks, spiked ice plains, crimson forest, stone shore, birch
forest, cold taiga, cold beach, savanna, giant tree taiga, marsh, windswept
forest, wooded badlands, sky, nether, void, cold ocean, giant spruce taiga,
lush caves, deep lukewarm ocean, deep frozen ocean, small end islands, ice
spikes, old growth birch forest, badlands, badlands forest, ocean, lukewarm
ocean, ice plains spikes, gravelly mountains, frozen peaks, stony peaks,
jungle, basalt deltas, snowy beach, frozen ocean, mountains, forest, wooded
mesa, eroded mesa, the end, dripstone caves, swampland, end barrens, ice
plains with spikes, windswept hills, sea, unknown, black forest, soul sand
valley, deep dark, mesa, plains, eroded badlands, mushroom fields, windswept
gravelly hills, mushroom island, wooded mountains, shattered savanna,
sunflower plains, snowy plains, meadow, snowy slopes, flower forest, windswept
savanna, nether wastes, stony shore, taiga, frozen river, warm ocean, custom,
old growth spruce taiga, deep cold ocean, swamp, mangrove swamp, deep ocean,
end highlands, end midlands, cherry grove, sparse jungle, dark forest, jungle
edge, grove, snowy tundra, beach, bamboo jungle, savanna plateau, river, tall
birch forest, warped forest, desert"
    description: "All possible biomes Minecraft uses to generate a world."

TypeBlock:
    name: "Block"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A block in a world. It has a location and a type, and can also have a
direction (mostly a facing), an inventory, or other special properties."

TypeBlockdata:
    name: "Block Data"
    type: Type
    pattern:
        - "Missing patterns."
    description: "Block data is the detailed information about a block, referred to in Minecraft
as BlockStates, allowing for the manipulation of different aspects of the
block, including shape, waterlogging, direction the block is facing, and so
much more. Information regarding each block`s optional data can be found on
Minecraft`s Wiki. Find the block you`re looking for and scroll down to `Block
States`. Different states must be separated by a semicolon (see examples). The
`minecraft:` namespace is optional, as well as are underscores."

TypeBoolean:
    name: "Boolean"
    type: Type
    pattern:
        - "true/yes/on or false/no/off"
    description: "A boolean is a value that is either true or false. Other accepted names are
`on` and `yes` for true, and `off` and `no` for false."

TypeCattype:
    name: "Cat Type"
    type: Type
    pattern:
        - "red, all black, british shorthair, ragdoll, white, jellie, siamese, black,
tabby, calico, persian"
    description: "Represents the race/type of a cat entity."

TypeChunk:
    name: "Chunk"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed
rectangular grid in their world."

TypeClicktype:
    name: "Click Type"
    type: Type
    pattern:
        - "lmb, number key, mmb, rmb, drop item, drop key, window border using left mouse
button, unknown, window border using right mouse, shift+rmb, unsupported,
shift+lmb, ctrl+q, swap shield, left mouse button, left mouse with shift, left
mouse, 0-9, double click, double click using mouse, border using rmb, right
mouse button, right mouse button with shift, border using lmb, middle mouse,
drop key with control, window border using right mouse button, swap offhand,
custom, q, right mouse with shift, middle mouse button, drop stack, left mouse
button with shift, right mouse, creative action"
    description: "Click type, mostly for inventory events. Tells exactly which keys/buttons
player pressed, assuming that default keybindings are used in client side."

TypeColor:
    name: "Color"
    type: Type
    pattern:
        - "black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white,
blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light
aqua, green/dark green, light green/lime/lime green, yellow/light yellow,
orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple,
magenta/light purple, brown/indigo"
    description: "Wool, dye and chat colors."

TypeCommandsender:
    name: "Command Sender"
    type: Type
    pattern:
        - "use the console for the console"
        - "see player for players."
    description: "A player or the console."

TypeDamagecause:
    name: "Damage Cause"
    type: Type
    pattern:
        - "sweep attack, thorns, the void, magma, a lightning, drowning, dragonfire, an
attack, drown, an entity attack, melt, freeze, falling block, contact, fire,
an entity explosion, lightning, a fall, entity explosion, void, a lightning
strike, suffocation, suicide, wither effect, a plugin, lightning strike,
entity attack, a potion, a wither, sweeping, melting, a falling block,
unknown, starvation, lava, fall, hot floor, attack, a block explosion, dryout,
burn, hitting wall while flying, potion, world border, flying into a wall,
cramming, poison, sonic boom, suffocate, custom, kill, killed, a fire,
burning, a projectile, plugin, wither potion effect, block explosion,
projectile, wither, dragon's breath"
    description: "The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion,
poison, etc. Please note that support for this type is very rudimentary, e.g.
lava, fire and burning, as well as projectile and attack are considered
different types."

TypeDate:
    name: "Date"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A date is a certain point in the real world`s time which can be obtained with
now expression, unix date expression and date function. See time and timespan
for the other time types of Skript."

TypeDifficulty:
    name: "Difficulty"
    type: Type
    pattern:
        - "normal, medium, hard, easy, peaceful"
    description: "The difficulty of a world."

TypeDirection:
    name: "Direction"
    type: Type
    pattern:
        - "see direction (expression)"
    description: "A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right,
etc. Locations and some blocks also have a direction, but without a length.
Please note that directions have changed extensively in the betas and might
not work perfectly. They can also not be used as command arguments."

TypeEnchantment:
    name: "Enchantment"
    type: Type
    pattern:
        - "Efficiency, Looting, Silk Touch, Quick Charge, Soul Speed, Flame, Fortune,
Multishot, Aqua Affinity, Channeling, Loyalty, Curse of Binding, Punch,
Projectile Protection, Power, Sharpness, Frost Walker, Fire Protection,
Impaling, Luck of The Sea, Riptide, Protection, Mending, Respiration,
Piercing, Swift Sneak, Feather Falling, Unbreaking, Smite, Lure, Fire Aspect,
Knockback, Depth Strider, Sweeping Edge, Infinity, Curse of Vanishing, Bane of
Arthropods, Blast Protection, Thorns"
    description: "An enchantment, e.g. `sharpness` or `fortune`. Unlike enchantment type this
type has no level, but you usually don`t need to use this type anyway."

TypeEnchantmentoffer:
    name: "Enchantment Offer"
    type: Type
    pattern:
        - "Missing patterns."
    description: "The enchantmentoffer in an enchant prepare event."

TypeEnchantmenttype:
    name: "Enchantment Type"
    type: Type
    pattern:
        - "<enchantment> [<level>]"
    description: "An enchantment with an optional level, e.g. `sharpness 2` or `fortune`."

TypeEntity:
    name: "Entity"
    type: Type
    pattern:
        - "player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig,
fireball, arrow, dropped item, item frame, etc."
    description: "An entity is something in a world that`s not a block, e.g. a player, a
skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown
potions, or special entities like dropped items, falling blocks or paintings."

TypeEntitydata:
    name: "Entity Type"
    type: Type
    pattern:
        - " _Detailed usage will be added eventually_"
    description: "The type of an entity, e.g. player, wolf, powered creeper, etc."

TypeEntitytype:
    name: "Entity Type with Amount"
    type: Type
    pattern:
        - "<number> <entity type>"
    description: "An entity type with an amount, e.g. `2 zombies`. I might remove this type in
the future and make a more general `type` type, i.e. a type that has a number
and a type."

TypeExperience:
    name: "Experience"
    type: Type
    pattern:
        - "[<number>] ([e]xp|experience [point[s]])"
    description: "Experience points. Please note that Bukkit only allows to give XP, but not
remove XP from players. You can however change a player`s level and level
progress freely."

TypeFireworkeffect:
    name: "Firework Effect"
    type: Type
    pattern:
        - "See Firework Types"
    description: "A configuration of effects that defines the firework when exploded which can
be used in the launch firework effect. See the firework effect expression for
detailed patterns."

TypeFireworktype:
    name: "Firework Type"
    type: Type
    pattern:
        - "small, ball, star shaped, large, star, creeper face, small ball, large ball,
burst, ball large, creeper"
    description: "The type of a fireworkeffect."

TypeGamemode:
    name: "Game Mode"
    type: Type
    pattern:
        - "adventure, survival, spectator, creative"
    description: "The game modes survival, creative, adventure and spectator."

TypeGamerule:
    name: "Gamerule"
    type: Type
    pattern:
        - "tntExplosionDropDecay, globalSoundEvents, enderPearlsVanishOnDeath,
doFireTick, maxCommandChainLength, doVinesSpread, disableElytraMovementCheck,
lavaSourceConversion, commandBlockOutput, forgiveDeadPlayers,
playersNetherPortalCreativeDelay, doMobSpawning, maxEntityCramming,
universalAnger, playersSleepingPercentage, snowAccumulationHeight,
doImmediateRespawn, blockExplosionDropDecay, naturalRegeneration, doMobLoot,
fallDamage, doEntityDrops, randomTickSpeed, playersNetherPortalDefaultDelay,
spawnRadius, freezeDamage, sendCommandFeedback, doWardenSpawning, fireDamage,
reducedDebugInfo, waterSourceConversion, projectilesCanBreakBlocks,
announceAdvancements, drowningDamage, disableRaids, doWeatherCycle,
mobExplosionDropDecay, doDaylightCycle, showDeathMessages, doTileDrops,
doInsomnia, keepInventory, doLimitedCrafting, mobGriefing, doTraderSpawning,
commandModificationBlockLimit, logAdminCommands, spectatorsGenerateChunks,
doPatrolSpawning, maxCommandForkCount"
    description: "A gamerule"

TypeGamerulevalue:
    name: "Gamerule Value"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A wrapper for the value of a gamerule for a world."

TypeGene:
    name: "Gene"
    type: Type
    pattern:
        - "normal, lazy, happy, worried, worrisome, aggressive, brown, brownish, savage,
playful, wild, weak"
    description: "Represents a Panda`s main or hidden gene. See genetics for more info."

TypeHealreason:
    name: "Heal Reason"
    type: Type
    pattern:
        - "an ender crystal, magic, a magic regeneration, magic regeneration, fed, sated,
a magic regen, regen potion, a wither spawn, peaceful, unknown, a regeneration
potion, consuming, a wither effect, peaceful regeneration, wither summoning,
healing potion, wither potion, an end crystal, satiated, regeneration potion,
potion, satisfied, ingesting, withered, custom, a wither spawning, end
crystal, eating, wither spawning, a wither summoning, wither effect, a plugin,
a regen potion, plugin, withering, a potion, wither spawn, a healing potion,
ender crystal, magic regen, wither, peaceful regen"
    description: "The heal reason in a heal event."

TypeInventory:
    name: "Inventory"
    type: Type
    pattern:
        - "Missing patterns."
    description: "An inventory of a player or block. Inventories have many effects and
conditions regarding the items contained. An inventory has a fixed amount of
slots which represent a specific place in the inventory, e.g. the helmet slot
for players (Please note that slot support is still very limited but will be
improved eventually)."

TypeInventoryaction:
    name: "Inventory Action"
    type: Type
    pattern:
        - "drop stack from slot, swap items with hotbar, swap cursor stack, pickup single
item, pickup some, drop all from cursor, move to other inventory, drop cursor
stack, pickup all, swap with hotbar, nothing, drop all from slot, swap cursor,
drop cursor, pickup all items, drop slot item, place all, drop cursor item,
drop slot stack, drop single item from slot, swap with cursor, place some,
pickup one item, drop single item from cursor, collect items to cursor,
unknown, clone stack, drop stack from cursor, drop one item from slot, drop
one item from cursor, unsupported, do nothing, drop one from cursor, pickup
half, drop items from slot, swap stack with cursor, place all items, collect
to cursor, pickup some items, drop slot, drop items from cursor, hotbar move
and readd, shift move, custom, pickup single, place one item, hotbar swap
items, drop one from slot, place some items, place one, pickup half stack,
instant move, hotbar swap"
    description: "What player just did in inventory event. Note that when in creative game mode,
most actions do not work correctly."

TypeInventoryclosereason:
    name: "Inventory Close Reasons"
    type: Type
    pattern:
        - "disconnect, death, teleport, cannot use, new opened, unknown, can't use,
unloaded, disconnected, plugin, can not use, open new, player"
    description: "The inventory close reason in an inventory close event."

TypeInventorytype:
    name: "Inventory Type"
    type: Type
    pattern:
        - "barrel inventory, a loom inventory, a blast furnace inventory, workbench
inventory, ender chest inventory, loom inventory, a workbench inventory,
hopper inventory, a merchant inventory, a hopper inventory, chiseled
bookshelf, an ender chest inventory, new smithing table, bookshelf, a jukebox,
beacon inventory, shulker box inventory, a barrel inventory, a shulker box
inventory, lectern inventory, chest inventory, a villager inventory, a smoker
inventory, a brewing stand inventory, a smithing inventory, grindstone
inventory, a crafter inventory, a crafting table inventory, a player
inventory, decorated pot, furnace inventory, a creative inventory, blast
furnace inventory, upgrade gear, a composter inventory, an enchanting table
inventory, jukebox, a dropper inventory, a cartography table inventory, a
upgrade gear, smoker inventory, composter inventory, a chest inventory,
upgrade gear table, a upgrade gear table, dispenser inventory, player
inventory, stonecutter inventory, a stonecutter inventory, a decorated pot, a
lectern inventory, merchant inventory, cartography table inventory, a chiseled
bookshelf, a new smithing table, a furnace inventory, anvil inventory, a
dispenser inventory, a grindstone inventory, smithing inventory, dropper
inventory, brewing stand inventory, villager inventory, enchanting table
inventory, a beacon inventory, a bookshelf, crafter inventory, creative
inventory, crafting table inventory, an anvil inventory"
    description: "Minecraft has several different inventory types with their own use cases."

TypeItemstack:
    name: "Item"
    type: Type
    pattern:
        - "`[<number> [of]] <alias> [of <enchantment> <level>]`, Where <alias> must be an
alias that represents exactly one item (i.e cannot be a general alias like
'sword' or 'plant')"
    description: "An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2.
Unlike item type an item can only represent exactly one item (e.g. an
upside‐down cobblestone stair facing west), while an item type can represent a
whole range of items (e.g. any cobble stone stairs regardless of direction).
You don`t usually need this type except when you want to make a command that
only accepts an exact item. Please note that currently `material` is exactly
the same as `item`, i.e. can have an amount & enchantments."

TypeItemtype:
    name: "Item Type"
    type: Type
    pattern:
        - "[<number> [of]] [all/every] <alias> [of <enchantment> [<level>] [,/and <more
enchantments...>]]"
    description: "An item type is an alias, e.g. `a pickaxe`, `all plants`, etc., and can result
in different items when added to an inventory, and unlike items they are well
suited for checking whether an inventory contains a certain item or whether a
certain item is of a certain type. An item type can also have one or more
enchantments with or without a specific level defined, and can optionally
start with `all` or `every` to make this item type represent _all_ types that
the alias represents, including data ranges."

TypeLivingentity:
    name: "Living Entity"
    type: Type
    pattern:
        - "see entity, but ignore inanimate objects"
    description: "A living entity, i.e. a mob or player, not inanimate entities like projectiles
or dropped items."

TypeLocation:
    name: "Location"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A location in a world. Locations are world‐specific and even store a
direction, e.g. if you save a location and later teleport to it you will face
the exact same direction you did when you saved the location."

TypeMetadataholder:
    name: "Metadata Holder"
    type: Type
    pattern:
        - "Missing patterns."
    description: "Something that can hold metadata (e.g. an entity or block)"

TypeMoney:
    name: "Money"
    type: Type
    pattern:
        - "<number> $ or $ <number>, where '$' is your server's currency, e.g. '10
rupees' or '£5.00'"
    description: "A certain amount of money. Please note that this differs from numbers as it
includes a currency symbol or name, but usually the two are interchangeable,
e.g. you can both `add 100$ to the player`s balance` and `add 100 to the
player`s balance`."

TypeMoonphase:
    name: "Moon Phase"
    type: Type
    pattern:
        - "last quarter, waning crescent, waxing gibbous, full moon, waning gibbous,
waxing crescent, new moon, first quarter"
    description: "Represents the phase of a moon."

TypeNumber:
    name: "Number"
    type: Type
    pattern:
        - "[-]###[.###]` (any amount of digits; very large numbers will be truncated
though)"
    description: "A number, e.g. 2.5, 3, or ‐9812454. Please note that many expressions only
need integers, i.e. will discard any fractional parts of any numbers without
producing an error."

TypeObject:
    name: "Object"
    type: Type
    pattern:
        - "Missing patterns."
    description: "The supertype of all types, meaning that if %object% is used in e.g. a
condition it will accept all kinds of expressions."

TypeOfflineplayer:
    name: "Offline Player"
    type: Type
    pattern:
        - "Parsing an offline player as a player (online) will return nothing (none), for
that case you would need to parse as offlineplayer which only returns nothing
(none) if player doesn't exist in Minecraft databases (name not taken)
otherwise it will return the player regardless of their online status."
    description: "A player that is possibly offline. See player for more information. Please
note that while all effects and conditions that require a player can be used
with an offline player as well, they will not work if the player is not
actually online."

TypePlayer:
    name: "Player"
    type: Type
    pattern:
        - "Parsing an offline player as a player (online) will return nothing (none), for
that case you would need to parse as offlineplayer which only returns nothing
(none) if player doesn't exist in Minecraft databases (name not taken)
otherwise it will return the player regardless of their online status."
    description: "A player. Depending on whether a player is online or offline several actions
can be performed with them, though you won`t get any errors when using effects
that only work if the player is online (e.g. changing their inventory) on an
offline player. You have two possibilities to use players as command
arguments: <player> and <offline player>. The first requires that the player
is online and also accepts only part of the name, while the latter doesn`t
require that the player is online, but the player`s name has to be entered
exactly."

TypePotioneffect:
    name: "Potion Effect"
    type: Type
    pattern:
        - "speed of tier 1 for 10 seconds"
    description: "A potion effect, including the potion effect type, tier and duration."

TypePotioneffecttype:
    name: "Potion Effect Type"
    type: Type
    pattern:
        - "null, speed, slowness, haste, mining fatigue, strength, instant health,
instant damage, jump boost, nausea, regeneration, resistance, fire resistance,
water breathing, invisibility, blindness, night vision, hunger, weakness,
poison, wither, health boost, absorption, saturation, glowing, levitation,
luck, bad luck, slow falling, conduit power, dolphins grace, bad omen, hero of
the village, darkness"
    description: "A potion effect type, e.g. `strength` or `swiftness`."

TypeProjectile:
    name: "Projectile"
    type: Type
    pattern:
        - "arrow, fireball, snowball, thrown potion, etc."
    description: "A projectile, e.g. an arrow, snowball or thrown potion."

TypeQuitreason:
    name: "Quit Reason"
    type: Type
    pattern:
        - "disconnected, erroneous state, kicked, quit, timed out, erroneous"
    description: "Represents a quit reason from a player quit server event."

TypeRegion:
    name: "Region"
    type: Type
    pattern:
        - "'region name'"
    description: "A region of a regions plugin. Skript currently supports WorldGuard, Factions,
GriefPrevention and PreciousStones. Please note that some regions plugins do
not have named regions, some use numerical ids to identify regions, and some
may have regions with the same name in different worlds, thus using regions
like 'region name' in scripts may or may not work."

TypeResourcepackstate:
    name: "Resource Pack State"
    type: Type
    pattern:
        - "discarded, refused, rejected, failed reload, accepted, failed, failed to
reload, failed to download, downloaded, successfully loaded, accept, fail,
successfully load, refuse, declined, successfully install, success, reject,
decline, successfully installed, download fail, invalid url"
    description: "The state in a resource pack request response event."

TypeCachedservericon:
    name: "Server Icon"
    type: Type
    pattern:
        - "Missing patterns."
    description: "A server icon that was loaded using the load server icon effect."

TypeSlot:
    name: "Slot"
    type: Type
    pattern:
        - "Missing patterns."
    description: "Represents a single slot of an inventory. Notable slots are the armour slots
and furnace slots. The most important property that distinguishes a slot from
an item is its ability to be changed, e.g. it can be set, deleted, enchanted,
etc. (Some item expressions can be changed as well, e.g. items stored in
variables. For that matter: slots are never saved to variables, only the items
they represent at the time when the variable is set). Please note that tool
can be regarded a slot, but it can actually change it`s position, i.e. doesn`t
represent always the same slot."

TypeSoundcategory:
    name: "Sound Category"
    type: Type
    pattern:
        - "hostile creatures category, speech category, records category, friendly
creature category, noteblock category, hostile creature category, note block
category, voice category, ambient category, noteblocks category, note blocks
category, weather category, block category, friendly mob category, jukebox
category, hostile mob category, master category, master volume category,
hostile category, record category, blocks category, environment category,
jukeboxes category, player category, players category, hostile mobs category,
friendly mobs category, music category, friendly creatures category, neutral
category"
    description: "The category of a sound, they are used for sound options of Minecraft. See the
play sound and stop sound effects."

TypeSpawnreason:
    name: "Spawn Reason"
    type: Type
    pattern:
        - "dispense egg, egg, village defense, ocelot baby, silverfish trap, village
invading, trap, dispensing egg, shoulder, drowned, metamorphosis, lightning,
silverfish reveal, spell, built iron golem, natural, village invasion, frozen,
mount, build wither, built wither, iron golem defense, ender pearl, creature
spawner, reinforcements, build snowman, build iron golem, breeding, raid,
infection, customized, spawn egg, jockey, beehive, default, golem defense,
patrol, slime split, infected, sheared, mob spawner, nether portal, shear,
perching, custom, built snowman, chunk generation, breed, command,
duplication, explosion, spawner, cured, customised, piglin zombification"
    description: "The spawn reason in a spawn event."

TypeTeleportcause:
    name: "Teleport Cause"
    type: Type
    pattern:
        - "bed exit, nether portal, ender gateway, exiting bed, chorus fruit, ender
portal, command, unknown, plugin, dismounted, ender pearl, spectator,
spectate, end gateway, chorus, exit bed, gateway, dismount, end portal"
    description: "The teleport cause in a teleport event."

TypeString:
    name: "Text"
    type: Type
    pattern:
        - "simple: '...'"
        - "quotes: '...''...'"
        - "expressions: '...%expression%...'"
        - "percent signs: '...%%...'"
    description: "Text is simply text, i.e. a sequence of characters, which can optionally
contain expressions which will be replaced with a meaningful representation
(e.g. %player% will be replaced with the player`s name). Because scripts are
also text, you have to put text into double quotes to tell Skript which part
of the line is an effect/expression and which part is the text. Please read
the article on Texts and Variable Names to learn more."

TypeTime:
    name: "Time"
    type: Type
    pattern:
        - "##:##"
        - "##[:##][ ]am/pm"
    description: "A time is a point in a minecraft day`s time (i.e. ranges from 0:00 to 23:59),
which can vary per world. See date and timespan for the other time types of
Skript."

TypeTimeperiod:
    name: "Timeperiod"
    type: Type
    pattern:
        - "##:## - ##:##"
        - "dusk/day/dawn/night"
    description: "A period of time between two times. Mostly useful since you can use this to
test for whether it`s day, night, dusk or dawn in a specific world. This type
might be removed in the future as you can use `time of world is between x and
y` as a replacement."

TypeTimespan:
    name: "Timespan"
    type: Type
    pattern:
        - "<number> [minecraft/mc/real/rl/irl]
ticks/seconds/minutes/hours/days/weeks/months/years [[,/and] <more...>]"
        - "[###:]##:##[.####] ([hours:]minutes:seconds[.milliseconds])"
    description: "A timespan is a difference of two different dates or times, e.g `10 minutes`.
Timespans are always displayed as real life time, but can be defined as
minecraft time, e.g. `5 minecraft days and 12 hours`. NOTE: Months always have
the value of 30 days, and years of 365 days. See date and time for the other
time types of Skript."

TypeTransformreason:
    name: "Transform Reason"
    type: Type
    pattern:
        - "infection, magma slime split, villager infection, tadpole metamorphosis,
drowning, creeper super charge, unknown, split, tadpole converting,
metamorphosis, skeleton converting to stray, lightning, slime split, entity
drowning, slime splitting, zombie drowning, zombie curing, skeleton freeze,
entity freezing, zombie converting to drowned, curing, entity freeze, skeleton
freezing, mooshroom shear, zombie cure, tadpole converting to frog, mooshroom
shearing, magma slime splitting, piglin zombification"
    description: "Represents a transform reason of an entity transform event."

TypeStructuretype:
    name: "Tree Type"
    type: Type
    pattern:
        - "[any] <general tree/mushroom type>, e.g. tree/any jungle tree/etc."
        - "<specific tree/mushroom species>, e.g. red mushroom/small jungle tree/big
regular tree/etc."
    description: "A tree type represents a tree species or a huge mushroom species. These can be
generated in a world with the generate tree effect."

TypeClassinfo:
    name: "Type"
    type: Type
    pattern:
        - "See the type name patterns of all types - including this one"
    description: "Represents a type, e.g. number, object, item type, location, block, world,
entity type, etc. This is mostly used for expressions like `event‐<type>`,
`<type>‐argument`, `loop‐<type>`, etc., e.g. event‐world, number‐argument and
loop‐player."

TypeVector:
    name: "Vector"
    type: Type
    pattern:
        - "vector(x, y, z)"
    description: "Vector is a collection of numbers. In Minecraft, 3D vectors are used to
express velocities of entities."

TypeVisualeffect:
    name: "Visual Effect"
    type: Type
    pattern:
        - "smoke, potion break, ender signal, mobspawner flames, arrow particles, jumping
rabbit, hurt, wolf smoke, wolf hearts, wolf shaking, sheep eating, iron golem
offering rose, villager hearts, angry villager entity, happy villager entity,
witch magic, zombie turning to a villager, firework explosion, love hearts,
squid rotation reset, entity poof, guardian target, block with shield, shield
break, armor stand hit, hurt by thorns, iron golem sheathing rose,
resurrection by totem, hurt by drowning, hurt by explosion, explosion, large
explosion, huge explosion, firework's spark, water bubble, water splash, water
wake, suspended, void fog, critical hit, magical critical hit, smoke particle,
large smoke, spell, spell, potion swirl, transparent potion swirl, witch
spell, water drip, lava drip, angry villager, happy villager, small smoke,
note, portal, flying glyph, flame, lava pop, cloud, coloured dust, snowball
break, snow shovel, slime, heart, item crack, block break, block dust, water
drop, mob appearance, dragon breath, end rod, damage indicator, sweep attack,
falling dust, totem, spit, squid ink, bubble pop, current down, bubble column
up, nautilus, dolphin, sneeze, campfire cosy smoke, campfire signal smoke,
composter, flash, falling lava, landing lava, falling water, dripping honey,
falling honey, landing honey, falling nectar, soul fire flame, ash, crimson
spore, warped spore, soul, dripping obsidian tear, falling obsidian tear,
landing obsidian tear, reverse portal, white ash, falling spore blossom, spore
blossom air, small flame, snowflake, dripping dripstone lava, falling
dripstone lava, dripping dripstone water, falling dripstone water, glow squid
ink, glow, wax on, wax off, electric spark, scrape, sonic boom, sculk soul,
sculk charge, sculk charge pop, shriek"
    description: "A visible effect, e.g. particles."

TypeWeathertype:
    name: "Weather Type"
    type: Type
    pattern:
        - "clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm"
    description: "The weather types sunny, rainy, and thundering."

TypeWorld:
    name: "World"
    type: Type
    pattern:
        - "`'world_name'`, e.g. 'world'"
    description: "One of the server`s worlds. Worlds can be put into scripts by surrounding
their name with double quotes, e.g. 'world_nether', but this might not work
reliably as text uses the same syntax."

TypeEnvironment:
    name: "World Environment"
    type: Type
    pattern:
        - "normal, nether, the end, the overworld, custom, the nether, end, overworld"
    description: "Represents the environment of a world."

abs:
    name: "abs"
    type: Function
    pattern:
        - "abs(n: number)"
    description: "Returns the absolute value of the argument, i.e. makes the argument positive."

acos:
    name: "acos"
    type: Function
    pattern:
        - "acos(n: number)"
    description: "The inverse of the cosine, also called arccos. Returns result in degrees, not
radians. Only returns values from 0 to 180."

asin:
    name: "asin"
    type: Function
    pattern:
        - "asin(n: number)"
    description: "The inverse of the sine, also called arcsin. Returns result in degrees, not
radians. Only returns values from ‐90 to 90."

atan:
    name: "atan"
    type: Function
    pattern:
        - "atan(n: number)"
    description: "The inverse of the tangent, also called arctan. Returns result in degrees, not
radians. Only returns values from ‐90 to 90."

atan2:
    name: "atan2"
    type: Function
    pattern:
        - "atan2(x: number, y: number)"
    description: "Similar to atan, but requires two coordinates and returns values from ‐180 to
180. The returned angle is measured counterclockwise in a standard
mathematical coordinate system (x to the right, y to the top)."

calcExperience:
    name: "calcExperience"
    type: Function
    pattern:
        - "calcExperience(level: long)"
    description: "Calculates the total amount of experience needed to achieve given level from
scratch in Minecraft."

caseEquals:
    name: "caseEquals"
    type: Function
    pattern:
        - "caseEquals(strs: strings)"
    description: "Checks if the contents of a list of strings are strictly equal with case
sensitivity."

ceil:
    name: "ceil"
    type: Function
    pattern:
        - "ceil(n: number)"
    description: "Rounds a number up, i.e. returns the closest integer larger than or equal to
the argument."

ceiling:
    name: "ceiling"
    type: Function
    pattern:
        - "ceiling(n: number)"
    description: "Alias of ceil."

clamp:
    name: "clamp"
    type: Function
    pattern:
        - "clamp(values: numbers, min: number, max: number)"
    description: "Clamps one or more values between two numbers."

cos:
    name: "cos"
    type: Function
    pattern:
        - "cos(n: number)"
    description: "The cosine function. This is basically the sine shifted by 90°, i.e. `cos(a) =
sin(a + 90°)`, for any number a. Uses degrees, not radians."

date:
    name: "date"
    type: Function
    pattern:
        - "date(year: number, month: number, day: number, hour: number = [[integer:0]],
minute: number = [[integer:0]], second: number = [[integer:0]], millisecond:
number = [[integer:0]], zone_offset: number = [[double:NaN]], dst_offset:
number = [[double:NaN]])"
    description: "Creates a date from a year, month, and day, and optionally also from hour,
minute, second and millisecond. A time zone and DST offset can be specified as
well (in minutes), if they are left out the server`s time zone and DST offset
are used (the created date will not retain this information)."

exp:
    name: "exp"
    type: Function
    pattern:
        - "exp(n: number)"
    description: "The exponential function. You probably don`t need this if you don`t know what
this is."

floor:
    name: "floor"
    type: Function
    pattern:
        - "floor(n: number)"
    description: "Rounds a number down, i.e. returns the closest integer smaller than or equal
to the argument."

isNaN:
    name: "isNaN"
    type: Function
    pattern:
        - "isNaN(n: number)"
    description: "Returns true if the input is NaN (not a number)."

ln:
    name: "ln"
    type: Function
    pattern:
        - "ln(n: number)"
    description: "The natural logarithm. You probably don`t need this if you don`t know what
this is. Returns NaN (not a number) if the argument is negative."

location:
    name: "location"
    type: Function
    pattern:
        - "location(x: number, y: number, z: number, world: world = event-world, yaw:
number = [[integer:0]], pitch: number = [[integer:0]])"
    description: "Creates a location from a world and 3 coordinates, with an optional yaw and
pitch. If for whatever reason the world is not found, it will fallback to the
server`s main world."

log:
    name: "log"
    type: Function
    pattern:
        - "log(n: number, base: number = [[integer:10]])"
    description: "A logarithm, with base 10 if none is specified. This is the inverse operation
to exponentiation (for positive bases only), i.e. `log(base ^ exponent, base)
= exponent` for any positive number `base` and any number `exponent`. Another
useful equation is `base ^ log(a, base) = a` for any numbers `base` and `a`.
Please note that due to how numbers are represented in computers, these
equations do not hold for all numbers, as the computed values may slightly
differ from the correct value. Returns NaN (not a number) if any of the
arguments are negative."

max:
    name: "max"
    type: Function
    pattern:
        - "max(ns: numbers)"
    description: "Returns the maximum number from a list of numbers."

min:
    name: "min"
    type: Function
    pattern:
        - "min(ns: numbers)"
    description: "Returns the minimum number from a list of numbers."

mod:
    name: "mod"
    type: Function
    pattern:
        - "mod(d: number, m: number)"
    description: "Returns the modulo of the given arguments, i.e. the remainder of the division
`d/m`, where d and m are the arguments of this function. The returned value is
always positive. Returns NaN (not a number) if the second argument is zero."

offlineplayer:
    name: "offlineplayer"
    type: Function
    pattern:
        - "offlineplayer(nameoruuid: string)"
    description: "Returns a offline player from their name or UUID. This function will still
return the player if they`re online."

player:
    name: "player"
    type: Function
    pattern:
        - "player(nameoruuid: string, getexactplayer: boolean = [[boolean:false]])"
    description: "Returns an online player from their name or UUID, if player is offline
function will return nothing. Setting `getExactPlayer` parameter to true will
return the player whose name is exactly equal to the provided name instead of
returning a player that their name starts with the provided name."

product:
    name: "product"
    type: Function
    pattern:
        - "product(ns: numbers)"
    description: "Calculates the product of a list of numbers."

rgb:
    name: "rgb"
    type: Function
    pattern:
        - "rgb(red: long, green: long, blue: long)"
    description: "Returns a RGB color from the given red, green and blue parameters."

round:
    name: "round"
    type: Function
    pattern:
        - "round(n: number, d: number = [[integer:0]])"
    description: "Rounds a number, i.e. returns the closest integer to the argument. Place a
second argument to define the decimal placement."

sin:
    name: "sin"
    type: Function
    pattern:
        - "sin(n: number)"
    description: "The sine function. It starts at 0° with a value of 0, goes to 1 at 90°, back
to 0 at 180°, to ‐1 at 270° and then repeats every 360°. Uses degrees, not
radians."

sqrt:
    name: "sqrt"
    type: Function
    pattern:
        - "sqrt(n: number)"
    description: "The square root, which is the inverse operation to squaring a number (for
positive numbers only). This is the same as `(argument) ^ (1/2)` – other roots
can be calculated via `number ^ (1/root)`, e.g. `set {_l} to {_volume}^(1/3)`.
Returns NaN (not a number) if the argument is negative."

sum:
    name: "sum"
    type: Function
    pattern:
        - "sum(ns: numbers)"
    description: "Sums a list of numbers."

tan:
    name: "tan"
    type: Function
    pattern:
        - "tan(n: number)"
    description: "The tangent function. This is basically `sin(arg)/cos(arg)`. Uses degrees, not
radians."

vector:
    name: "vector"
    type: Function
    pattern:
        - "vector(x: number, y: number, z: number)"
    description: "Creates a new vector, which can be used with various expressions, effects and
functions."

world:
    name: "world"
    type: Function
    pattern:
        - "world(name: string)"
    description: "Gets a world from its name."
